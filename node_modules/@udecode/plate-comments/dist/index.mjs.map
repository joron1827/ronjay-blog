{"version":3,"sources":["../src/lib/BaseCommentsPlugin.ts","../src/lib/withComments.ts","../src/lib/transforms/removeCommentMark.ts","../src/lib/queries/findCommentNode.ts","../src/lib/queries/findCommentNodeById.ts","../src/lib/utils/isCommentKey.ts","../src/lib/utils/getCommentCount.ts","../src/lib/utils/getCommentKey.ts","../src/lib/utils/getCommentKeyId.ts","../src/lib/utils/getCommentKeys.ts","../src/lib/utils/getCommentUrl.ts","../src/lib/utils/getElementAbsolutePosition.tsx","../src/lib/utils/isCommentNodeById.ts","../src/lib/utils/isCommentText.ts","../src/lib/utils/unsetCommentNodesById.ts","../src/lib/queries/getCommentNodeEntries.ts","../src/lib/queries/getCommentNodesById.ts"],"sourcesContent":["import {\n  type PluginConfig,\n  type Value,\n  type WithPartial,\n  createTSlatePlugin,\n  getNodeString,\n  nanoid,\n} from '@udecode/plate-common';\n\nimport type { CommentUser, TComment } from './types';\n\nimport { withComments } from './withComments';\n\nexport type BaseCommentsConfig = PluginConfig<\n  'comment',\n  {\n    activeCommentId: string | null;\n    addingCommentId: string | null;\n    comments: Record<string, TComment>;\n    focusTextarea: boolean;\n    myUserId: string | null;\n    newValue: Value;\n    users: Record<string, CommentUser>;\n    onCommentAdd: ((value: WithPartial<TComment, 'userId'>) => void) | null;\n    onCommentDelete: ((id: string) => void) | null;\n    onCommentUpdate:\n      | ((value: Partial<Omit<TComment, 'id'>> & Pick<TComment, 'id'>) => void)\n      | null;\n  } & CommentsSelectors,\n  {\n    comment: CommentsApi;\n  }\n>;\n\nexport type CommentsSelectors = {\n  activeComment?: () => TComment | null;\n  commentById?: (id: string | null) => TComment | null;\n  myUser?: () => CommentUser | null;\n  newText?: () => string;\n  userById?: (id: string | null) => CommentUser | null;\n};\n\nexport type CommentsApi = {\n  addComment: (\n    value: WithPartial<TComment, 'createdAt' | 'id' | 'userId'>\n  ) => WithPartial<TComment, 'userId'>;\n  addRawComment: (id: string) => void;\n  removeComment: (id: string | null) => void;\n  resetNewCommentValue: () => void;\n  updateComment: (id: string | null, value: Partial<TComment>) => void;\n};\n\nexport const BaseCommentsPlugin = createTSlatePlugin<BaseCommentsConfig>({\n  key: 'comment',\n  extendEditor: withComments,\n  node: { isLeaf: true },\n  options: {\n    activeCommentId: null,\n    addingCommentId: null,\n    comments: {},\n    focusTextarea: false,\n    myUserId: null,\n    newValue: [{ children: [{ text: '' }], type: 'p' }],\n    users: {},\n    onCommentAdd: null,\n    onCommentDelete: null,\n    onCommentUpdate: null,\n  },\n})\n  .extendOptions<Partial<CommentsSelectors>>(({ getOptions }) => ({\n    activeComment: () => {\n      const { activeCommentId, comments } = getOptions();\n\n      return activeCommentId ? comments[activeCommentId] : null;\n    },\n    commentById: (id) => {\n      if (!id) return null;\n\n      return getOptions().comments[id];\n    },\n    myUser: () => {\n      const { myUserId, users } = getOptions();\n\n      if (!myUserId) return null;\n\n      return users[myUserId];\n    },\n    newText: () => {\n      const { newValue } = getOptions();\n\n      return getNodeString(newValue?.[0]);\n    },\n    userById: (id) => {\n      if (!id) return null;\n\n      return getOptions().users[id];\n    },\n  }))\n  .extendApi<Partial<CommentsApi>>(({ getOptions, setOptions }) => ({\n    addComment: (value) => {\n      const { myUserId } = getOptions();\n      const id = value.id ?? nanoid();\n      const newComment: WithPartial<TComment, 'userId'> = {\n        id,\n        createdAt: Date.now(),\n        userId: myUserId ?? undefined,\n        ...value,\n      };\n\n      if (newComment.userId) {\n        setOptions((draft) => {\n          draft.comments[id] = newComment as TComment;\n        });\n      }\n\n      return newComment;\n    },\n    addRawComment: (id) => {\n      const { myUserId } = getOptions();\n\n      if (!myUserId) return;\n\n      setOptions((draft) => {\n        draft.comments[id] = {\n          id,\n          userId: myUserId,\n        } as TComment;\n      });\n    },\n    removeComment: (id) => {\n      if (!id) return;\n\n      setOptions((draft) => {\n        delete draft.comments[id];\n      });\n    },\n    resetNewCommentValue: () => {\n      setOptions({ newValue: [{ children: [{ text: '' }], type: 'p' }] });\n    },\n    updateComment: (id, value) => {\n      if (!id) return;\n\n      setOptions((draft) => {\n        draft.comments[id] = { ...draft.comments[id], ...value };\n      });\n    },\n  }));\n","import { type ExtendEditor, unsetNodes } from '@udecode/plate-common';\n\nimport {\n  type BaseCommentsConfig,\n  BaseCommentsPlugin,\n} from './BaseCommentsPlugin';\nimport { removeCommentMark } from './transforms/removeCommentMark';\nimport { getCommentCount } from './utils';\n\nexport const withComments: ExtendEditor<BaseCommentsConfig> = ({ editor }) => {\n  const { insertBreak, normalizeNode } = editor;\n\n  editor.insertBreak = () => {\n    removeCommentMark(editor);\n\n    insertBreak();\n  };\n\n  editor.normalizeNode = (entry) => {\n    const [node, path] = entry;\n\n    // Unset CommentsPlugin.key prop when there is no comments\n    if (node[BaseCommentsPlugin.key] && getCommentCount(node as any) < 1) {\n      unsetNodes(editor, BaseCommentsPlugin.key, { at: path });\n\n      return;\n    }\n\n    normalizeNode(entry);\n  };\n\n  return editor;\n};\n","import { type SlateEditor, withoutNormalizing } from '@udecode/plate-common';\n\nimport { BaseCommentsPlugin } from '../BaseCommentsPlugin';\nimport { findCommentNode } from '../queries/index';\nimport { getCommentKeys } from '../utils';\n\nexport const removeCommentMark = (editor: SlateEditor) => {\n  const nodeEntry = findCommentNode(editor);\n\n  if (!nodeEntry) return;\n\n  const keys = getCommentKeys(nodeEntry[0]);\n\n  withoutNormalizing(editor, () => {\n    keys.forEach((key) => {\n      editor.removeMark(key);\n    });\n\n    editor.removeMark(BaseCommentsPlugin.key);\n  });\n};\n","import {\n  type FindNodeOptions,\n  type SlateEditor,\n  findNode,\n} from '@udecode/plate-common';\n\nimport type { TCommentText } from '../types';\n\nimport { BaseCommentsPlugin } from '../BaseCommentsPlugin';\n\nexport const findCommentNode = (\n  editor: SlateEditor,\n  options?: FindNodeOptions\n) => {\n  return findNode<TCommentText>(editor, {\n    match: (n) => n[BaseCommentsPlugin.key],\n    ...options,\n  });\n};\n","import { type SlateEditor, findNode } from '@udecode/plate-common';\n\nimport type { TCommentText } from '../types';\n\nimport { getCommentKey } from '../utils';\n\nexport const findCommentNodeById = (editor: SlateEditor, id: string) => {\n  return findNode<TCommentText>(editor, {\n    at: [],\n    match: (n) => n[getCommentKey(id)],\n  });\n};\n","import { BaseCommentsPlugin } from '../BaseCommentsPlugin';\n\nexport const isCommentKey = (key: string) =>\n  key.startsWith(`${BaseCommentsPlugin.key}_`);\n","import type { TCommentText } from '../types';\n\nimport { isCommentKey } from './isCommentKey';\n\nexport const getCommentCount = (node: TCommentText) => {\n  let commentCount = 0;\n  Object.keys(node).forEach((key) => {\n    if (isCommentKey(key)) commentCount++;\n  });\n\n  return commentCount;\n};\n","import { BaseCommentsPlugin } from '../BaseCommentsPlugin';\n\nexport const getCommentKey = (id: string) => `${BaseCommentsPlugin.key}_${id}`;\n","import { BaseCommentsPlugin } from '../BaseCommentsPlugin';\n\nexport const getCommentKeyId = (key: string) =>\n  key.replace(`${BaseCommentsPlugin.key}_`, '');\n","import type { TCommentText } from '../types';\n\nimport { isCommentKey } from './isCommentKey';\n\nexport const getCommentKeys = (node: TCommentText) => {\n  const keys: string[] = [];\n\n  Object.keys(node).forEach((key) => {\n    if (isCommentKey(key)) keys.push(key);\n  });\n\n  return keys;\n};\n","export const getCommentUrl = (commentId: string) => {\n  const url = new URL(window.location.href);\n  url.searchParams.set('comment', commentId);\n\n  return url.toString();\n};\n","export const getElementAbsolutePosition = (element: HTMLElement) => {\n  let left = 0;\n  let top = 0;\n  let currentElement: HTMLElement | null = element;\n\n  do {\n    left += (currentElement.offsetLeft || 0) - currentElement.scrollLeft;\n    top += (currentElement.offsetTop || 0) - currentElement.scrollTop;\n    currentElement = currentElement.offsetParent as HTMLElement;\n  } while (currentElement);\n\n  return {\n    left,\n    top,\n  };\n};\n","import type { TNode } from '@udecode/plate-common';\n\nimport { getCommentKey } from './getCommentKey';\n\n/** Whether the node has a comment id. */\nexport const isCommentNodeById = (node: TNode, id: string) =>\n  !!node[getCommentKey(id)];\n","import type { TNode } from '@udecode/plate-common';\n\nimport type { TCommentText } from '../types';\n\nimport { BaseCommentsPlugin } from '../BaseCommentsPlugin';\n\nexport const isCommentText = (node: TNode): node is TCommentText => {\n  return !!node[BaseCommentsPlugin.key];\n};\n","import { type SlateEditor, unsetNodes } from '@udecode/plate-common';\n\nimport type { TCommentText } from '../types';\n\nimport { getCommentKey } from './getCommentKey';\nimport { isCommentNodeById } from './isCommentNodeById';\n\nexport const unsetCommentNodesById = (\n  editor: SlateEditor,\n  { id }: { id: string }\n) => {\n  unsetNodes<TCommentText>(editor, getCommentKey(id), {\n    at: [],\n    match: (n) => isCommentNodeById(n, id),\n  });\n};\n","import { type SlateEditor, getNodeEntries } from '@udecode/plate-common';\n\nimport type { TCommentText } from '../types';\n\nimport { isCommentText } from '../utils';\n\nexport const getCommentNodeEntries = (editor: SlateEditor) => {\n  return [\n    ...getNodeEntries<TCommentText>(editor, {\n      at: [],\n      match: (n) => isCommentText(n),\n    }),\n  ];\n};\n","import { type SlateEditor, getNodeEntries } from '@udecode/plate-common';\n\nimport { isCommentNodeById } from '../utils';\n\nexport const getCommentNodesById = (editor: SlateEditor, id: string) => {\n  return Array.from(\n    getNodeEntries(editor, {\n      at: [],\n      match: (n) => isCommentNodeById(n, id),\n    })\n  );\n};\n"],"mappings":"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","names":["unsetNodes","findNode","findNode","getNodeEntries","getNodeEntries","unsetNodes"]}
{"version":3,"sources":["../../src/react/index.ts","../../src/react/CommentsPlugin.tsx","../../src/lib/BaseCommentsPlugin.ts","../../src/lib/withComments.ts","../../src/lib/transforms/removeCommentMark.ts","../../src/lib/queries/findCommentNode.ts","../../src/lib/queries/findCommentNodeById.ts","../../src/lib/utils/isCommentKey.ts","../../src/lib/utils/getCommentCount.ts","../../src/lib/utils/getCommentKey.ts","../../src/lib/utils/getCommentKeyId.ts","../../src/lib/utils/getCommentKeys.ts","../../src/lib/utils/getElementAbsolutePosition.tsx","../../src/lib/utils/isCommentNodeById.ts","../../src/lib/utils/unsetCommentNodesById.ts","../../src/react/transforms/insertComment.ts","../../src/react/useHooksComments.ts","../../src/react/components/CommentDeleteButton.tsx","../../src/react/stores/comment/CommentProvider.tsx","../../src/react/components/CommentEditCancelButton.tsx","../../src/react/components/CommentEditSaveButton.tsx","../../src/react/components/CommentEditActions.tsx","../../src/react/components/CommentEditButton.tsx","../../src/react/components/CommentEditTextarea.tsx","../../src/react/components/CommentNewSubmitButton.tsx","../../src/react/components/CommentNewTextarea.tsx","../../src/react/components/CommentResolveButton.tsx","../../src/react/components/CommentUserName.tsx","../../src/react/components/CommentsPositioner.tsx","../../src/react/queries/getCommentPosition.ts","../../src/react/stores/comments/useActiveCommentNode.ts","../../src/react/components/useCommentAddButton.ts","../../src/react/components/useCommentItemContent.ts","../../src/react/stores/comments/useCommentsResolved.ts","../../src/react/components/useCommentLeaf.ts","../../src/react/components/useCommentsShowResolvedButton.ts","../../src/react/components/useFloatingCommentsContentState.ts","../../src/react/components/useFloatingCommentsState.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './CommentsPlugin';\nexport * from './useHooksComments';\nexport * from './components/index';\nexport * from './queries/index';\nexport * from './stores/index';\nexport * from './transforms/index';\n","import {\n  type ExtendConfig,\n  type OmitFirst,\n  bindFirst,\n} from '@udecode/plate-common';\nimport { Key, toPlatePlugin } from '@udecode/plate-common/react';\n\nimport {\n  type BaseCommentsConfig,\n  BaseCommentsPlugin,\n} from '../lib/BaseCommentsPlugin';\nimport { insertComment } from './transforms';\nimport { useHooksComments } from './useHooksComments';\n\nexport type CommentsConfig = ExtendConfig<\n  BaseCommentsConfig,\n  {},\n  {},\n  {\n    insert: {\n      comment: OmitFirst<typeof insertComment>;\n    };\n  }\n>;\n\n/** Enables support for comments in the editor. */\nexport const CommentsPlugin = toPlatePlugin(BaseCommentsPlugin, {\n  shortcuts: {\n    toggleComment: {\n      keys: [[Key.Mod, Key.Shift, 'm']],\n    },\n  },\n  useHooks: useHooksComments,\n}).extendEditorTransforms(({ editor }) => ({\n  insert: { comment: bindFirst(insertComment, editor) },\n}));\n","import {\n  type PluginConfig,\n  type Value,\n  type WithPartial,\n  createTSlatePlugin,\n  getNodeString,\n  nanoid,\n} from '@udecode/plate-common';\n\nimport type { CommentUser, TComment } from './types';\n\nimport { withComments } from './withComments';\n\nexport type BaseCommentsConfig = PluginConfig<\n  'comment',\n  {\n    activeCommentId: string | null;\n    addingCommentId: string | null;\n    comments: Record<string, TComment>;\n    focusTextarea: boolean;\n    myUserId: string | null;\n    newValue: Value;\n    users: Record<string, CommentUser>;\n    onCommentAdd: ((value: WithPartial<TComment, 'userId'>) => void) | null;\n    onCommentDelete: ((id: string) => void) | null;\n    onCommentUpdate:\n      | ((value: Partial<Omit<TComment, 'id'>> & Pick<TComment, 'id'>) => void)\n      | null;\n  } & CommentsSelectors,\n  {\n    comment: CommentsApi;\n  }\n>;\n\nexport type CommentsSelectors = {\n  activeComment?: () => TComment | null;\n  commentById?: (id: string | null) => TComment | null;\n  myUser?: () => CommentUser | null;\n  newText?: () => string;\n  userById?: (id: string | null) => CommentUser | null;\n};\n\nexport type CommentsApi = {\n  addComment: (\n    value: WithPartial<TComment, 'createdAt' | 'id' | 'userId'>\n  ) => WithPartial<TComment, 'userId'>;\n  addRawComment: (id: string) => void;\n  removeComment: (id: string | null) => void;\n  resetNewCommentValue: () => void;\n  updateComment: (id: string | null, value: Partial<TComment>) => void;\n};\n\nexport const BaseCommentsPlugin = createTSlatePlugin<BaseCommentsConfig>({\n  key: 'comment',\n  extendEditor: withComments,\n  node: { isLeaf: true },\n  options: {\n    activeCommentId: null,\n    addingCommentId: null,\n    comments: {},\n    focusTextarea: false,\n    myUserId: null,\n    newValue: [{ children: [{ text: '' }], type: 'p' }],\n    users: {},\n    onCommentAdd: null,\n    onCommentDelete: null,\n    onCommentUpdate: null,\n  },\n})\n  .extendOptions<Partial<CommentsSelectors>>(({ getOptions }) => ({\n    activeComment: () => {\n      const { activeCommentId, comments } = getOptions();\n\n      return activeCommentId ? comments[activeCommentId] : null;\n    },\n    commentById: (id) => {\n      if (!id) return null;\n\n      return getOptions().comments[id];\n    },\n    myUser: () => {\n      const { myUserId, users } = getOptions();\n\n      if (!myUserId) return null;\n\n      return users[myUserId];\n    },\n    newText: () => {\n      const { newValue } = getOptions();\n\n      return getNodeString(newValue?.[0]);\n    },\n    userById: (id) => {\n      if (!id) return null;\n\n      return getOptions().users[id];\n    },\n  }))\n  .extendApi<Partial<CommentsApi>>(({ getOptions, setOptions }) => ({\n    addComment: (value) => {\n      const { myUserId } = getOptions();\n      const id = value.id ?? nanoid();\n      const newComment: WithPartial<TComment, 'userId'> = {\n        id,\n        createdAt: Date.now(),\n        userId: myUserId ?? undefined,\n        ...value,\n      };\n\n      if (newComment.userId) {\n        setOptions((draft) => {\n          draft.comments[id] = newComment as TComment;\n        });\n      }\n\n      return newComment;\n    },\n    addRawComment: (id) => {\n      const { myUserId } = getOptions();\n\n      if (!myUserId) return;\n\n      setOptions((draft) => {\n        draft.comments[id] = {\n          id,\n          userId: myUserId,\n        } as TComment;\n      });\n    },\n    removeComment: (id) => {\n      if (!id) return;\n\n      setOptions((draft) => {\n        delete draft.comments[id];\n      });\n    },\n    resetNewCommentValue: () => {\n      setOptions({ newValue: [{ children: [{ text: '' }], type: 'p' }] });\n    },\n    updateComment: (id, value) => {\n      if (!id) return;\n\n      setOptions((draft) => {\n        draft.comments[id] = { ...draft.comments[id], ...value };\n      });\n    },\n  }));\n","import { type ExtendEditor, unsetNodes } from '@udecode/plate-common';\n\nimport {\n  type BaseCommentsConfig,\n  BaseCommentsPlugin,\n} from './BaseCommentsPlugin';\nimport { removeCommentMark } from './transforms/removeCommentMark';\nimport { getCommentCount } from './utils';\n\nexport const withComments: ExtendEditor<BaseCommentsConfig> = ({ editor }) => {\n  const { insertBreak, normalizeNode } = editor;\n\n  editor.insertBreak = () => {\n    removeCommentMark(editor);\n\n    insertBreak();\n  };\n\n  editor.normalizeNode = (entry) => {\n    const [node, path] = entry;\n\n    // Unset CommentsPlugin.key prop when there is no comments\n    if (node[BaseCommentsPlugin.key] && getCommentCount(node as any) < 1) {\n      unsetNodes(editor, BaseCommentsPlugin.key, { at: path });\n\n      return;\n    }\n\n    normalizeNode(entry);\n  };\n\n  return editor;\n};\n","import { type SlateEditor, withoutNormalizing } from '@udecode/plate-common';\n\nimport { BaseCommentsPlugin } from '../BaseCommentsPlugin';\nimport { findCommentNode } from '../queries/index';\nimport { getCommentKeys } from '../utils';\n\nexport const removeCommentMark = (editor: SlateEditor) => {\n  const nodeEntry = findCommentNode(editor);\n\n  if (!nodeEntry) return;\n\n  const keys = getCommentKeys(nodeEntry[0]);\n\n  withoutNormalizing(editor, () => {\n    keys.forEach((key) => {\n      editor.removeMark(key);\n    });\n\n    editor.removeMark(BaseCommentsPlugin.key);\n  });\n};\n","import {\n  type FindNodeOptions,\n  type SlateEditor,\n  findNode,\n} from '@udecode/plate-common';\n\nimport type { TCommentText } from '../types';\n\nimport { BaseCommentsPlugin } from '../BaseCommentsPlugin';\n\nexport const findCommentNode = (\n  editor: SlateEditor,\n  options?: FindNodeOptions\n) => {\n  return findNode<TCommentText>(editor, {\n    match: (n) => n[BaseCommentsPlugin.key],\n    ...options,\n  });\n};\n","import { type SlateEditor, findNode } from '@udecode/plate-common';\n\nimport type { TCommentText } from '../types';\n\nimport { getCommentKey } from '../utils';\n\nexport const findCommentNodeById = (editor: SlateEditor, id: string) => {\n  return findNode<TCommentText>(editor, {\n    at: [],\n    match: (n) => n[getCommentKey(id)],\n  });\n};\n","import { BaseCommentsPlugin } from '../BaseCommentsPlugin';\n\nexport const isCommentKey = (key: string) =>\n  key.startsWith(`${BaseCommentsPlugin.key}_`);\n","import type { TCommentText } from '../types';\n\nimport { isCommentKey } from './isCommentKey';\n\nexport const getCommentCount = (node: TCommentText) => {\n  let commentCount = 0;\n  Object.keys(node).forEach((key) => {\n    if (isCommentKey(key)) commentCount++;\n  });\n\n  return commentCount;\n};\n","import { BaseCommentsPlugin } from '../BaseCommentsPlugin';\n\nexport const getCommentKey = (id: string) => `${BaseCommentsPlugin.key}_${id}`;\n","import { BaseCommentsPlugin } from '../BaseCommentsPlugin';\n\nexport const getCommentKeyId = (key: string) =>\n  key.replace(`${BaseCommentsPlugin.key}_`, '');\n","import type { TCommentText } from '../types';\n\nimport { isCommentKey } from './isCommentKey';\n\nexport const getCommentKeys = (node: TCommentText) => {\n  const keys: string[] = [];\n\n  Object.keys(node).forEach((key) => {\n    if (isCommentKey(key)) keys.push(key);\n  });\n\n  return keys;\n};\n","export const getElementAbsolutePosition = (element: HTMLElement) => {\n  let left = 0;\n  let top = 0;\n  let currentElement: HTMLElement | null = element;\n\n  do {\n    left += (currentElement.offsetLeft || 0) - currentElement.scrollLeft;\n    top += (currentElement.offsetTop || 0) - currentElement.scrollTop;\n    currentElement = currentElement.offsetParent as HTMLElement;\n  } while (currentElement);\n\n  return {\n    left,\n    top,\n  };\n};\n","import type { TNode } from '@udecode/plate-common';\n\nimport { getCommentKey } from './getCommentKey';\n\n/** Whether the node has a comment id. */\nexport const isCommentNodeById = (node: TNode, id: string) =>\n  !!node[getCommentKey(id)];\n","import { type SlateEditor, unsetNodes } from '@udecode/plate-common';\n\nimport type { TCommentText } from '../types';\n\nimport { getCommentKey } from './getCommentKey';\nimport { isCommentNodeById } from './isCommentNodeById';\n\nexport const unsetCommentNodesById = (\n  editor: SlateEditor,\n  { id }: { id: string }\n) => {\n  unsetNodes<TCommentText>(editor, getCommentKey(id), {\n    at: [],\n    match: (n) => isCommentNodeById(n, id),\n  });\n};\n","import {\n  type SlateEditor,\n  isExpanded,\n  isText,\n  nanoid,\n  setNodes,\n} from '@udecode/plate-common';\nimport { deselectEditor } from '@udecode/plate-common/react';\n\nimport { BaseCommentsPlugin, getCommentKey } from '../../lib';\n\nexport const insertComment = (editor: SlateEditor) => {\n  const { selection } = editor;\n\n  if (!isExpanded(selection)) return;\n\n  const id = nanoid();\n\n  // add comment prop to inline elements\n  // const entries = getNodes(editor, {\n  //   // TODO\n  // });\n  //\n  // Array.from(entries).forEach(([, path]) => {\n  //   setNodes(\n  //     editor,\n  //     {\n  //       [key]: comment,\n  //     },\n  //     { at: path }\n  //   );\n  // });\n\n  setNodes(\n    editor,\n    { [BaseCommentsPlugin.key]: true, [getCommentKey(id)]: true },\n    { match: isText, split: true }\n  );\n\n  try {\n    deselectEditor(editor);\n  } catch {}\n\n  setTimeout(() => {\n    editor.setOption(BaseCommentsPlugin, 'activeCommentId', id);\n  }, 0);\n};\n","import { isExpanded } from '@udecode/plate-common';\nimport { type UseHooks, useHotkeys } from '@udecode/plate-common/react';\n\nimport type { CommentsConfig } from './CommentsPlugin';\n\nexport const useHooksComments: UseHooks<CommentsConfig> = ({\n  editor,\n  setOption,\n  tf,\n}) => {\n  useHotkeys(\n    editor.shortcuts.toggleComment!.keys!,\n    (e) => {\n      if (!editor.selection) return;\n\n      e.preventDefault();\n\n      // block comments\n\n      if (!isExpanded(editor.selection)) return;\n\n      tf.insert.comment();\n      setOption('focusTextarea', true);\n    },\n    {\n      enableOnContentEditable: true,\n    }\n  );\n};\n","import {\n  createPrimitiveComponent,\n  useEditorPlugin,\n} from '@udecode/plate-common/react';\n\nimport { type BaseCommentsConfig, unsetCommentNodesById } from '../../lib';\nimport { CommentsPlugin } from '../CommentsPlugin';\nimport { useCommentSelectors } from '../stores/comment/CommentProvider';\n\nexport const useCommentDeleteButtonState = () => {\n  const { api, editor, setOption, useOption } = useEditorPlugin(CommentsPlugin);\n\n  const activeCommentId = useOption('activeCommentId');\n  const onCommentDelete = useOption(\n    'onCommentDelete'\n  ) as BaseCommentsConfig['options']['onCommentDelete'];\n  const id = useCommentSelectors().id();\n\n  return {\n    id,\n    activeCommentId,\n    api,\n    editor,\n    setOption,\n    onCommentDelete,\n  };\n};\n\nexport const useCommentDeleteButton = ({\n  id,\n  activeCommentId,\n  api,\n  editor,\n  setOption,\n  onCommentDelete,\n}: ReturnType<typeof useCommentDeleteButtonState>) => {\n  return {\n    props: {\n      onClick: () => {\n        if (activeCommentId === id) {\n          unsetCommentNodesById(editor, { id });\n          setOption('activeCommentId', null);\n        } else {\n          api.comment.removeComment(id);\n        }\n\n        onCommentDelete?.(id);\n      },\n    },\n  };\n};\n\nexport const CommentDeleteButton = createPrimitiveComponent('button')({\n  propsHook: useCommentDeleteButton,\n  stateHook: useCommentDeleteButtonState,\n});\n","import { type Value, getNodeString } from '@udecode/plate-common';\nimport { createAtomStore, useEditorPlugin } from '@udecode/plate-common/react';\n\nimport type { CommentUser, TComment } from '../../../lib/types';\n\nimport { CommentsPlugin } from '../../CommentsPlugin';\n\nexport const SCOPE_ACTIVE_COMMENT = 'activeComment';\n\nexport interface CommentStoreState {\n  id: string;\n  editingValue: Value | null;\n  isMenuOpen: boolean;\n}\n\nexport const { CommentProvider, commentStore, useCommentStore } =\n  createAtomStore(\n    {\n      id: '',\n      editingValue: null,\n      isMenuOpen: false,\n    } as CommentStoreState,\n    {\n      name: 'comment',\n    }\n  );\n\nexport const useCommentStates = () => useCommentStore().use;\n\nexport const useCommentSelectors = () => useCommentStore().get;\n\nexport const useCommentActions = () => useCommentStore().set;\n\nexport const useCommentUser = (scope?: string): CommentUser | null => {\n  const { useOption } = useEditorPlugin(CommentsPlugin);\n\n  const commentId = useCommentSelectors().id(scope);\n  const comment = useOption('commentById', commentId);\n  const users = useOption('users');\n\n  if (!comment) return null;\n\n  return users[comment.userId];\n};\n\nexport const useCommentReplies = (scope?: string) => {\n  const { useOption } = useEditorPlugin(CommentsPlugin);\n\n  const commentId = useCommentSelectors().id(scope);\n  const comments = useOption('comments');\n\n  const replies: Record<string, TComment> = {};\n\n  Object.keys(comments).forEach((id) => {\n    const comment = comments[id];\n\n    if (!comment) return null;\n    if (comment.parentId === commentId) {\n      replies[id] = comment;\n    }\n  });\n\n  return replies;\n};\n\nexport const useComment = (scope?: string) => {\n  const { useOption } = useEditorPlugin(CommentsPlugin);\n\n  const commentId = useCommentSelectors().id(scope);\n\n  return useOption('commentById', commentId);\n};\n\nexport const useCommentText = (scope?: string) => {\n  const comment = useComment(scope);\n\n  if (!comment) return null;\n\n  return getNodeString(comment.value?.[0]);\n};\n\nexport const useEditingCommentText = () => {\n  const editingValue = useCommentSelectors().editingValue();\n\n  if (!editingValue) return null;\n\n  return getNodeString(editingValue?.[0]);\n};\n","import { createPrimitiveComponent } from '@udecode/plate-common/react';\n\nimport { useCommentActions } from '../stores/comment/CommentProvider';\n\nexport const useCommentEditCancelButton = () => {\n  const setEditingValue = useCommentActions().editingValue();\n\n  return {\n    props: {\n      onClick: () => {\n        setEditingValue(null);\n      },\n    },\n  };\n};\n\nexport const CommentEditCancelButton = createPrimitiveComponent('button')({\n  propsHook: useCommentEditCancelButton,\n});\n","import React from 'react';\n\nimport {\n  createPrimitiveComponent,\n  useEditorPlugin,\n} from '@udecode/plate-common/react';\n\nimport { CommentsPlugin } from '../CommentsPlugin';\nimport {\n  useCommentActions,\n  useCommentSelectors,\n  useCommentText,\n} from '../stores/comment/CommentProvider';\n\nexport const useCommentEditSaveButtonState = () => {\n  const { api, getOptions, setOption } = useEditorPlugin(CommentsPlugin);\n\n  const id = useCommentSelectors().id();\n  const editingValue = useCommentSelectors().editingValue();\n  const setEditingValue = useCommentActions().editingValue();\n  const value = useCommentText();\n\n  return {\n    id,\n    api,\n    editingValue,\n    getOptions,\n    setEditingValue,\n    setOption,\n    value,\n  };\n};\n\nexport const useCommentEditSaveButton = ({\n  id,\n  api,\n  editingValue,\n  getOptions,\n  setEditingValue,\n  value,\n}: ReturnType<typeof useCommentEditSaveButtonState>) => {\n  return {\n    props: {\n      disabled: value?.trim().length === 0,\n      onClick: React.useCallback(() => {\n        if (!editingValue) return;\n\n        api.comment.updateComment(id, {\n          value: editingValue,\n        });\n\n        setEditingValue(null);\n\n        getOptions().onCommentUpdate?.({ id, value: editingValue });\n      }, [api.comment, editingValue, getOptions, id, setEditingValue]),\n    },\n  };\n};\n\nexport const CommentEditSaveButton = createPrimitiveComponent('button')({\n  propsHook: useCommentEditSaveButton,\n  stateHook: useCommentEditSaveButtonState,\n});\n","import { CommentEditCancelButton } from './CommentEditCancelButton';\nimport { CommentEditSaveButton } from './CommentEditSaveButton';\n\nexport const CommentEditActions = {\n  CancelButton: CommentEditCancelButton,\n  SaveButton: CommentEditSaveButton,\n};\n","import { createPrimitiveComponent } from '@udecode/plate-common/react';\n\nimport {\n  useComment,\n  useCommentActions,\n} from '../stores/comment/CommentProvider';\n\nexport const useCommentEditButtonState = () => {\n  const setIsMenuOpen = useCommentActions().isMenuOpen();\n  const comment = useComment()!;\n  const editingValue = useCommentActions().editingValue();\n\n  return {\n    comment,\n    editingValue,\n    setIsMenuOpen,\n  };\n};\n\nexport const useCommentEditButton = ({\n  comment,\n  editingValue,\n  setIsMenuOpen,\n}: ReturnType<typeof useCommentEditButtonState>) => {\n  return {\n    props: {\n      onClick: () => {\n        setIsMenuOpen(false);\n        editingValue(comment.value);\n      },\n    },\n  };\n};\n\nexport const CommentEditButton = createPrimitiveComponent('button')({\n  propsHook: useCommentEditButton,\n  stateHook: useCommentEditButtonState,\n});\n","import React from 'react';\n\nimport { createPrimitiveComponent } from '@udecode/plate-common/react';\n\nimport {\n  useCommentActions,\n  useEditingCommentText,\n} from '../stores/comment/CommentProvider';\n\nexport const useCommentEditTextareaState = () => {\n  const setEditingValue = useCommentActions().editingValue();\n  const value = useEditingCommentText();\n\n  const textareaRef = React.useRef<HTMLTextAreaElement | null>(null);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      const textarea = textareaRef.current;\n\n      if (textarea) {\n        textarea.focus();\n      }\n    }, 0);\n  }, [textareaRef]);\n\n  return {\n    setEditingValue,\n    textareaRef,\n    value,\n  };\n};\n\nexport const useCommentEditTextarea = ({\n  setEditingValue,\n  textareaRef,\n  value,\n}: ReturnType<typeof useCommentEditTextareaState>) => {\n  return {\n    props: {\n      placeholder: 'Add a comment...',\n      ref: textareaRef,\n      rows: 1,\n      value: value ?? undefined,\n      onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setEditingValue([\n          { children: [{ text: event.target.value }], type: 'p' },\n        ]);\n      },\n    },\n  };\n};\n\nexport const CommentEditTextarea = createPrimitiveComponent('textarea')({\n  propsHook: useCommentEditTextarea,\n  stateHook: useCommentEditTextareaState,\n});\n","import { nanoid } from '@udecode/plate-common';\nimport {\n  createPrimitiveComponent,\n  useEditorPlugin,\n} from '@udecode/plate-common/react';\n\nimport { CommentsPlugin } from '../CommentsPlugin';\nimport {\n  SCOPE_ACTIVE_COMMENT,\n  useComment,\n} from '../stores/comment/CommentProvider';\n\nexport const useCommentNewSubmitButtonState = () => {\n  const { api, getOptions, useOption } = useEditorPlugin(CommentsPlugin);\n  const newText = useOption('newText');\n\n  const comment = useComment(SCOPE_ACTIVE_COMMENT)!;\n\n  const isReplyComment = !!comment;\n\n  const submitButtonText = isReplyComment ? 'Reply' : 'Comment';\n\n  return {\n    api,\n    comment,\n    getOptions,\n    isReplyComment,\n    newText,\n    submitButtonText,\n  };\n};\n\nexport const useCommentNewSubmitButton = ({\n  api,\n  comment,\n  getOptions,\n  isReplyComment,\n  newText,\n  submitButtonText,\n}: ReturnType<typeof useCommentNewSubmitButtonState>) => {\n  return {\n    props: {\n      children: submitButtonText,\n      disabled: !newText?.trim().length,\n      type: 'submit',\n      onClick: () => {\n        const { activeCommentId, newValue, onCommentAdd } = getOptions();\n\n        const newComment = api.comment.addComment(\n          isReplyComment\n            ? {\n                id: nanoid(),\n                parentId: comment.id,\n                value: newValue,\n              }\n            : {\n                id: activeCommentId!,\n                value: newValue,\n              }\n        );\n\n        onCommentAdd?.(newComment);\n\n        api.comment.resetNewCommentValue();\n      },\n    },\n  };\n};\n\nexport const CommentNewSubmitButton = createPrimitiveComponent('button')({\n  propsHook: useCommentNewSubmitButton,\n  stateHook: useCommentNewSubmitButtonState,\n});\n","import React from 'react';\n\nimport {\n  createPrimitiveComponent,\n  useEditorPlugin,\n} from '@udecode/plate-common/react';\n\nimport { CommentsPlugin } from '../CommentsPlugin';\n\nexport const useCommentNewTextareaState = () => {\n  const { setOption, useOption } = useEditorPlugin(CommentsPlugin);\n\n  const activeComment = useOption('activeComment');\n  const value = useOption('newText');\n  const focusTextarea = useOption('focusTextarea');\n\n  const textareaRef = React.useRef<HTMLTextAreaElement | null>(null);\n\n  React.useEffect(() => {\n    if (focusTextarea) {\n      textareaRef.current?.focus();\n      setOption('focusTextarea', false);\n    }\n  }, [focusTextarea, setOption, textareaRef]);\n\n  const placeholder = `${activeComment ? 'Reply...' : 'Add a comment...'}`;\n\n  return {\n    placeholder,\n    setOption,\n    textareaRef,\n    value,\n  };\n};\n\nexport const useCommentNewTextarea = ({\n  placeholder,\n  setOption,\n  textareaRef,\n  value,\n}: ReturnType<typeof useCommentNewTextareaState>) => {\n  return {\n    props: {\n      placeholder,\n      ref: textareaRef,\n      rows: 1,\n      value: value ?? undefined,\n      onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setOption('newValue', [\n          { children: [{ text: event.target.value }], type: 'p' },\n        ]);\n      },\n    },\n  };\n};\n\nexport const CommentNewTextarea = createPrimitiveComponent('textarea')({\n  propsHook: useCommentNewTextarea,\n  stateHook: useCommentNewTextareaState,\n});\n","import {\n  createPrimitiveComponent,\n  useEditorPlugin,\n} from '@udecode/plate-common/react';\n\nimport { CommentsPlugin } from '../CommentsPlugin';\nimport { useComment } from '../stores/comment/CommentProvider';\n\nexport const useCommentResolveButton = () => {\n  const { api, getOptions, setOption } = useEditorPlugin(CommentsPlugin);\n\n  const comment = useComment()!;\n\n  return {\n    props: {\n      onClick: () => {\n        const isResolved = !comment.isResolved;\n\n        const value = {\n          isResolved,\n        };\n\n        const { activeCommentId, onCommentUpdate } = getOptions();\n\n        api.comment.updateComment(activeCommentId, value);\n\n        onCommentUpdate?.({\n          id: activeCommentId!,\n          ...value,\n        });\n\n        if (isResolved) {\n          setOption('activeCommentId', null);\n        }\n      },\n    },\n  };\n};\n\nexport const CommentResolveButton = createPrimitiveComponent('button')({\n  propsHook: useCommentResolveButton,\n});\n","import { createPrimitiveComponent } from '@udecode/plate-common/react';\n\nimport { useCommentUser } from '../stores/comment/CommentProvider';\n\nexport const useCommentUserName = () => {\n  const user = useCommentUser();\n\n  return {\n    props: {\n      children: user?.name ?? 'Anonymous',\n    },\n  };\n};\n\nexport const CommentUserName = createPrimitiveComponent('div')({\n  propsHook: useCommentUserName,\n});\n","import React from 'react';\n\nimport {\n  createPrimitiveComponent,\n  toDOMNode,\n  useEditorPlugin,\n} from '@udecode/plate-common/react';\n\nimport { CommentsPlugin } from '../CommentsPlugin';\nimport { getCommentPosition } from '../queries';\nimport { useActiveCommentNode } from '../stores/comments/useActiveCommentNode';\n\nexport const useCommentsPositionerState = () => {\n  const { editor, useOption } = useEditorPlugin(CommentsPlugin);\n\n  let activeCommentId = useOption('activeCommentId');\n\n  const [position, setPosition] = React.useState<{ left: number; top: number }>(\n    {\n      left: 0,\n      top: 0,\n    }\n  );\n\n  if (position.left === 0 && position.top === 0) {\n    activeCommentId = null;\n  }\n\n  const [node] = useActiveCommentNode() ?? [];\n\n  React.useEffect(() => {\n    if (!node) return;\n\n    const domNode = toDOMNode(editor, node);\n\n    if (!domNode) return;\n\n    const newPosition = getCommentPosition(editor, node);\n\n    if (!newPosition) return;\n\n    setPosition(newPosition);\n  }, [editor, node]);\n\n  return {\n    activeCommentId,\n    position,\n  };\n};\n\nexport const useCommentsPositioner = ({\n  activeCommentId,\n  position,\n}: ReturnType<typeof useCommentsPositionerState>) => {\n  return {\n    hidden: !activeCommentId,\n    props: {\n      style: {\n        ...position,\n      },\n    },\n  };\n};\n\nexport const CommentsPositioner = createPrimitiveComponent('div')({\n  propsHook: useCommentsPositioner,\n  stateHook: useCommentsPositionerState,\n});\n","import type { SlateEditor } from '@udecode/plate-common';\n\nimport { toDOMNode } from '@udecode/plate-common/react';\nimport clamp from 'lodash/clamp.js';\n\nimport type { TCommentText } from '../../lib/types';\n\nimport { getElementAbsolutePosition } from '../../lib';\n\nexport const getCommentPosition = (editor: SlateEditor, node: TCommentText) => {\n  const DOMNode = toDOMNode(editor, node);\n\n  if (!DOMNode) return;\n\n  const DOMNodePosition = getElementAbsolutePosition(DOMNode);\n\n  const editorDOMNode = toDOMNode(editor, editor);\n\n  if (!editorDOMNode) return;\n\n  const { width: editorWidth, x: editorX } =\n    editorDOMNode.getBoundingClientRect();\n\n  const sidebarWidth = 418;\n  const padding = 16;\n\n  return {\n    left: clamp(\n      editorX + editorWidth + 16,\n      window.innerWidth - (sidebarWidth + padding)\n    ),\n    top: DOMNodePosition.top,\n  };\n};\n","import { useEditorPlugin } from '@udecode/plate-common/react';\n\nimport { findCommentNodeById } from '../../../lib';\nimport { CommentsPlugin } from '../../CommentsPlugin';\n\nexport const useActiveCommentNode = () => {\n  const { editor, useOption } = useEditorPlugin(CommentsPlugin);\n\n  const id = useOption('activeCommentId');\n\n  if (!id) return null;\n\n  return findCommentNodeById(editor, id);\n};\n","import React from 'react';\n\nimport { useEditorPlugin } from '@udecode/plate-common/react';\n\nimport { CommentsPlugin } from '../CommentsPlugin';\n\nexport const useCommentAddButton = () => {\n  const { setOption, tf, useOption } = useEditorPlugin(CommentsPlugin);\n\n  const myUserId = useOption('myUserId');\n\n  const onClick = React.useCallback<React.MouseEventHandler<HTMLSpanElement>>(\n    (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      tf.insert.comment();\n      setOption('focusTextarea', true);\n    },\n    [setOption, tf.insert]\n  );\n\n  return {\n    hidden: !myUserId,\n    props: { onClick },\n  };\n};\n","import { useEditorPlugin } from '@udecode/plate-common/react';\n\nimport { CommentsPlugin } from '../CommentsPlugin';\nimport {\n  useComment,\n  useCommentSelectors,\n  useCommentText,\n  useCommentUser,\n} from '../stores';\n\nexport const useCommentItemContentState = () => {\n  const { useOption } = useEditorPlugin(CommentsPlugin);\n\n  const comment = useComment()!;\n  const isReplyComment = !!comment.parentId;\n  const commentText = useCommentText();\n  const user = useCommentUser();\n  const myUserId = useOption('myUserId');\n  const editingValue = useCommentSelectors().editingValue();\n\n  const isMyComment = myUserId === comment.userId;\n\n  return {\n    comment,\n    commentText,\n    editingValue,\n    isMyComment,\n    isReplyComment,\n    myUserId,\n    user,\n  };\n};\n","import { useEditorPlugin } from '@udecode/plate-common/react';\n\nimport type { TComment } from '../../../lib/types';\n\nimport { CommentsPlugin } from '../../CommentsPlugin';\n\nexport const useCommentsResolved = () => {\n  const { useOption } = useEditorPlugin(CommentsPlugin);\n\n  const comments = useOption('comments');\n\n  const res: TComment[] = [];\n\n  Object.keys(comments).forEach((key) => {\n    const comment = comments[key];\n\n    if (comment?.isResolved) {\n      res.push(comment);\n    }\n  });\n\n  return res;\n};\n","import React from 'react';\n\nimport { useEditorPlugin } from '@udecode/plate-common/react';\n\nimport {\n  type TCommentText,\n  getCommentKeyId,\n  isCommentKey,\n  unsetCommentNodesById,\n} from '../../lib';\nimport { CommentsPlugin } from '../CommentsPlugin';\n\nexport const useCommentLeafState = ({ leaf }: { leaf: TCommentText }) => {\n  const { editor, setOption, useOption } = useEditorPlugin(CommentsPlugin);\n\n  const [commentIds, setCommentIds] = React.useState<string[]>([]);\n  const activeCommentId = useOption('activeCommentId');\n  const comments = useOption('comments');\n  const [commentCount, setCommentCount] = React.useState(1);\n  const [isActive, setIsActive] = React.useState(false);\n\n  React.useEffect(() => {\n    const ids: string[] = [];\n    let count = 0;\n\n    let _isActive = false;\n\n    Object.keys(leaf).forEach((key) => {\n      if (!isCommentKey(key)) return;\n\n      const id = getCommentKeyId(key);\n\n      if (comments[id]?.isResolved) return;\n      if (id === activeCommentId) {\n        _isActive = true;\n        setIsActive(true);\n      }\n\n      ids.push(getCommentKeyId(key));\n      count++;\n    });\n\n    if (!_isActive && isActive) {\n      setIsActive(false);\n\n      // Remove comment nodes for unsubmitted comments\n      ids.forEach((id) => {\n        if (!comments[id]) {\n          unsetCommentNodesById(editor, { id });\n        }\n      });\n    }\n\n    setCommentCount(count);\n    setCommentIds(ids);\n  }, [editor, activeCommentId, comments, isActive, leaf]);\n\n  const lastCommentId = commentIds.at(-1)!;\n\n  return {\n    commentCount,\n    isActive,\n    lastCommentId,\n    setOption,\n  };\n};\n\nexport const useCommentLeaf = ({\n  lastCommentId,\n  setOption,\n}: ReturnType<typeof useCommentLeafState>) => {\n  return {\n    props: {\n      onClick: React.useCallback(\n        (e: MouseEvent) => {\n          e.stopPropagation();\n          setOption('activeCommentId', lastCommentId);\n        },\n        [lastCommentId, setOption]\n      ),\n    },\n  };\n};\n","import React from 'react';\n\nexport const useCommentsShowResolvedButton = () => {\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(\n    null\n  );\n  const isActive = Boolean(anchorEl);\n\n  return {\n    props: {\n      pressed: isActive,\n      onClick: (e: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(e.currentTarget);\n      },\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n      },\n    },\n  };\n};\n","import React from 'react';\n\nimport { useEditorPlugin } from '@udecode/plate-common/react';\n\nimport { CommentsPlugin } from '../CommentsPlugin';\n\nexport const useFloatingCommentsContentState = () => {\n  const { useOption } = useEditorPlugin(CommentsPlugin);\n\n  const activeCommentId = useOption('activeCommentId');\n  const activeComment = useOption('activeComment');\n  const myUserId = useOption('myUserId');\n\n  const ref = React.useRef(null);\n\n  return {\n    activeCommentId,\n    hasNoComment: !activeComment,\n    myUserId,\n    ref,\n  };\n};\n","import React from 'react';\n\nimport { someNode } from '@udecode/plate-common';\nimport { useEditorPlugin, useEditorVersion } from '@udecode/plate-common/react';\n\nimport { BaseCommentsPlugin } from '../../lib/BaseCommentsPlugin';\n\nexport const useFloatingCommentsState = () => {\n  const { api, editor, setOption, useOption } =\n    useEditorPlugin(BaseCommentsPlugin);\n  const version = useEditorVersion();\n\n  const activeCommentId = useOption('activeCommentId');\n\n  const [loaded, setLoaded] = React.useState(false);\n  const [active, setActive] = React.useState(false);\n\n  React.useEffect(() => {\n    // there is a delay between activeCommentId and someNode, so we sync in `active`\n    if (\n      activeCommentId &&\n      someNode(editor, {\n        match: (n) => n[BaseCommentsPlugin.key],\n      })\n    ) {\n      setActive(true);\n    }\n    if (!someNode(editor, { match: (n) => n[BaseCommentsPlugin.key] })) {\n      setOption('activeCommentId', null);\n      setActive(false);\n    }\n  }, [active, activeCommentId, editor, setOption, version]);\n\n  React.useEffect(() => {\n    setLoaded(true);\n  }, []);\n\n  // reset comment editing value when active comment id changes\n  React.useEffect(() => {\n    if (activeCommentId) {\n      api.comment.resetNewCommentValue();\n    }\n  }, [activeCommentId, api.comment]);\n\n  return {\n    activeCommentId,\n    loaded,\n  };\n};\n"],"mappings":"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","names":["import_plate_common","import_react","import_plate_common","import_plate_common","import_plate_common","import_plate_common","import_plate_common","import_plate_common","import_plate_common","import_react","import_react","import_plate_common","import_react","import_react","import_react","React","import_react","import_react","React","import_plate_common","import_react","import_react","React","import_react","import_react","import_react","import_react","clamp","import_react","React","import_react","React","import_react","import_react","import_react","React","import_react","React","import_react","React","import_react","import_plate_common","React"]}
import * as _udecode_slate_utils from '@udecode/slate-utils';
import * as slate from 'slate';
import { Range } from 'slate';
import * as _udecode_slate from '@udecode/slate';
import { Value, TDescendant, TNodeEntry, TElement, TText, TEditor, TRange, TSelection } from '@udecode/slate';
import { AnyObject, UnionToIntersection } from '@udecode/utils';
import { KeyboardEventLike } from 'is-hotkey';
import { StoreApi, SetImmerState } from 'zustand-x';

type Nullable<T> = {
    [P in keyof T]: T[P] | null;
};

/** If true, the next handlers will be skipped. */
type HandlerReturnType = boolean | void;

/** The `PlatePlugin` interface is a base interface for all plugins. */
type SlatePlugin<C extends AnyPluginConfig = PluginConfig> = BasePlugin<C> & Nullable<{
    normalizeInitialValue?: (ctx: SlatePluginContext<WithAnyKey<C>> & {
        value: Value;
    }) => Value;
    decorate?: Decorate<WithAnyKey<C>>;
    extendEditor?: ExtendEditor<WithAnyKey<C>>;
}> & SlatePluginMethods<C> & {
    inject: Nullable<{
        targetPluginToInject?: (ctx: SlatePluginContext<C> & {
            targetPlugin: string;
        }) => Partial<SlatePlugin<AnyPluginConfig>>;
        nodeProps?: InjectNodeProps<WithAnyKey<C>>;
        plugins?: Record<string, Partial<EditorPlugin<AnyPluginConfig>>>;
    }>;
    override: {
        plugins?: Record<string, Partial<EditorPlugin<AnyPluginConfig>>>;
    };
    parsers: ({
        [K in string]: {
            deserializer?: Deserializer<WithAnyKey<C>>;
            serializer?: Serializer<WithAnyKey<C>>;
        };
    } & {
        html?: never;
    }) | {
        html?: Nullable<{
            deserializer?: HtmlDeserializer<WithAnyKey<C>>;
            serializer?: HtmlSerializer<WithAnyKey<C>>;
        }>;
    };
    parser: Nullable<Parser<WithAnyKey<C>>>;
    shortcuts: {};
    handlers: Nullable<{}>;
};
type SlatePluginMethods<C extends AnyPluginConfig = PluginConfig> = {
    configure: (config: ((ctx: SlatePluginContext<C>) => SlatePluginConfig<C['key'], InferOptions<C>, InferApi<C>, InferTransforms<C>>) | SlatePluginConfig<C['key'], InferOptions<C>, InferApi<C>, InferTransforms<C>>) => SlatePlugin<C>;
    configurePlugin: <P extends AnySlatePlugin>(plugin: Partial<P>, config: ((ctx: SlatePluginContext<P>) => SlatePluginConfig<any, InferOptions<P>, InferApi<P>, InferTransforms<P>>) | SlatePluginConfig<any, InferOptions<P>, InferApi<P>, InferTransforms<P>>) => SlatePlugin<C>;
    extend: <EO = {}, EA = {}, ET = {}>(extendConfig: ((ctx: SlatePluginContext<C>) => SlatePluginConfig<C['key'], InferOptions<C>, InferApi<C>, InferTransforms<C>, EO, EA, ET>) | SlatePluginConfig<C['key'], InferOptions<C>, InferApi<C>, InferTransforms<C>, EO, EA, ET>) => SlatePlugin<PluginConfig<C['key'], EO & InferOptions<C>, EA & InferApi<C>, ET & InferTransforms<C>>>;
    extendApi: <EA extends Record<string, (...args: any[]) => any> = Record<string, never>>(extension: (ctx: SlatePluginContext<C>) => EA) => SlatePlugin<PluginConfig<C['key'], InferOptions<C>, InferApi<C> & Record<C['key'], EA>, InferTransforms<C>>>;
    extendEditorApi: <EA extends Record<string, ((...args: any[]) => any) | Record<string, (...args: any[]) => any>> = Record<string, never>>(extension: (ctx: SlatePluginContext<C>) => EA & {
        [K in keyof InferApi<C>]?: InferApi<C>[K] extends (...args: any[]) => any ? (...args: Parameters<InferApi<C>[K]>) => ReturnType<InferApi<C>[K]> : InferApi<C>[K] extends Record<string, (...args: any[]) => any> ? {
            [N in keyof InferApi<C>[K]]?: (...args: Parameters<InferApi<C>[K][N]>) => ReturnType<InferApi<C>[K][N]>;
        } : never;
    }) => SlatePlugin<PluginConfig<C['key'], InferOptions<C>, {
        [K in keyof (EA & InferApi<C>)]: (EA & InferApi<C>)[K] extends (...args: any[]) => any ? (EA & InferApi<C>)[K] : {
            [N in keyof (EA & InferApi<C>)[K]]: (EA & InferApi<C>)[K][N];
        };
    }, InferTransforms<C>>>;
    extendEditorTransforms: <ET extends Record<string, ((...args: any[]) => any) | Record<string, (...args: any[]) => any>> = Record<string, never>>(extension: (ctx: SlatePluginContext<C>) => ET & {
        [K in keyof InferTransforms<C>]?: InferTransforms<C>[K] extends (...args: any[]) => any ? (...args: Parameters<InferTransforms<C>[K]>) => ReturnType<InferTransforms<C>[K]> : InferTransforms<C>[K] extends Record<string, (...args: any[]) => any> ? {
            [N in keyof InferTransforms<C>[K]]?: (...args: Parameters<InferTransforms<C>[K][N]>) => ReturnType<InferTransforms<C>[K][N]>;
        } : never;
    }) => SlatePlugin<PluginConfig<C['key'], InferOptions<C>, InferApi<C>, {
        [K in keyof (ET & InferTransforms<C>)]: (ET & InferTransforms<C>)[K] extends (...args: any[]) => any ? (ET & InferTransforms<C>)[K] : {
            [N in keyof (ET & InferTransforms<C>)[K]]: (ET & InferTransforms<C>)[K][N];
        };
    }>>;
    extendOptions: <EO extends Record<string, (...args: any[]) => any> = Record<string, never>>(extension: (ctx: SlatePluginContext<C>) => EO) => SlatePlugin<PluginConfig<C['key'], EO & InferOptions<C>, InferApi<C>, InferTransforms<C>>>;
    extendPlugin: <P extends AnySlatePlugin, EO = {}, EA = {}, ET = {}>(plugin: Partial<P>, extendConfig: ((ctx: SlatePluginContext<P>) => SlatePluginConfig<any, InferOptions<P>, InferApi<P>, InferTransforms<P>, EO, EA, ET>) | SlatePluginConfig<any, InferOptions<P>, InferApi<P>, InferTransforms<P>, EO, EA, ET>) => SlatePlugin<C>;
    extendTransforms: <ET extends Record<string, (...args: any[]) => any> = Record<string, never>>(extension: (ctx: SlatePluginContext<C>) => ET) => SlatePlugin<PluginConfig<C['key'], InferOptions<C>, InferApi<C>, InferTransforms<C> & Record<C['key'], ET>>>;
    __apiExtensions: ((ctx: SlatePluginContext<AnyPluginConfig>) => any)[];
    __configuration: ((ctx: SlatePluginContext<AnyPluginConfig>) => any) | null;
    __extensions: ((ctx: SlatePluginContext<AnyPluginConfig>) => any)[];
    __optionExtensions: ((ctx: SlatePluginContext<AnyPluginConfig>) => any)[];
    clone: () => SlatePlugin<C>;
    __resolved?: boolean;
};
type SlatePluginConfig<K extends string = any, O = {}, A = {}, T = {}, EO = {}, EA = {}, ET = {}> = Partial<Omit<SlatePlugin<PluginConfig<K, Partial<O>, A, T>>, keyof SlatePluginMethods | 'api' | 'node' | 'optionsStore' | 'transforms'> & {
    api: EA;
    node: Partial<SlatePlugin['node']>;
    options: EO;
    transforms: ET;
}>;
type AnySlatePlugin = SlatePlugin<AnyPluginConfig>;
type SlatePlugins = AnySlatePlugin[];
type EditorPlugin<C extends AnyPluginConfig = PluginConfig> = Omit<SlatePlugin<C>, keyof SlatePluginMethods | 'override' | 'plugins'>;
type AnyEditorPlugin = EditorPlugin<AnyPluginConfig>;
type InferConfig<P> = P extends SlatePlugin<infer C> ? C : never;
type SlatePluginContext<C extends AnyPluginConfig = PluginConfig> = BasePluginContext<C> & {
    editor: SlateEditor;
    plugin: EditorPlugin<C>;
};
type Parser<C extends AnyPluginConfig = PluginConfig> = {
    deserialize?: (options: ParserOptions & SlatePluginContext<C>) => TDescendant[] | undefined;
    preInsert?: (options: ParserOptions & SlatePluginContext<C> & {
        fragment: TDescendant[];
    }) => HandlerReturnType;
    transformFragment?: (options: ParserOptions & SlatePluginContext<C> & {
        fragment: TDescendant[];
    }) => TDescendant[];
    format?: string[] | string;
    mimeTypes?: string[];
    query?: (options: ParserOptions & SlatePluginContext<C>) => boolean;
    transformData?: (options: ParserOptions & SlatePluginContext<C>) => string;
};
/** Plate plugin overriding the `editor` methods. Naming convention is `with*`. */
type ExtendEditor<C extends AnyPluginConfig = PluginConfig> = (ctx: SlatePluginContext<C>) => SlateEditor;
type TransformOptions<C extends AnyPluginConfig = PluginConfig> = BaseTransformOptions & SlatePluginContext<C>;
type Deserializer<C extends AnyPluginConfig = PluginConfig> = BaseDeserializer & {
    parse?: (options: AnyObject & SlatePluginContext<C> & {
        element: any;
    }) => Partial<TDescendant> | undefined | void;
    query?: (options: AnyObject & SlatePluginContext<C> & {
        element: any;
    }) => boolean;
};
type Serializer<C extends AnyPluginConfig = PluginConfig> = BaseSerializer & {
    parse?: (options: AnyObject & SlatePluginContext<C> & {
        node: TDescendant;
    }) => any;
    query?: (options: AnyObject & SlatePluginContext<C> & {
        node: TDescendant;
    }) => boolean;
};
type HtmlDeserializer<C extends AnyPluginConfig = PluginConfig> = BaseHtmlDeserializer & {
    parse?: (options: SlatePluginContext<C> & {
        element: HTMLElement;
        node: AnyObject;
    }) => Partial<TDescendant> | undefined | void;
    query?: (options: SlatePluginContext<C> & {
        element: HTMLElement;
    }) => boolean;
};
type HtmlSerializer<C extends AnyPluginConfig = PluginConfig> = BaseSerializer & {
    parse?: (options: SlatePluginContext<C> & {
        node: TDescendant;
    }) => string;
    query?: (options: SlatePluginContext<C> & {
        node: TDescendant;
    }) => boolean;
};
/**
 * Property used by Plate to decorate editor ranges. If the function returns
 * undefined then no ranges are modified. If the function returns an array the
 * returned ranges are merged with the ranges called by other plugins.
 */
type Decorate<C extends AnyPluginConfig = PluginConfig> = (ctx: SlatePluginContext<C> & {
    entry: TNodeEntry;
}) => Range[] | undefined;
type InjectNodeProps<C extends AnyPluginConfig = PluginConfig> = BaseInjectProps & {
    query?: (options: NonNullable<NonNullable<InjectNodeProps>> & SlatePluginContext<C> & {
        nodeProps: GetInjectNodePropsOptions;
    }) => boolean;
    transformProps?: (options: TransformOptions<C> & {
        props: GetInjectNodePropsReturnType;
    }) => AnyObject | undefined;
    transformClassName?: (options: TransformOptions<C>) => any;
    transformNodeValue?: (options: TransformOptions<C>) => any;
    transformStyle?: (options: TransformOptions<C>) => CSSStyleDeclaration;
};

interface GetInjectNodePropsOptions {
    /** Existing className. */
    className?: string;
    /** Style value or className key. */
    element?: TElement;
    /** Existing style. */
    style?: CSSStyleDeclaration;
    /** Style value or className key. */
    text?: TText;
}
interface GetInjectNodePropsReturnType extends AnyObject {
    className?: string;
    style?: CSSStyleDeclaration;
}
/**
 * Return if `element`, `text`, `nodeKey` is defined. Return if `node.type` is
 * not in `targetPlugins` (if defined). Return if `value = node[nodeKey]` is not
 * in `validNodeValues` (if defined). If `classNames[value]` is defined,
 * override `className` with it. If `styleKey` is defined, override `style` with
 * `[styleKey]: value`.
 */
declare const pluginInjectNodeProps: (editor: SlateEditor, plugin: EditorPlugin, nodeProps: GetInjectNodePropsOptions) => GetInjectNodePropsReturnType | undefined;

type BasePlugin<C extends AnyPluginConfig = PluginConfig> = {
    /** Unique identifier for this plugin. */
    key: C['key'];
    inject: Nullable<{
        /**
         * Plugin keys used by {@link InjectNodeProps} and the targetPluginToInject
         * function. For plugin injection by key, use the inject.plugins property.
         *
         * @default [ParagraphPlugin.key]
         */
        targetPlugins?: string[];
    }>;
    override: {
        /** Enable or disable plugins */
        enabled?: Partial<Record<string, boolean>>;
    };
    /** API methods provided by this plugin. */
    api: InferApi<C>;
    /**
     * An array of plugin keys that this plugin depends on. These plugins will be
     * loaded before this plugin.
     */
    dependencies: string[];
    /** Node-specific configuration for this plugin. */
    node: BasePluginNode;
    /** Extended properties used by any plugin as options. */
    options: InferOptions<C>;
    /** Store for managing plugin options. */
    optionsStore: StoreApi<C['key'], C['options']>;
    /**
     * Recursive plugin support to allow having multiple plugins in a single
     * plugin. Plate eventually flattens all the plugins into the editor.
     */
    plugins: any[];
    /**
     * Defines the order in which plugins are registered and executed.
     *
     * Plugins with higher priority values are registered and executed before
     * those with lower values. This affects two main aspects:
     *
     * 1. Plugin Order: Plugins with higher priority will be added to the editor
     *    earlier.
     * 2. Execution Order: For operations that involve multiple plugins (e.g., editor
     *    methods), plugins with higher priority will be processed first.
     *
     * @default 100
     */
    priority: number;
    /** Transforms (state-modifying operations) that can be applied to the editor. */
    transforms: InferTransforms<C>;
    /**
     * Enables or disables the plugin. Used by Plate to determine if the plugin
     * should be used.
     */
    enabled?: boolean;
};
type BasePluginNode = {
    /**
     * Specifies the type identifier for this plugin's nodes.
     *
     * For elements (when {@link isElement} is `true`):
     *
     * - The {@link NodeComponent} will be used for any node where `node.type ===
     *   type`.
     *
     * For leaves/marks (when {@link isLeaf} is `true`):
     *
     * - The {@link NodeComponent} will be used for any leaf where `node[type] ===
     *   true`.
     *
     * This property is crucial for Plate to correctly match nodes to their
     * respective plugins.
     *
     * @default plugin.key
     */
    type: string;
    /**
     * Controls which (if any) attribute names in the `attributes` property of an
     * element will be passed as `nodeProps` to the {@link NodeComponent}, and
     * subsequently rendered as DOM attributes.
     *
     * WARNING: If used improperly, this property WILL make your application
     * vulnerable to cross-site scripting (XSS) or information exposure attacks.
     *
     * For example, if the `href` attribute is allowed and the component passes
     * `nodeProps` to an `<a>` element, then attackers can direct users to open a
     * document containing a malicious link element:
     *
     * { type: 'link', url: 'https://safesite.com/', attributes: { href:
     * 'javascript:alert("xss")' }, children: [{ text: 'Click me' }], }
     *
     * The same is true of the `src` attribute when passed to certain HTML
     * elements, such as `<iframe>`.
     *
     * If the `style` attribute (or another attribute that can load URLs, such as
     * `background`) is allowed, then attackers can direct users to open a
     * document that will send a HTTP request to an arbitrary URL. This can leak
     * the victim's IP address or confirm to the attacker that the victim opened
     * the document.
     *
     * Before allowing any attribute name, ensure that you thoroughly research and
     * assess any potential risks associated with it.
     *
     * @default [ ]
     */
    dangerouslyAllowAttributes?: string[];
    /**
     * Indicates if this plugin's nodes should be rendered as elements. Used by
     * Plate for {@link NodeComponent} rendering as elements.
     */
    isElement?: boolean;
    /**
     * Indicates if this plugin's elements should be treated as inline. Used by
     * the inlineVoid core plugin.
     */
    isInline?: boolean;
    /**
     * Indicates if this plugin's nodes should be rendered as leaves. Used by
     * Plate for {@link NodeComponent} rendering as leaves.
     */
    isLeaf?: boolean;
    /**
     * Indicates if this plugin's void elements should be markable. Used by the
     * inlineVoid core plugin.
     */
    isMarkableVoid?: boolean;
    /**
     * Property used by `inlineVoid` core plugin to set elements of this `type` as
     * void.
     */
    isVoid?: boolean;
};
type BaseSerializer = AnyObject;
type BaseDeserializer = AnyObject & {
    /**
     * Deserialize an element. Overrides plugin.isElement.
     *
     * @default plugin.isElement
     */
    isElement?: boolean;
    /**
     * Deserialize a leaf. Overrides plugin.isLeaf.
     *
     * @default plugin.isLeaf
     */
    isLeaf?: boolean;
};
type BaseHtmlDeserializer = BaseDeserializer & {
    rules?: {
        /**
         * Valid element style values. Can be a list of string (only one match is
         * needed).
         */
        validStyle?: Partial<Record<keyof CSSStyleDeclaration, string[] | string | undefined>>;
        /**
         * Deserialize an element:
         *
         * - If this option (string) is in the element attribute names.
         * - If this option (object) values match the element attributes.
         */
        validAttribute?: Record<string, string[] | string> | string;
        /** Valid element `className`. */
        validClassName?: string;
        /** Valid element `nodeName`. Set '*' to allow any node name. */
        validNodeName?: string[] | string;
    }[];
    /** List of HTML attribute names to store their values in `node.attributes`. */
    attributeNames?: string[];
    /** Whether or not to include deserialized children on this node */
    withoutChildren?: boolean;
};
type BaseInjectProps = {
    /**
     * Object whose keys are node values and values are classNames which will be
     * extended.
     */
    classNames?: AnyObject;
    /**
     * Default node value. The node key would be unset if the node value =
     * defaultNodeValue.
     */
    defaultNodeValue?: any;
    /** Node key to map to the styles. */
    nodeKey?: string;
    /**
     * Style key to override.
     *
     * @default nodeKey
     */
    styleKey?: keyof CSSStyleDeclaration;
    /** List of supported node values. */
    validNodeValues?: any[];
};
type BaseTransformOptions = GetInjectNodePropsOptions & {
    nodeValue?: any;
    value?: any;
};
type PluginConfig<K extends string = any, O = {}, A = {}, T = {}> = {
    key: K;
    api: A;
    options: O;
    transforms: T;
};
type ExtendConfig<C extends PluginConfig, EO = {}, EA = {}, ET = {}> = {
    key: C['key'];
    api: C['api'] & EA;
    options: C['options'] & EO;
    transforms: C['transforms'] & ET;
};
type AnyPluginConfig = {
    key: any;
    api: any;
    options: any;
    transforms: any;
};
type WithAnyKey<C extends AnyPluginConfig = PluginConfig> = PluginConfig<any, InferOptions<C>, InferApi<C>, InferTransforms<C>>;
type WithRequiredKey<P = {}> = (P extends {
    key: string;
} ? P : never) | {
    key: string;
};
type InferOptions<P> = P extends PluginConfig ? P['options'] : never;
type InferApi<P> = P extends PluginConfig ? P['api'] : never;
type InferTransforms<P> = P extends PluginConfig ? P['transforms'] : never;
type ParserOptions = {
    data: string;
    dataTransfer: DataTransfer;
};
type BasePluginContext<C extends AnyPluginConfig = PluginConfig> = {
    getOption: <K extends keyof InferOptions<C>, F extends InferOptions<C>[K]>(optionKey: K, ...args: F extends (...args: infer A) => any ? A : never[]) => F extends (...args: any[]) => infer R ? R : F;
    setOption: <K extends keyof InferOptions<C>>(optionKey: K, value: InferOptions<C>[K]) => void;
    setOptions: {
        (options: Parameters<SetImmerState<InferOptions<C>>>[0]): void;
        (options: Partial<InferOptions<C>>): void;
    };
    api: C['api'];
    getOptions: () => InferOptions<C>;
    tf: C['transforms'];
    type: string;
};

type DebugErrorType = (string & {}) | 'DEFAULT' | 'OPTION_UNDEFINED' | 'OVERRIDE_MISSING' | 'PLUGIN_DEPENDENCY_MISSING' | 'PLUGIN_MISSING' | 'USE_CREATE_PLUGIN' | 'USE_ELEMENT_CONTEXT';
declare class PlateError extends Error {
    type: DebugErrorType;
    constructor(message: string, type?: DebugErrorType);
}
type LogLevel = 'error' | 'info' | 'log' | 'warn';
declare const DebugPlugin: SlatePlugin<PluginConfig<"debug", {
    isProduction: boolean;
    logLevel: LogLevel;
    logger: Partial<Record<LogLevel, (message: string, type?: DebugErrorType, details?: any) => void>>;
    throwErrors: boolean;
}, {
    debug: {
        error: (message: string | unknown, type?: DebugErrorType, details?: any) => void;
        info: (message: string, type?: DebugErrorType, details?: any) => void;
        log: (message: string, type?: DebugErrorType, details?: any) => void;
        warn: (message: string, type?: DebugErrorType, details?: any) => void;
    };
}, {}>>;

type CorePlugin = ReturnType<typeof getCorePlugins>[number];
type GetCorePluginsOptions = {
    /** Specifies the maximum number of characters allowed in the editor. */
    maxLength?: number;
    /** Override the core plugins using the same key. */
    plugins?: AnyPluginConfig[];
};
declare const getCorePlugins: ({ maxLength, plugins, }: GetCorePluginsOptions) => (SlatePlugin<DebugConfig> | SlatePlugin<PluginConfig<"slateNext", {}, {
    create: {
        value: (() => _udecode_slate.Value) & (() => _udecode_slate.Value);
        block: ((node?: Partial<_udecode_slate.TElement>, _path?: slate.Path) => _udecode_slate.TElement) & ((node?: Partial<_udecode_slate.TElement>, path?: slate.Path) => _udecode_slate.TElement);
    };
    reset: () => void;
}, {
    reset: () => void;
    setValue: <V extends _udecode_slate.Value>(value?: V | string) => void;
    toggle: {
        block: ((options: ToggleBlockOptions, editorNodesOptions?: Omit<_udecode_slate.GetNodeEntriesOptions<SlateEditor>, "match"> | undefined) => void) & ((options: ToggleBlockOptions, editorNodesOptions?: Omit<_udecode_slate.GetNodeEntriesOptions<SlateEditor>, "match"> | undefined) => void);
        mark: ((args_0: _udecode_slate_utils.ToggleMarkOptions) => void) & ((args_0: _udecode_slate_utils.ToggleMarkOptions) => void);
    };
}>> | SlatePlugin<PluginConfig<"dom", {}, {}, {}>> | SlatePlugin<PluginConfig<"history", {}, {}, {}>> | SlatePlugin<PluginConfig<"inlineVoid", {}, {}, {}>> | SlatePlugin<PluginConfig<"parser", {}, {}, {}>> | SlatePlugin<LengthConfig> | SlatePlugin<PluginConfig<"html", {}, Record<"html", {
    deserialize: (args_0: {
        element: HTMLElement | string;
        collapseWhiteSpace?: boolean;
    }) => _udecode_slate.TDescendant[];
}>, {}>> | SlatePlugin<PluginConfig<"ast", {}, {}, {}>> | SlatePlugin<PluginConfig<"p", {}, {}, {}>>)[];
type LogFunction = (message: string, type?: DebugErrorType, details?: any) => void;
type DebugConfig = PluginConfig<'debug', {
    isProduction: boolean;
    logLevel: LogLevel;
    logger: Partial<Record<LogLevel, LogFunction>>;
    throwErrors: boolean;
}, {
    debug: {
        error: (message: string | unknown, type?: DebugErrorType, details?: any) => void;
        info: (message: string, type?: DebugErrorType, details?: any) => void;
        log: (message: string, type?: DebugErrorType, details?: any) => void;
        warn: (message: string, type?: DebugErrorType, details?: any) => void;
    };
}>;
type LengthConfig = PluginConfig<'length', {
    maxLength: number;
}>;
interface ToggleBlockOptions {
    /** The default block type to revert to when untoggling. Defaults to paragraph. */
    defaultType?: string;
    /** The block type to apply or toggle. */
    type?: string;
}

type BaseEditor = TEditor & {
    key: any;
    id: any;
    getApi: <C extends AnyPluginConfig = PluginConfig>(plugin?: WithRequiredKey<C>) => InferApi<C>;
    getInjectProps: <C extends AnyPluginConfig = PluginConfig>(plugin: WithRequiredKey<C>) => InjectNodeProps<C>;
    getOption: <C extends AnyPluginConfig, K extends keyof InferOptions<C>, F extends InferOptions<C>[K]>(plugin: WithRequiredKey<C>, optionKey: K, ...args: F extends (...args: infer A) => any ? A : never[]) => F extends (...args: any[]) => infer R ? R : F;
    getOptions: <C extends AnyPluginConfig = PluginConfig>(plugin: WithRequiredKey<C>) => InferOptions<C>;
    getOptionsStore: <C extends AnyPluginConfig>(plugin: WithRequiredKey<C>) => StoreApi<C['key'], InferOptions<C>>;
    getPlugin: <C extends AnyPluginConfig = PluginConfig>(plugin: WithRequiredKey<C>) => C extends {
        node: any;
    } ? C : EditorPlugin<C>;
    getTransforms: <C extends AnyPluginConfig = PluginConfig>(plugin?: WithRequiredKey<C>) => InferTransforms<C>;
    setOption: <C extends AnyPluginConfig, K extends keyof InferOptions<C>>(plugin: WithRequiredKey<C>, optionKey: K, value: InferOptions<C>[K]) => void;
    setOptions: {
        <C extends AnyPluginConfig>(plugin: WithRequiredKey<C>, options: Parameters<SetImmerState<InferOptions<C>>>[0]): void;
        <C extends AnyPluginConfig>(plugin: WithRequiredKey<C>, options: Partial<InferOptions<C>>): void;
    };
    currentKeyboardEvent: KeyboardEventLike | null;
    getType: (plugin: WithRequiredKey) => string;
    /**
     * Whether the editor is a fallback editor.
     *
     * @default false
     * @see {@link createPlateFallbackEditor}
     */
    isFallback: boolean;
    pluginList: any[];
    plugins: Record<string, any>;
    prevSelection: TRange | null;
};
type SlateEditor = BaseEditor & {
    api: UnionToIntersection<InferApi<CorePlugin>>;
    pluginList: AnyEditorPlugin[];
    plugins: Record<string, AnyEditorPlugin>;
    tf: SlateEditor['transforms'];
    transforms: UnionToIntersection<InferTransforms<CorePlugin>>;
};
type TSlateEditor<V extends Value = Value, P extends AnyPluginConfig = CorePlugin> = SlateEditor & {
    api: UnionToIntersection<InferApi<CorePlugin | P>>;
    children: V;
    pluginList: P[];
    plugins: {
        [K in P['key']]: Extract<P, {
            key: K;
        }>;
    };
    tf: UnionToIntersection<InferTransforms<CorePlugin | P>>;
    transforms: UnionToIntersection<InferTransforms<CorePlugin | P>>;
};
type InferPlugins<T extends AnyPluginConfig[]> = T[number];

type BaseWithSlateOptions<V extends Value = Value, P extends AnyPluginConfig = CorePlugin> = {
    id?: any;
    /**
     * Select the editor after initialization.
     *
     * @default false
     *
     * - `true` | 'end': Select the end of the editor
     * - `false`: Do not select anything
     * - `'start'`: Select the start of the editor
     */
    autoSelect?: boolean | 'end' | 'start';
    /** Specifies the maximum number of characters allowed in the editor. */
    maxLength?: number;
    plugins?: P[];
    selection?: TSelection;
    /**
     * When `true`, it will normalize the initial `value` passed to the `editor`.
     * This is useful when adding normalization rules on already existing
     * content.
     *
     * @default false
     */
    shouldNormalizeEditor?: boolean;
    value?: V | string;
};
type WithSlateOptions<V extends Value = Value, P extends AnyPluginConfig = CorePlugin> = BaseWithSlateOptions<V, P> & Pick<Partial<AnySlatePlugin>, 'api' | 'decorate' | 'extendEditor' | 'inject' | 'normalizeInitialValue' | 'options' | 'override' | 'transforms'> & {
    /** Function to configure the root plugin */
    rootPlugin?: (plugin: AnySlatePlugin) => AnySlatePlugin;
};
/**
 * Applies Plate enhancements to an editor instance (non-React version).
 *
 * @remarks
 *   This function supports server-side usage as it doesn't include the
 *   ReactPlugin.
 * @see {@link createSlateEditor} for a higher-level non-React editor creation function.
 * @see {@link createPlateEditor} for a higher-level React editor creation function.
 * @see {@link usePlateEditor} for a React memoized version.
 * @see {@link withPlate} for the React-specific enhancement function.
 */
declare const withSlate: <V extends Value = Value, P extends AnyPluginConfig = SlatePlugin<DebugConfig> | SlatePlugin<PluginConfig<"slateNext", {}, {
    create: {
        value: (() => Value) & (() => Value);
        block: ((node?: Partial<_udecode_slate.TElement>, _path?: slate.Path) => _udecode_slate.TElement) & ((node?: Partial<_udecode_slate.TElement>, path?: slate.Path) => _udecode_slate.TElement);
    };
    reset: () => void;
}, {
    reset: () => void;
    setValue: <V_1 extends Value>(value?: V_1 | string) => void;
    toggle: {
        block: ((options: ToggleBlockOptions, editorNodesOptions?: Omit<_udecode_slate.GetNodeEntriesOptions<SlateEditor>, "match"> | undefined) => void) & ((options: ToggleBlockOptions, editorNodesOptions?: Omit<_udecode_slate.GetNodeEntriesOptions<SlateEditor>, "match"> | undefined) => void);
        mark: ((args_0: _udecode_slate_utils.ToggleMarkOptions) => void) & ((args_0: _udecode_slate_utils.ToggleMarkOptions) => void);
    };
}>> | SlatePlugin<PluginConfig<"dom", {}, {}, {}>> | SlatePlugin<PluginConfig<"history", {}, {}, {}>> | SlatePlugin<PluginConfig<"inlineVoid", {}, {}, {}>> | SlatePlugin<PluginConfig<"parser", {}, {}, {}>> | SlatePlugin<LengthConfig> | SlatePlugin<PluginConfig<"html", {}, Record<"html", {
    deserialize: (args_0: {
        element: HTMLElement | string;
        collapseWhiteSpace?: boolean;
    }) => _udecode_slate.TDescendant[];
}>, {}>> | SlatePlugin<PluginConfig<"ast", {}, {}, {}>> | SlatePlugin<PluginConfig<"p", {}, {}, {}>>>(e: TEditor, { id, autoSelect, maxLength, plugins, rootPlugin, selection, shouldNormalizeEditor, value, ...pluginConfig }?: WithSlateOptions<V, P>) => TSlateEditor<V, InferPlugins<P[]>>;
type CreateSlateEditorOptions<V extends Value = Value, P extends AnyPluginConfig = CorePlugin> = WithSlateOptions<V, P> & {
    /**
     * Initial editor to be extended with `withPlate`.
     *
     * @default createEditor()
     */
    editor?: TEditor;
};
/**
 * Creates a Slate editor without React-specific enhancements.
 *
 * @see {@link createPlateEditor} for a React-specific version of editor creation.
 * @see {@link usePlateEditor} for a memoized React version.
 * @see {@link withSlate} for the underlying function that applies Slate enhancements to an editor.
 */
declare const createSlateEditor: <V extends Value = Value, P extends AnyPluginConfig = SlatePlugin<DebugConfig> | SlatePlugin<PluginConfig<"slateNext", {}, {
    create: {
        value: (() => Value) & (() => Value);
        block: ((node?: Partial<_udecode_slate.TElement>, _path?: slate.Path) => _udecode_slate.TElement) & ((node?: Partial<_udecode_slate.TElement>, path?: slate.Path) => _udecode_slate.TElement);
    };
    reset: () => void;
}, {
    reset: () => void;
    setValue: <V_1 extends Value>(value?: V_1 | string) => void;
    toggle: {
        block: ((options: ToggleBlockOptions, editorNodesOptions?: Omit<_udecode_slate.GetNodeEntriesOptions<SlateEditor>, "match"> | undefined) => void) & ((options: ToggleBlockOptions, editorNodesOptions?: Omit<_udecode_slate.GetNodeEntriesOptions<SlateEditor>, "match"> | undefined) => void);
        mark: ((args_0: _udecode_slate_utils.ToggleMarkOptions) => void) & ((args_0: _udecode_slate_utils.ToggleMarkOptions) => void);
    };
}>> | SlatePlugin<PluginConfig<"dom", {}, {}, {}>> | SlatePlugin<PluginConfig<"history", {}, {}, {}>> | SlatePlugin<PluginConfig<"inlineVoid", {}, {}, {}>> | SlatePlugin<PluginConfig<"parser", {}, {}, {}>> | SlatePlugin<LengthConfig> | SlatePlugin<PluginConfig<"html", {}, Record<"html", {
    deserialize: (args_0: {
        element: HTMLElement | string;
        collapseWhiteSpace?: boolean;
    }) => _udecode_slate.TDescendant[];
}>, {}>> | SlatePlugin<PluginConfig<"ast", {}, {}, {}>> | SlatePlugin<PluginConfig<"p", {}, {}, {}>>>({ editor, ...options }?: CreateSlateEditorOptions<V, P>) => TSlateEditor<V, P>;

export { PlateError as $, type AnyEditorPlugin as A, type BaseEditor as B, type CreateSlateEditorOptions as C, type HandlerReturnType as D, type ExtendEditor as E, type SlatePluginConfig as F, type EditorPlugin as G, type HtmlDeserializer as H, type InferConfig as I, type Parser as J, type TransformOptions as K, type LengthConfig as L, type Deserializer as M, type Nullable as N, type Serializer as O, type ParserOptions as P, type HtmlSerializer as Q, type Decorate as R, type SlateEditor as S, type ToggleBlockOptions as T, type InjectNodeProps as U, type CorePlugin as V, type WithRequiredKey as W, type GetCorePluginsOptions as X, getCorePlugins as Y, type DebugConfig as Z, type DebugErrorType as _, type AnySlatePlugin as a, type LogLevel as a0, DebugPlugin as a1, type GetInjectNodePropsOptions as a2, type GetInjectNodePropsReturnType as a3, pluginInjectNodeProps as a4, type SlatePlugin as b, type PluginConfig as c, type AnyPluginConfig as d, type SlatePluginMethods as e, type SlatePluginContext as f, type SlatePlugins as g, type TSlateEditor as h, type InferPlugins as i, type BaseWithSlateOptions as j, type WithSlateOptions as k, createSlateEditor as l, type BasePlugin as m, type BasePluginNode as n, type BaseSerializer as o, type BaseDeserializer as p, type BaseHtmlDeserializer as q, type BaseInjectProps as r, type BaseTransformOptions as s, type ExtendConfig as t, type WithAnyKey as u, type InferOptions as v, withSlate as w, type InferApi as x, type InferTransforms as y, type BasePluginContext as z };

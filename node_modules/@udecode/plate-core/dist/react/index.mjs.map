{"version":3,"sources":["../../src/react/components/DefaultLeaf.tsx","../../src/react/components/EditorHotkeysEffect.tsx","../../src/react/stores/plate/PlateStore.ts","../../src/react/stores/plate/createPlateStore.ts","../../src/react/libs/jotai.ts","../../src/react/stores/plate-controller/plateControllerStore.ts","../../src/react/stores/plate/actions/useIncrementVersion.ts","../../src/react/stores/plate/actions/useRedecorate.ts","../../src/react/stores/plate/selectors/useEditorId.ts","../../src/react/stores/plate/selectors/useEditorMounted.ts","../../src/lib/editor/withSlate.ts","../../src/internal/mergePlugins.ts","../../src/lib/utils/misc/isFunction.ts","../../src/lib/plugin/createSlatePlugin.ts","../../src/lib/utils/applyDeepToNodes.ts","../../src/lib/utils/getInjectedPlugins.ts","../../src/lib/utils/getKeysByTypes.ts","../../src/lib/utils/hotkeys.ts","../../src/lib/utils/mergeDeepToNodes.ts","../../src/lib/utils/normalizeDescendantsToDocumentFragment.ts","../../src/lib/plugin/getEditorPlugin.ts","../../src/lib/plugins/AstPlugin.ts","../../src/lib/plugins/DOMPlugin.ts","../../src/lib/plugins/HistoryPlugin.ts","../../src/lib/plugins/InlineVoidPlugin.ts","../../src/lib/plugins/ParserPlugin.ts","../../src/lib/plugins/debug/DebugPlugin.ts","../../src/lib/plugins/editor-protocol/SlateNextPlugin.ts","../../src/lib/transforms/resetEditorChildren.ts","../../src/lib/transforms/resetEditor.ts","../../src/lib/transforms/toggleBlock.ts","../../src/lib/plugins/paragraph/BaseParagraphPlugin.ts","../../src/lib/plugins/html/HtmlPlugin.ts","../../src/lib/plugins/html/utils/isHtmlElement.ts","../../src/lib/plugins/html/utils/isHtmlText.ts","../../src/lib/plugins/html/utils/inlineTagNames.ts","../../src/lib/plugins/html/utils/isHtmlInlineElement.ts","../../src/lib/plugins/html/utils/isHtmlBlockElement.ts","../../src/lib/plugins/html/utils/collapse-white-space/collapseString.ts","../../src/lib/plugins/html/utils/collapse-white-space/isLastNonEmptyTextOfInlineFormattingContext.ts","../../src/lib/plugins/html/utils/collapse-white-space/stateTransforms.ts","../../src/lib/plugins/html/utils/collapse-white-space/collapseWhiteSpaceText.ts","../../src/lib/plugins/html/utils/collapse-white-space/collapseWhiteSpaceNode.ts","../../src/lib/plugins/html/utils/collapse-white-space/collapseWhiteSpaceChildren.ts","../../src/lib/plugins/html/utils/collapse-white-space/inferWhiteSpaceRule.ts","../../src/lib/plugins/html/utils/collapse-white-space/collapseWhiteSpaceElement.ts","../../src/lib/plugins/html/utils/collapse-white-space/collapseWhiteSpace.ts","../../src/lib/plugins/html/utils/htmlBodyToFragment.ts","../../src/lib/plugins/html/utils/deserializeHtmlNodeChildren.ts","../../src/lib/plugins/html/utils/htmlBrToNewLine.ts","../../src/lib/plugins/html/utils/htmlElementToElement.ts","../../src/lib/plugins/html/utils/pluginDeserializeHtml.ts","../../src/lib/plugins/html/utils/pipeDeserializeHtmlElement.ts","../../src/lib/plugins/html/utils/htmlElementToLeaf.ts","../../src/lib/plugins/html/utils/pipeDeserializeHtmlLeaf.ts","../../src/lib/plugins/html/utils/htmlTextNodeToString.ts","../../src/lib/plugins/html/utils/deserializeHtmlNode.ts","../../src/lib/plugins/html/utils/deserializeHtmlElement.ts","../../src/lib/plugins/html/utils/htmlStringToDOMNode.ts","../../src/lib/plugins/html/utils/deserializeHtml.ts","../../src/lib/plugins/html/utils/parseHtmlDocument.ts","../../src/lib/plugins/length/LengthPlugin.ts","../../src/lib/plugins/getCorePlugins.ts","../../src/lib/utils/pluginInjectNodeProps.ts","../../src/lib/utils/pipeInjectNodeProps.tsx","../../src/lib/utils/pipeInsertDataQuery.ts","../../src/lib/utils/pipeInsertFragment.ts","../../src/lib/utils/pipeNormalizeInitialValue.ts","../../src/lib/utils/pipeTransformData.ts","../../src/lib/utils/pipeTransformFragment.ts","../../src/lib/utils/resolvePlugin.ts","../../src/lib/utils/resolvePlugins.ts","../../src/lib/utils/misc/getSlateClass.ts","../../src/lib/plugin/getSlatePlugin.ts","../../src/lib/libs/zustand.ts","../../src/react/plugin/toPlatePlugin.ts","../../src/react/plugin/createPlatePlugin.ts","../../src/react/plugin/getEditorPlugin.ts","../../src/react/plugin/getPlugin.ts","../../src/react/plugin/omitPluginContext.ts","../../src/react/editor/withPlate.ts","../../src/react/plugins/PlateApiPlugin.ts","../../src/react/plugins/SlateReactNextPlugin.ts","../../src/react/plugins/event-editor/EventEditorStore.ts","../../src/react/plugins/event-editor/useFocusEditorEvents.ts","../../src/react/plugins/event-editor/EventEditorPlugin.ts","../../src/react/plugins/event-editor/getEventPlateId.ts","../../src/react/plugins/paragraph/ParagraphPlugin.tsx","../../src/react/plugins/react/ReactPlugin.ts","../../src/react/plugins/react/withPlateReact.ts","../../src/react/editor/getPlateCorePlugins.ts","../../src/react/utils/createPlateFallbackEditor.ts","../../src/react/utils/dom-attributes.ts","../../src/react/utils/getRenderNodeProps.ts","../../src/react/utils/hotkeys.ts","../../src/react/utils/pipeDecorate.ts","../../src/react/utils/pipeHandler.ts","../../src/react/utils/pipeOnChange.ts","../../src/react/utils/pipeRenderElement.tsx","../../src/react/utils/pluginRenderElement.tsx","../../src/react/stores/element/useElementStore.ts","../../src/react/utils/pipeRenderLeaf.tsx","../../src/react/utils/pluginRenderLeaf.tsx","../../src/react/stores/plate/selectors/useEditorRef.ts","../../src/react/stores/plate/selectors/useEditorPlugin.ts","../../src/react/stores/plate/selectors/useEditorReadOnly.ts","../../src/react/stores/plate/selectors/useEditorSelection.ts","../../src/react/stores/plate/selectors/useEditorSelector.ts","../../src/react/stores/plate/selectors/useEditorState.ts","../../src/react/stores/plate/selectors/useEditorValue.ts","../../src/react/stores/plate/selectors/useEditorVersion.ts","../../src/react/stores/plate/selectors/useSelectionVersion.ts","../../src/react/stores/plate/selectors/useValueVersion.ts","../../src/react/stores/element/useElement.ts","../../src/react/stores/event-editor/useEventPlateId.ts","../../src/react/components/EditorMethodsEffect.ts","../../src/react/components/EditorRefEffect.tsx","../../src/react/components/EditorStateEffect.tsx","../../src/react/components/Plate.tsx","../../src/react/components/PlateContent.tsx","../../src/react/hooks/useEditableProps.ts","../../src/react/hooks/useSlateProps.ts","../../src/react/components/PlateControllerEffect.ts","../../src/react/components/PlateSlate.tsx","../../src/react/components/PlateTest.tsx","../../src/react/editor/usePlateEditor.ts","../../src/react/components/withHOC.tsx"],"sourcesContent":["import React from 'react';\n\nimport type { PlateRenderLeafProps } from '../plugin/PlateRenderLeafProps';\n\nexport function DefaultLeaf({\n  attributes,\n  children,\n  editor,\n  leaf,\n  nodeProps,\n  text,\n  ...props\n}: PlateRenderLeafProps) {\n  return (\n    <span {...attributes} {...props}>\n      {children}\n    </span>\n  );\n}\n","import React, { useEffect } from 'react';\n\nimport { useHotkeys } from '@udecode/react-hotkeys';\nimport { isDefined } from '@udecode/utils';\n\nimport type { Shortcut } from '../plugin';\n\nimport { useEditorRef } from '../stores';\n\nexport function EditorHotkeysEffect({\n  id,\n  editableRef,\n}: {\n  editableRef: React.RefObject<HTMLDivElement>;\n  id?: string;\n}) {\n  const editor = useEditorRef(id);\n\n  return (\n    <>\n      {Object.entries(editor.shortcuts).map(([hotkeyString, hotkeyConfig]) => {\n        if (\n          !hotkeyConfig ||\n          !isDefined(hotkeyConfig.keys) ||\n          !hotkeyConfig.handler\n        ) {\n          return null;\n        }\n\n        return (\n          <HotkeyEffect\n            id={id}\n            key={hotkeyString}\n            editableRef={editableRef}\n            hotkeyConfig={hotkeyConfig}\n          />\n        );\n      })}\n    </>\n  );\n}\n\nfunction HotkeyEffect({\n  id,\n  editableRef,\n  hotkeyConfig,\n}: {\n  editableRef: React.RefObject<HTMLDivElement>;\n  hotkeyConfig: Shortcut;\n  id?: string;\n}) {\n  const editor = useEditorRef(id);\n  const { keys, handler, ...options } = hotkeyConfig;\n\n  const setHotkeyRef = useHotkeys<HTMLDivElement>(\n    keys!,\n    (event, eventDetails) => {\n      handler!({\n        editor,\n        event,\n        eventDetails,\n      });\n    },\n    {\n      enableOnContentEditable: true,\n      ...options,\n    },\n    []\n  );\n\n  useEffect(() => {\n    if (editableRef.current) {\n      setHotkeyRef(editableRef.current);\n    }\n  }, [setHotkeyRef, editableRef]);\n\n  return null;\n}\n","import type { TNodeEntry, TSelection, ValueOf } from '@udecode/slate';\nimport type { TEditableProps } from '@udecode/slate-react';\nimport type { Range } from 'slate';\n\nimport type { Nullable } from '../../../lib';\nimport type { PlateEditor } from '../../editor';\n\nexport type PlateChangeKey =\n  | 'versionDecorate'\n  | 'versionEditor'\n  | 'versionSelection';\n\nexport type PlateStoreState<E extends PlateEditor = PlateEditor> = Nullable<{\n  decorate: NonNullable<(options: { editor: E; entry: TNodeEntry }) => Range[]>;\n\n  /** Whether `Editable` is rendered so slate DOM is resolvable. */\n  isMounted: boolean;\n\n  /**\n   * Whether the editor is primary. If no editor is active, then PlateController\n   * will use the first-mounted primary editor.\n   *\n   * @default true\n   */\n  primary: boolean;\n\n  //  Whether the editor is read-only.\n  readOnly: boolean;\n\n  renderElement: NonNullable<TEditableProps['renderElement']>;\n\n  renderLeaf: NonNullable<TEditableProps['renderLeaf']>;\n\n  /**\n   * Version incremented when calling `redecorate`. This is a dependency of the\n   * `decorate` function.\n   */\n  versionDecorate: number;\n\n  /** Version incremented on each editor change. */\n  versionEditor: number;\n\n  /** Version incremented on each editor.selection change. */\n  versionSelection: number;\n\n  /** Version incremented on each editor.children change. */\n  versionValue: number;\n  /** Controlled callback called when the editor state changes. */\n  onChange: (options: { editor: E; value: ValueOf<E> }) => void;\n  /** Controlled callback called when the editor.selection changes. */\n  onSelectionChange: (options: { editor: E; selection: TSelection }) => void;\n  /** Controlled callback called when the editor.children changes. */\n  onValueChange: (options: { editor: E; value: ValueOf<E> }) => void;\n}> & {\n  /**\n   * A unique id used as a provider scope. Use it if you have multiple `Plate`\n   * in the same React tree.\n   *\n   * @default random id\n   */\n  id: string;\n\n  /**\n   * Slate editor reference.\n   *\n   * @default createPlateFallbackEditor()\n   */\n  editor: E;\n};\n\n//  A list of store keys to be exposed in `editor.api.plate.set`.\nexport const EXPOSED_STORE_KEYS = [\n  'readOnly',\n  'onChange',\n  'decorate',\n  'renderElement',\n  'renderLeaf',\n] as const;\n","import React from 'react';\n\nimport type { JotaiStore } from 'jotai-x';\n\nimport { atom, createStore } from 'jotai';\n\nimport type { PlateEditor } from '../../editor/PlateEditor';\nimport type { PlateStoreState } from './PlateStore';\n\nimport { createAtomStore } from '../../libs';\nimport {\n  usePlateControllerEditorStore,\n  usePlateControllerExists,\n} from '../plate-controller';\n\nexport const PLATE_SCOPE = 'plate';\n\nexport const GLOBAL_PLATE_SCOPE = Symbol('global-plate');\n\nexport const createPlateStore = <E extends PlateEditor = PlateEditor>({\n  id,\n  decorate = null,\n  editor,\n  isMounted = false,\n  primary = true,\n  readOnly = null,\n  renderElement = null,\n  renderLeaf = null,\n  versionDecorate = 1,\n  versionEditor = 1,\n  versionSelection = 1,\n  versionValue = 1,\n  onChange = null,\n  onSelectionChange = null,\n  onValueChange = null,\n  ...state\n}: Partial<PlateStoreState<E>> = {}) =>\n  createAtomStore(\n    {\n      decorate,\n      editor,\n      isMounted,\n      primary,\n      readOnly,\n      renderElement,\n      renderLeaf,\n      versionDecorate,\n      versionEditor,\n      versionSelection,\n      versionValue,\n      onChange,\n      onSelectionChange,\n      onValueChange,\n      ...state,\n    } as PlateStoreState<E>,\n    {\n      extend: (atoms) => ({\n        trackedEditor: atom((get) => ({\n          editor: get(atoms.editor),\n          version: get(atoms.versionEditor),\n        })),\n        trackedSelection: atom((get) => ({\n          selection: get(atoms.editor).selection,\n          version: get(atoms.versionSelection),\n        })),\n        trackedValue: atom((get) => ({\n          value: get(atoms.editor).children,\n          version: get(atoms.versionValue),\n        })),\n      }),\n      name: 'plate',\n    }\n  );\n\nexport const {\n  PlateProvider: PlateStoreProvider,\n  plateStore,\n  usePlateStore,\n} = createPlateStore();\n\nexport interface UsePlateEditorStoreOptions {\n  debugHookName?: string;\n}\n\nexport const usePlateEditorStore = (\n  id?: string,\n  { debugHookName = 'usePlateEditorStore' }: UsePlateEditorStoreOptions = {}\n): JotaiStore => {\n  // Try to fetch the store from a Plate provider\n  const localStore = usePlateStore(id).store({ warnIfNoStore: false }) ?? null;\n\n  /**\n   * To preserve hook order, only use `localStore` if it was present on first\n   * render. This lets us call `usePlateControllerEditorStore` conditionally.\n   */\n  const [localStoreExists] = React.useState(!!localStore);\n\n  // If no store was found, try to fetch the store from a PlateController\n  const store = localStoreExists\n    ? localStore\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      usePlateControllerEditorStore(id);\n\n  /**\n   * If we still have no store, there are two possibilities.\n   *\n   * Case 1: There is neither a Plate nor a PlateController above us in the\n   * tree. In this case, throw an error, since calling the hook will never\n   * work.\n   *\n   * Case 2: There is a PlateController, but it has no active editor. In this\n   * case, return a fallback store until an editor becomes active.\n   */\n  const plateControllerExists = usePlateControllerExists();\n  const fallbackStore = React.useMemo(() => createStore(), []);\n\n  if (!store) {\n    if (plateControllerExists) {\n      return fallbackStore;\n    }\n\n    throw new Error(\n      `${debugHookName} must be used inside a Plate or PlateController`\n    );\n  }\n\n  return store;\n};\n\nexport const usePlateSelectors = (\n  id?: string,\n  options?: UsePlateEditorStoreOptions\n) => {\n  const store = usePlateEditorStore(id, {\n    debugHookName: 'usePlateSelectors',\n    ...options,\n  });\n\n  return usePlateStore({ store }).get;\n};\n\nexport const usePlateActions = (\n  id?: string,\n  options?: UsePlateEditorStoreOptions\n) => {\n  const store = usePlateEditorStore(id, {\n    debugHookName: 'usePlateActions',\n    ...options,\n  });\n\n  return usePlateStore({ store }).set;\n};\n\nexport const usePlateStates = (\n  id?: string,\n  options?: UsePlateEditorStoreOptions\n) => {\n  const store = usePlateEditorStore(id, {\n    debugHookName: 'usePlateStates',\n    ...options,\n  });\n\n  return usePlateStore({ store }).use;\n};\n","export { atom } from 'jotai';\n\nexport { createAtomStore } from 'jotai-x';\n","import React from 'react';\n\nimport type { JotaiStore } from 'jotai-x';\n\nimport { type Atom, atom } from 'jotai';\n\nimport { createAtomStore } from '../../libs';\n\nexport const {\n  PlateControllerProvider: PlateController,\n  plateControllerStore,\n  usePlateControllerStore,\n} = createAtomStore(\n  {\n    activeId: atom(null as string | null),\n    editorStores: atom({} as Record<string, JotaiStore | null>),\n    primaryEditorIds: atom([] as string[]),\n  },\n  {\n    name: 'plateController',\n  }\n);\n\nexport const usePlateControllerSelectors = () => usePlateControllerStore().get;\n\nexport const usePlateControllerActions = () => usePlateControllerStore().set;\n\nexport const usePlateControllerStates = () => usePlateControllerStore().use;\n\nexport const usePlateControllerExists = () =>\n  !!usePlateControllerStore().store({ warnIfNoStore: false });\n\n/**\n * Retrieve from PlateController the JotaiStore for the editor with a given ID,\n * or the active editor if no ID is provided, or the first primary editor if no\n * editor is active, or null.\n */\nexport const usePlateControllerEditorStore = (\n  idProp?: string\n): JotaiStore | null => {\n  const storeAtom: Atom<JotaiStore | null> = React.useMemo(\n    () =>\n      atom((get) => {\n        const editorStores = get(plateControllerStore.atom.editorStores);\n\n        const forId = (id: string | null): JotaiStore | null => {\n          if (!id) return null;\n\n          return editorStores[id] ?? null;\n        };\n\n        if (idProp) return forId(idProp);\n\n        const lookupOrder = [\n          get(plateControllerStore.atom.activeId),\n          ...get(plateControllerStore.atom.primaryEditorIds),\n        ];\n\n        for (const id of lookupOrder) {\n          const store = forId(id);\n\n          if (store) return store;\n        }\n\n        return null;\n      }),\n    [idProp]\n  );\n\n  return usePlateControllerSelectors().atom(storeAtom);\n};\n","import React from 'react';\n\nimport type { PlateChangeKey } from '../PlateStore';\n\nimport {\n  type UsePlateEditorStoreOptions,\n  usePlateActions,\n} from '../createPlateStore';\n\nexport const useIncrementVersion = (\n  key: PlateChangeKey,\n  id?: string,\n  options: UsePlateEditorStoreOptions = {}\n) => {\n  const previousVersionRef = React.useRef(1);\n\n  const set = usePlateActions(id, {\n    debugHookName: 'useIncrementVersion',\n    ...options,\n  })[key]();\n\n  return React.useCallback(() => {\n    const nextVersion = previousVersionRef.current + 1;\n    set(nextVersion);\n    previousVersionRef.current = nextVersion;\n  }, [set]);\n};\n","import React from 'react';\n\nimport type { UsePlateEditorStoreOptions } from '../createPlateStore';\n\nimport { useIncrementVersion } from './useIncrementVersion';\n\nexport const useRedecorate = (\n  id?: string,\n  options: UsePlateEditorStoreOptions = {}\n) => {\n  const updateDecorate = useIncrementVersion('versionDecorate', id, {\n    debugHookName: 'useRedecorate',\n    ...options,\n  });\n\n  return React.useCallback(() => {\n    updateDecorate();\n  }, [updateDecorate]);\n};\n","import { usePlateSelectors } from '../createPlateStore';\n\n/** Get the closest `Plate` id. */\nexport const useEditorId = (): string =>\n  usePlateSelectors(undefined, { debugHookName: 'useEditorId' }).editor().id;\n","import {\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\nexport const useEditorMounted = (\n  id?: string,\n  options: UsePlateEditorStoreOptions = {}\n): boolean => {\n  return !!usePlateSelectors(id, {\n    debugHookName: 'useEditorMounted',\n    ...options,\n  }).isMounted();\n};\n","import {\n  type TEditor,\n  type TSelection,\n  type Value,\n  createTEditor,\n  getEndPoint,\n  getStartPoint,\n  normalizeEditor,\n  select,\n} from '@udecode/slate';\n\nimport type { AnyPluginConfig } from '../plugin/BasePlugin';\nimport type { AnySlatePlugin } from '../plugin/SlatePlugin';\nimport type { InferPlugins, SlateEditor, TSlateEditor } from './SlateEditor';\n\nimport { createSlatePlugin } from '../plugin/createSlatePlugin';\nimport { getPluginType, getSlatePlugin } from '../plugin/getSlatePlugin';\nimport { type CorePlugin, getCorePlugins } from '../plugins/getCorePlugins';\nimport { pipeNormalizeInitialValue } from '../utils/pipeNormalizeInitialValue';\nimport { resolvePlugins } from '../utils/resolvePlugins';\n\nexport type BaseWithSlateOptions<\n  V extends Value = Value,\n  P extends AnyPluginConfig = CorePlugin,\n> = {\n  id?: any;\n\n  /**\n   * Select the editor after initialization.\n   *\n   * @default false\n   *\n   * - `true` | 'end': Select the end of the editor\n   * - `false`: Do not select anything\n   * - `'start'`: Select the start of the editor\n   */\n  autoSelect?: boolean | 'end' | 'start';\n\n  /** Specifies the maximum number of characters allowed in the editor. */\n  maxLength?: number;\n\n  plugins?: P[];\n\n  selection?: TSelection;\n\n  /**\n   * When `true`, it will normalize the initial `value` passed to the `editor`.\n   * This is useful when adding normalization rules on already existing\n   * content.\n   *\n   * @default false\n   */\n  shouldNormalizeEditor?: boolean;\n\n  value?: V | string;\n};\n\nexport type WithSlateOptions<\n  V extends Value = Value,\n  P extends AnyPluginConfig = CorePlugin,\n> = BaseWithSlateOptions<V, P> &\n  Pick<\n    Partial<AnySlatePlugin>,\n    | 'api'\n    | 'decorate'\n    | 'extendEditor'\n    | 'inject'\n    | 'normalizeInitialValue'\n    | 'options'\n    | 'override'\n    | 'transforms'\n  > & {\n    /** Function to configure the root plugin */\n    rootPlugin?: (plugin: AnySlatePlugin) => AnySlatePlugin;\n  };\n\n/**\n * Applies Plate enhancements to an editor instance (non-React version).\n *\n * @remarks\n *   This function supports server-side usage as it doesn't include the\n *   ReactPlugin.\n * @see {@link createSlateEditor} for a higher-level non-React editor creation function.\n * @see {@link createPlateEditor} for a higher-level React editor creation function.\n * @see {@link usePlateEditor} for a React memoized version.\n * @see {@link withPlate} for the React-specific enhancement function.\n */\nexport const withSlate = <\n  V extends Value = Value,\n  P extends AnyPluginConfig = CorePlugin,\n>(\n  e: TEditor,\n  {\n    id,\n    autoSelect,\n    maxLength,\n    plugins = [],\n    rootPlugin,\n    selection,\n    shouldNormalizeEditor,\n    value,\n    ...pluginConfig\n  }: WithSlateOptions<V, P> = {}\n): TSlateEditor<V, InferPlugins<P[]>> => {\n  const editor = e as SlateEditor;\n\n  // Override incremental id generated by slate\n  editor.id = id ?? editor.id;\n  editor.key = editor.key ?? Math.random();\n  editor.isFallback = false;\n\n  editor.getApi = () => editor.api as any;\n  editor.getTransforms = () => editor.transforms as any;\n  editor.getPlugin = (plugin) => getSlatePlugin(editor, plugin) as any;\n  editor.getType = (plugin) => getPluginType(editor, plugin);\n  editor.getInjectProps = (plugin) => {\n    return (\n      editor.getPlugin<AnySlatePlugin>(plugin).inject?.nodeProps ?? ({} as any)\n    );\n  };\n  editor.getOptionsStore = (plugin) => {\n    return editor.getPlugin(plugin).optionsStore;\n  };\n  editor.getOptions = (plugin) => {\n    const store = editor.getOptionsStore(plugin);\n\n    if (!store) return editor.getPlugin(plugin).options;\n\n    return editor.getOptionsStore(plugin).get.state();\n  };\n  editor.getOption = (plugin, key, ...args) => {\n    const store = editor.getOptionsStore(plugin);\n\n    if (!store) return editor.getPlugin(plugin).options[key];\n\n    const getter = (store.get as any)[key];\n\n    if (getter) {\n      return getter(...args);\n    }\n\n    editor.api.debug.error(\n      `editor.getOption: ${key as string} option is not defined in plugin ${plugin.key}.`,\n      'OPTION_UNDEFINED'\n    );\n  };\n  editor.setOption = (plugin: any, key: any, value: any) => {\n    const store = editor.getOptionsStore(plugin);\n\n    if (!store) return;\n\n    const setter = (store.set as any)[key];\n\n    if (setter) {\n      setter(value);\n    } else {\n      editor.api.debug.error(\n        `editor.setOption: ${key} option is not defined in plugin ${plugin.key}.`,\n        'OPTION_UNDEFINED'\n      );\n    }\n  };\n  editor.setOptions = (plugin: any, options: any) => {\n    const store = editor.getOptionsStore(plugin);\n\n    if (!store) return;\n    if (typeof options === 'object') {\n      (store.set as any).mergeState(options);\n    } else if (typeof options === 'function') {\n      (store.set as any).state(options);\n    }\n  };\n\n  const corePlugins = getCorePlugins({\n    maxLength,\n    plugins,\n  });\n\n  let rootPluginInstance = createSlatePlugin({\n    key: 'root',\n    priority: 10_000,\n    ...pluginConfig,\n    plugins: [...corePlugins, ...plugins],\n  });\n\n  // Apply rootPlugin configuration if provided\n  if (rootPlugin) {\n    rootPluginInstance = rootPlugin(rootPluginInstance) as any;\n  }\n\n  resolvePlugins(editor, [rootPluginInstance]);\n\n  if (typeof value === 'string') {\n    editor.children = editor.api.html.deserialize({ element: value }) as Value;\n  } else if (value) {\n    editor.children = value;\n  }\n  if (editor.children?.length === 0) {\n    editor.children = editor.api.create.value();\n  }\n  if (selection) {\n    editor.selection = selection;\n  } else if (autoSelect) {\n    const edge = autoSelect === 'start' ? 'start' : 'end';\n    const target =\n      edge === 'start' ? getStartPoint(editor, []) : getEndPoint(editor, []);\n    select(editor, target);\n  }\n  if (value) {\n    pipeNormalizeInitialValue(editor);\n  }\n  if (shouldNormalizeEditor) {\n    normalizeEditor(editor, { force: true });\n  }\n\n  return editor as any;\n};\n\nexport type CreateSlateEditorOptions<\n  V extends Value = Value,\n  P extends AnyPluginConfig = CorePlugin,\n> = WithSlateOptions<V, P> & {\n  /**\n   * Initial editor to be extended with `withPlate`.\n   *\n   * @default createEditor()\n   */\n  editor?: TEditor;\n};\n\n/**\n * Creates a Slate editor without React-specific enhancements.\n *\n * @see {@link createPlateEditor} for a React-specific version of editor creation.\n * @see {@link usePlateEditor} for a memoized React version.\n * @see {@link withSlate} for the underlying function that applies Slate enhancements to an editor.\n */\nexport const createSlateEditor = <\n  V extends Value = Value,\n  P extends AnyPluginConfig = CorePlugin,\n>({\n  editor = createTEditor(),\n  ...options\n}: CreateSlateEditorOptions<V, P> = {}) => {\n  return withSlate<V, P>(editor, options);\n};\n","import mergeWith from 'lodash/mergeWith.js';\n\nimport type { SlatePlugin } from '../lib';\n\nexport function mergePlugins<T>(basePlugin: T, ...sourcePlugins: any[]): T {\n  return mergeWith(\n    {},\n    basePlugin,\n    ...sourcePlugins,\n    (objValue: unknown, srcValue: unknown, key: keyof SlatePlugin) => {\n      // Overwrite array (including plugins) without cloning\n      if (Array.isArray(srcValue)) {\n        return srcValue;\n      }\n      // Shallow merge options\n      if (key === 'options') {\n        return { ...(objValue as any), ...(srcValue as any) };\n      }\n    }\n  );\n}\n","// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n","import type { Modify } from '@udecode/utils';\n\nimport type { SlateEditor } from '../editor/SlateEditor';\nimport type { AnyPluginConfig, PluginConfig } from './BasePlugin';\nimport type {\n  SlatePlugin,\n  SlatePluginMethods,\n  SlatePlugins,\n} from './SlatePlugin';\n\nimport { mergePlugins } from '../../internal/mergePlugins';\nimport { isFunction } from '../utils/misc/isFunction';\n\ntype SlatePluginConfig<K extends string = any, O = {}, A = {}, T = {}> = Omit<\n  Partial<\n    Modify<\n      SlatePlugin<PluginConfig<K, O, A, T>>,\n      {\n        node?: Partial<SlatePlugin<PluginConfig<K, O, A, T>>['node']>;\n      }\n    >\n  >,\n  keyof SlatePluginMethods | 'optionsStore'\n>;\n\ntype TSlatePluginConfig<C extends AnyPluginConfig = PluginConfig> = Omit<\n  Partial<\n    Modify<\n      SlatePlugin<C>,\n      {\n        node?: Partial<SlatePlugin<C>['node']>;\n      }\n    >\n  >,\n  keyof SlatePluginMethods | 'optionsStore'\n>;\n\n/**\n * Creates a new Plate plugin with the given configuration.\n *\n * @remarks\n *   - The plugin's key is required and specified by the K generic.\n *   - The `__extensions` array stores functions to be applied when `resolvePlugin`\n *       is called with an editor.\n *   - The `extend` method adds new extensions to be applied later.\n *   - The `extendPlugin` method extends an existing plugin (including nested\n *       plugins) or adds a new one if not found.\n *\n * @example\n *   const myPlugin = createSlatePlugin<\n *     'myPlugin',\n *     MyOptions,\n *     MyApi,\n *     MyTransforms\n *   >({\n *     key: 'myPlugin',\n *     options: { someOption: true },\n *     transforms: { someTransform: () => {} },\n *   });\n *\n *   const extendedPlugin = myPlugin.extend({\n *     options: { anotherOption: false },\n *   });\n *\n *   const pluginWithNestedExtension = extendedPlugin.extendPlugin(\n *     nestedPlugin,\n *     {\n *       options: { nestedOption: true },\n *     }\n *   );\n *\n * @template K - The literal type of the plugin key.\n * @template O - The type of the plugin options.\n * @template A - The type of the plugin utilities.\n * @template T - The type of the plugin transforms.\n * @template S - The type of the plugin storage.\n * @param {Partial<SlatePlugin<K, O, A, T>>} config - The configuration object\n *   for the plugin.\n * @returns {SlatePlugin<K, O, A, T>} A new Plate plugin instance with the\n *   following properties and methods:\n *\n *   - All properties from the input config, merged with default values.\n *   - `configure`: A method to create a new plugin instance with updated options.\n *   - `extend`: A method to create a new plugin instance with additional\n *       configuration.\n *   - `extendPlugin`: A method to extend an existing plugin (including nested\n *       plugins) or add a new one if not found.\n */\nexport function createSlatePlugin<\n  K extends string = any,\n  O = {},\n  A = {},\n  T = {},\n>(\n  config:\n    | ((editor: SlateEditor) => SlatePluginConfig<K, O, A, T>)\n    | SlatePluginConfig<K, O, A, T> = {}\n): SlatePlugin<PluginConfig<K, O, A, T>> {\n  let baseConfig: Partial<SlatePlugin<PluginConfig<K, O, A, T>>>;\n  let initialExtension: any;\n\n  if (isFunction(config)) {\n    baseConfig = { key: '' as K };\n    initialExtension = (editor: any) => config(editor);\n  } else {\n    baseConfig = config as any;\n  }\n\n  const key = baseConfig.key ?? '';\n\n  const plugin = mergePlugins(\n    {\n      key,\n      __apiExtensions: [],\n      __configuration: null,\n      __extensions: initialExtension ? [initialExtension] : [],\n      __optionExtensions: [],\n      api: {},\n      dependencies: [],\n      editor: {},\n      inject: {},\n      node: { type: key },\n      options: {},\n      override: {},\n      parser: {},\n      parsers: {},\n      plugins: [],\n      priority: 100,\n      render: {},\n      shortcuts: {},\n      transforms: {},\n      handlers: {},\n    },\n    config\n  ) as unknown as SlatePlugin<PluginConfig<K, O, A, T>>;\n\n  plugin.configure = (config) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__configuration = (ctx) =>\n      isFunction(config) ? config(ctx as any) : config;\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.configurePlugin = (p, config) => {\n    const newPlugin = { ...plugin };\n\n    const configureNestedPlugin = (\n      plugins: SlatePlugins\n    ): { found: boolean; plugins: SlatePlugins } => {\n      let found = false;\n\n      const updatedPlugins = plugins.map((nestedPlugin) => {\n        if (nestedPlugin.key === p.key) {\n          found = true;\n\n          return createSlatePlugin({\n            ...nestedPlugin,\n            __configuration: (ctx: any) =>\n              isFunction(config) ? config(ctx) : config,\n          } as any);\n        }\n        if (nestedPlugin.plugins && nestedPlugin.plugins.length > 0) {\n          const result = configureNestedPlugin(nestedPlugin.plugins);\n\n          if (result.found) {\n            found = true;\n\n            return {\n              ...nestedPlugin,\n              plugins: result.plugins,\n            };\n          }\n        }\n\n        return nestedPlugin;\n      });\n\n      return { found, plugins: updatedPlugins };\n    };\n\n    const result = configureNestedPlugin(newPlugin.plugins as any);\n    newPlugin.plugins = result.plugins as any;\n\n    // We're not adding a new plugin if not found\n\n    return createSlatePlugin(newPlugin);\n  };\n\n  plugin.extendEditorApi = (extension) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__apiExtensions = [\n      ...(newPlugin.__apiExtensions as any),\n      { extension, isPluginSpecific: false },\n    ];\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.extendOptions = (extension) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__optionExtensions = [\n      ...(newPlugin.__optionExtensions as any),\n      extension,\n    ];\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.extendApi = (extension) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__apiExtensions = [\n      ...(newPlugin.__apiExtensions as any),\n      { extension, isPluginSpecific: true },\n    ];\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.extendEditorTransforms = (extension) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__apiExtensions = [\n      ...(newPlugin.__apiExtensions as any),\n      { extension, isPluginSpecific: false, isTransform: true },\n    ];\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.extendTransforms = (extension) => {\n    const newPlugin = { ...plugin };\n    newPlugin.__apiExtensions = [\n      ...(newPlugin.__apiExtensions as any),\n      { extension, isPluginSpecific: true, isTransform: true },\n    ];\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.extend = (extendConfig) => {\n    let newPlugin = { ...plugin };\n\n    if (isFunction(extendConfig)) {\n      newPlugin.__extensions = [\n        ...(newPlugin.__extensions as any),\n        extendConfig,\n      ];\n    } else {\n      newPlugin = mergePlugins(newPlugin, extendConfig as any);\n    }\n\n    return createSlatePlugin(newPlugin) as any;\n  };\n\n  plugin.clone = () => mergePlugins(plugin);\n\n  plugin.extendPlugin = (p, extendConfig) => {\n    const newPlugin = { ...plugin };\n\n    const extendNestedPlugin = (\n      plugins: SlatePlugins\n    ): { found: boolean; plugins: SlatePlugins } => {\n      let found = false;\n      const updatedPlugins = plugins.map((nestedPlugin) => {\n        if (nestedPlugin.key === p.key) {\n          found = true;\n\n          return createSlatePlugin({\n            ...nestedPlugin,\n            __extensions: [\n              ...(nestedPlugin.__extensions as any),\n              (ctx: any) =>\n                isFunction(extendConfig) ? extendConfig(ctx) : extendConfig,\n            ],\n          } as any);\n        }\n        if (nestedPlugin.plugins && nestedPlugin.plugins.length > 0) {\n          const result = extendNestedPlugin(nestedPlugin.plugins);\n\n          if (result.found) {\n            found = true;\n\n            return {\n              ...nestedPlugin,\n              plugins: result.plugins,\n            };\n          }\n        }\n\n        return nestedPlugin;\n      });\n\n      return { found, plugins: updatedPlugins };\n    };\n\n    const result = extendNestedPlugin(newPlugin.plugins as any);\n    newPlugin.plugins = result.plugins as any;\n\n    // If the plugin wasn't found at any level, add it at the top level\n    if (!result.found) {\n      newPlugin.plugins.push(\n        createSlatePlugin({\n          key: p.key,\n          __extensions: [\n            (ctx: any) =>\n              isFunction(extendConfig)\n                ? extendConfig(ctx as any)\n                : (extendConfig as any),\n          ],\n        } as any)\n      );\n    }\n\n    return createSlatePlugin(newPlugin);\n  };\n\n  return plugin;\n}\n\n/**\n * Explicitly typed version of `createSlatePlugin`.\n *\n * @remarks\n *   While `createSlatePlugin` uses type inference, this function requires an\n *   explicit type parameter. Use this when you need precise control over the\n *   plugin's type structure or when type inference doesn't provide the desired\n *   result.\n */\nexport function createTSlatePlugin<C extends AnyPluginConfig = PluginConfig>(\n  config:\n    | ((editor: SlateEditor) => TSlatePluginConfig<C>)\n    | TSlatePluginConfig<C> = {}\n): SlatePlugin<C> {\n  return createSlatePlugin(config as any) as any;\n}\n","import type { Path } from 'slate';\n\nimport {\n  type NodeOf,\n  type QueryNodeOptions,\n  type TNode,\n  type TNodeEntry,\n  isAncestor,\n  queryNode,\n} from '@udecode/slate';\n\nexport interface ApplyDeepToNodesOptions<N extends TNode> {\n  // Function to call on each node following the query.\n  apply: (\n    node: NodeOf<N>,\n    source: (() => Record<string, any>) | Record<string, any>\n  ) => void;\n  // The destination node object.\n  node: N;\n  // The source object. Can be a factory.\n  source: (() => Record<string, any>) | Record<string, any>;\n  path?: Path;\n  // Query to filter the nodes.\n  query?: QueryNodeOptions;\n}\n\n/** Recursively apply an operation to children nodes with a query. */\nexport const applyDeepToNodes = <N extends TNode>({\n  apply,\n  node,\n  path = [],\n  query,\n  source,\n}: ApplyDeepToNodesOptions<N>) => {\n  const entry: TNodeEntry<N> = [node, path];\n\n  if (queryNode<N>(entry, query)) {\n    if (source instanceof Function) {\n      apply(node, source());\n    } else {\n      apply(node, source);\n    }\n  }\n  if (!isAncestor(node)) return;\n\n  node.children.forEach((child, index) => {\n    applyDeepToNodes({\n      apply,\n      node: child as any,\n      path: path.concat([index]),\n      query,\n      source,\n    });\n  });\n};\n","import type { SlateEditor } from '../editor';\nimport type { AnyEditorPlugin, SlatePlugins } from '../plugin/SlatePlugin';\n\n/**\n * Get all plugins having a defined `inject.plugins[plugin.key]`. It includes\n * `plugin` itself.\n */\nexport const getInjectedPlugins = (\n  editor: SlateEditor,\n  plugin: AnyEditorPlugin\n): Partial<AnyEditorPlugin>[] => {\n  const injectedPlugins: SlatePlugins = [];\n\n  [...editor.pluginList].reverse().forEach((p) => {\n    const injectedPlugin = p.inject.plugins?.[plugin.key];\n\n    if (injectedPlugin) injectedPlugins.push(injectedPlugin as any);\n  });\n\n  return [plugin, ...injectedPlugins];\n};\n","import type { SlateEditor } from '../editor';\n\n/** Get plugin keys by types */\nexport const getKeysByTypes = (\n  editor: SlateEditor,\n  types: string[]\n): string[] => {\n  return Object.values(editor.plugins)\n    .filter((plugin) => types.includes(plugin.node.type))\n    .map((plugin) => plugin.key);\n};\n\n/** Get plugin key by type */\nexport const getKeyByType = (editor: SlateEditor, type: string): string => {\n  const plugin = Object.values(editor.plugins).find(\n    (plugin) => plugin.node.type === type\n  );\n\n  return plugin?.key ?? type;\n};\n","import { IS_APPLE } from '@udecode/utils';\nimport { type KeyboardEventLike, isKeyHotkey } from 'is-hotkey';\n\nexport { isHotkey } from 'is-hotkey';\n\n/** Hotkey mappings for each platform. */\nconst HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  insertSoftBreak: 'shift+enter',\n  italic: 'mod+i',\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  splitBlock: 'enter',\n  tab: 'tab',\n  undo: 'mod+z',\n  untab: 'shift+tab',\n};\n\nconst APPLE_HOTKEYS = {\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t',\n};\n\nconst WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z'],\n};\n\n/** Create a platform-aware hotkey checker. */\n\nexport const createHotkey = (key: string) => {\n  const generic = (HOTKEYS as any)[key];\n  const apple = (APPLE_HOTKEYS as any)[key];\n  const windows = (WINDOWS_HOTKEYS as any)[key];\n  const isGeneric = generic && isKeyHotkey(generic);\n  const isApple = apple && isKeyHotkey(apple);\n  const isWindows = windows && isKeyHotkey(windows);\n\n  return (event: KeyboardEventLike) => {\n    if (isGeneric?.(event)) return true;\n    if (IS_APPLE && isApple?.(event)) return true;\n    if (!IS_APPLE && isWindows?.(event)) return true;\n\n    return false;\n  };\n};\n\nexport const Hotkeys = {\n  isBold: createHotkey('bold'),\n  isCompose: createHotkey('compose'),\n  isDeleteBackward: createHotkey('deleteBackward'),\n  isDeleteForward: createHotkey('deleteForward'),\n  isDeleteLineBackward: createHotkey('deleteLineBackward'),\n  isDeleteLineForward: createHotkey('deleteLineForward'),\n  isDeleteWordBackward: createHotkey('deleteWordBackward'),\n  isDeleteWordForward: createHotkey('deleteWordForward'),\n  isExtendBackward: createHotkey('extendBackward'),\n  isExtendForward: createHotkey('extendForward'),\n  isExtendLineBackward: createHotkey('extendLineBackward'),\n  isExtendLineForward: createHotkey('extendLineForward'),\n  isItalic: createHotkey('italic'),\n  isMoveBackward: createHotkey('moveBackward'),\n  isMoveForward: createHotkey('moveForward'),\n  isMoveLineBackward: createHotkey('moveLineBackward'),\n  isMoveLineForward: createHotkey('moveLineForward'),\n  isMoveWordBackward: createHotkey('moveWordBackward'),\n  isMoveWordForward: createHotkey('moveWordForward'),\n  isRedo: createHotkey('redo'),\n  isSoftBreak: createHotkey('insertSoftBreak'),\n  isSplitBlock: createHotkey('splitBlock'),\n  isTransposeCharacter: createHotkey('transposeCharacter'),\n  isUndo: createHotkey('undo'),\n};\n","import type { TNode } from '@udecode/slate';\n\nimport merge from 'lodash/merge.js';\n\nimport {\n  type ApplyDeepToNodesOptions,\n  applyDeepToNodes,\n} from './applyDeepToNodes';\n\n/** Recursively merge a source object to children nodes with a query. */\nexport const mergeDeepToNodes = <N extends TNode>(\n  options: Omit<ApplyDeepToNodesOptions<N>, 'apply'>\n) => {\n  applyDeepToNodes({ ...options, apply: merge });\n};\n","import {\n  type TDescendant,\n  type TEditor,\n  isElement,\n  isText,\n} from '@udecode/slate';\n\nimport type { SlateEditor } from '../editor';\n\nimport { BaseParagraphPlugin } from '../plugins';\n\nconst isInlineNode =\n  (editor: Pick<TEditor, 'isInline'>) => (node: TDescendant) =>\n    isText(node) || (isElement(node) && editor.isInline(node));\n\nconst makeBlockLazy = (type: string) => (): TDescendant => ({\n  children: [],\n  type,\n});\n\nconst hasDifferentChildNodes = (\n  descendants: TDescendant[],\n  isInline: (node: TDescendant) => boolean\n): boolean => {\n  return descendants.some((descendant, index, arr) => {\n    const prevDescendant = arr[index - 1];\n\n    if (index !== 0) {\n      return isInline(descendant) !== isInline(prevDescendant);\n    }\n\n    return false;\n  });\n};\n\n/**\n * Handles 3rd constraint: \"Block nodes can only contain other blocks, or inline\n * and text nodes.\"\n */\nconst normalizeDifferentNodeTypes = (\n  descendants: TDescendant[],\n  isInline: (node: TDescendant) => boolean,\n  makeDefaultBlock: () => TDescendant\n): TDescendant[] => {\n  const hasDifferentNodes = hasDifferentChildNodes(descendants, isInline);\n\n  const { fragment } = descendants.reduce(\n    (memo, node) => {\n      if (hasDifferentNodes && isInline(node)) {\n        let block = memo.precedingBlock;\n\n        if (!block) {\n          block = makeDefaultBlock();\n          memo.precedingBlock = block;\n          memo.fragment.push(block);\n        }\n\n        (block.children as TDescendant[]).push(node);\n      } else {\n        memo.fragment.push(node);\n        memo.precedingBlock = null;\n      }\n\n      return memo;\n    },\n    {\n      fragment: [] as TDescendant[],\n      precedingBlock: null as TDescendant | null,\n    }\n  );\n\n  return fragment;\n};\n\n/**\n * Handles 1st constraint: \"All Element nodes must contain at least one Text\n * descendant.\"\n */\nconst normalizeEmptyChildren = (descendants: TDescendant[]): TDescendant[] => {\n  if (descendants.length === 0) {\n    return [{ text: '' } as TDescendant];\n  }\n\n  return descendants;\n};\n\nconst normalize = (\n  descendants: TDescendant[],\n  isInline: (node: TDescendant) => boolean,\n  makeDefaultBlock: () => TDescendant\n): TDescendant[] => {\n  descendants = normalizeEmptyChildren(descendants);\n  descendants = normalizeDifferentNodeTypes(\n    descendants,\n    isInline,\n    makeDefaultBlock\n  );\n\n  descendants = descendants.map((node) => {\n    if (isElement(node)) {\n      return {\n        ...node,\n        children: normalize(\n          node.children as TDescendant[],\n          isInline,\n          makeDefaultBlock\n        ),\n      };\n    }\n\n    return node;\n  });\n\n  return descendants;\n};\n\n/** Normalize the descendants to a valid document fragment. */\nexport const normalizeDescendantsToDocumentFragment = (\n  editor: SlateEditor,\n  { descendants }: { descendants: TDescendant[] }\n): TDescendant[] => {\n  const isInline = isInlineNode(editor);\n  const defaultType = editor.getType(BaseParagraphPlugin);\n  const makeDefaultBlock = makeBlockLazy(defaultType);\n\n  return normalize(descendants, isInline, makeDefaultBlock as any);\n};\n","import type { SlateEditor } from '../editor';\nimport type { AnyPluginConfig, WithRequiredKey } from './BasePlugin';\nimport type {\n  InferConfig,\n  SlatePlugin,\n  SlatePluginContext,\n} from './SlatePlugin';\n\nexport function getEditorPlugin<\n  P extends AnyPluginConfig | SlatePlugin<AnyPluginConfig>,\n>(\n  editor: SlateEditor,\n  p: WithRequiredKey<P>\n): SlatePluginContext<InferConfig<P> extends never ? P : InferConfig<P>> {\n  const plugin = editor.getPlugin(p) as any;\n\n  return {\n    api: editor.api,\n    editor,\n    getOption: (key: any, ...args: any) =>\n      editor.getOption(plugin, key, ...args),\n    getOptions: () => editor.getOptions(plugin),\n    plugin: plugin as any,\n    setOption: ((keyOrOptions: any, value: any) =>\n      editor.setOption(plugin, keyOrOptions, value)) as any,\n    setOptions: ((options: any) => editor.setOptions(plugin, options)) as any,\n    tf: editor.transforms,\n    type: plugin.node.type,\n  };\n}\n","import { createSlatePlugin } from '../plugin';\n\n/**\n * Enables support for deserializing inserted content from Slate Ast format to\n * Slate format while apply a small bug fix.\n */\nexport const AstPlugin = createSlatePlugin({\n  key: 'ast',\n  parser: {\n    deserialize: ({ data }) => {\n      const decoded = decodeURIComponent(window.atob(data));\n      let parsed;\n\n      try {\n        parsed = JSON.parse(decoded);\n      } catch {\n        /* empty */\n      }\n\n      return parsed;\n    },\n    format: 'application/x-slate-fragment',\n  },\n});\n","import { createSlatePlugin } from '../plugin';\n\n/**\n * Placeholder plugin for DOM interaction, that could be replaced with\n * ReactPlugin.\n */\nexport const DOMPlugin = createSlatePlugin({\n  key: 'dom',\n});\n","import { withHistory } from 'slate-history';\n\nimport type { SlateEditor } from '../editor';\n\nimport { type ExtendEditor, createSlatePlugin } from '../plugin';\n\nexport const withPlateHistory: ExtendEditor = ({ editor }) =>\n  withHistory(editor as any) as any as SlateEditor;\n\n/** @see {@link withHistory} */\nexport const HistoryPlugin = createSlatePlugin({\n  key: 'history',\n  extendEditor: withPlateHistory,\n});\n","import { type ExtendEditor, createSlatePlugin } from '../plugin';\n\n/**\n * Merge and register all the inline types and void types from the plugins and\n * options, using `editor.isInline`, `editor.markableVoid` and `editor.isVoid`\n */\nexport const withInlineVoid: ExtendEditor = ({ editor }) => {\n  const { isInline, isVoid, markableVoid } = editor;\n\n  const voidTypes: string[] = [];\n  const inlineTypes: string[] = [];\n  const markableVoidTypes: string[] = [];\n\n  editor.pluginList.forEach((plugin) => {\n    if (plugin.node.isInline) {\n      inlineTypes.push(plugin.node.type);\n    }\n    if (plugin.node.isVoid) {\n      voidTypes.push(plugin.node.type);\n    }\n    if (plugin.node.isMarkableVoid) {\n      markableVoidTypes.push(plugin.node.type);\n    }\n  });\n\n  editor.isInline = (element) => {\n    return inlineTypes.includes(element.type) ? true : isInline(element);\n  };\n\n  editor.isVoid = (element) => {\n    return voidTypes.includes(element.type) ? true : isVoid(element);\n  };\n\n  editor.markableVoid = (element) => {\n    return markableVoidTypes.includes(element.type)\n      ? true\n      : markableVoid(element);\n  };\n\n  return editor;\n};\n\n/** @see {@link withInlineVoid} */\nexport const InlineVoidPlugin = createSlatePlugin({\n  key: 'inlineVoid',\n  extendEditor: withInlineVoid,\n});\n","import {\n  type ExtendEditor,\n  createSlatePlugin,\n  getEditorPlugin,\n} from '../plugin';\nimport {\n  getInjectedPlugins,\n  pipeInsertDataQuery,\n  pipeInsertFragment,\n  pipeTransformData,\n  pipeTransformFragment,\n} from '../utils';\n\nexport const withParser: ExtendEditor = ({ editor }) => {\n  const { insertData } = editor;\n\n  editor.insertData = (dataTransfer) => {\n    const inserted = [...editor.pluginList].reverse().some((plugin) => {\n      const parser = plugin.parser;\n\n      if (!parser) return false;\n\n      const injectedPlugins = getInjectedPlugins(editor, plugin);\n      const { deserialize, format, mimeTypes } = parser;\n\n      if (!format) return false;\n\n      // Handle both string and string[] formats\n      const formats = Array.isArray(format) ? format : [format];\n      const mimeTypeList =\n        mimeTypes ||\n        formats.map((fmt) => (fmt.includes('/') ? fmt : `text/${fmt}`));\n\n      for (const mimeType of mimeTypeList) {\n        let data = dataTransfer.getData(mimeType);\n\n        if (!data) continue;\n        if (\n          !pipeInsertDataQuery(editor, injectedPlugins, {\n            data,\n            dataTransfer,\n          })\n        ) {\n          continue;\n        }\n\n        data = pipeTransformData(editor, injectedPlugins, {\n          data,\n          dataTransfer,\n        });\n\n        let fragment = deserialize?.({\n          ...getEditorPlugin(editor, plugin),\n          data,\n          dataTransfer,\n        });\n\n        if (!fragment?.length) continue;\n\n        fragment = pipeTransformFragment(editor, injectedPlugins, {\n          data,\n          dataTransfer,\n          fragment,\n        });\n\n        if (fragment.length === 0) continue;\n\n        pipeInsertFragment(editor, injectedPlugins, {\n          data,\n          dataTransfer,\n          fragment,\n        });\n\n        return true;\n      }\n\n      return false;\n    });\n\n    if (inserted) return;\n\n    insertData(dataTransfer);\n  };\n\n  return editor;\n};\n\nexport const ParserPlugin = createSlatePlugin({\n  key: 'parser',\n  extendEditor: withParser,\n});\n","import type { DebugConfig } from '../getCorePlugins';\n\nimport { createTSlatePlugin } from '../../plugin';\n\nexport type DebugErrorType =\n  | (string & {})\n  | 'DEFAULT'\n  | 'OPTION_UNDEFINED'\n  | 'OVERRIDE_MISSING'\n  | 'PLUGIN_DEPENDENCY_MISSING'\n  | 'PLUGIN_MISSING'\n  | 'USE_CREATE_PLUGIN'\n  | 'USE_ELEMENT_CONTEXT';\n\nexport class PlateError extends Error {\n  constructor(\n    message: string,\n    public type: DebugErrorType = 'DEFAULT'\n  ) {\n    super(`[${type}] ${message}`);\n    this.name = 'PlateError';\n  }\n}\n\nexport type LogLevel = 'error' | 'info' | 'log' | 'warn';\n\nexport const DebugPlugin = createTSlatePlugin<DebugConfig>({\n  key: 'debug',\n  options: {\n    isProduction: process.env.NODE_ENV === 'production',\n    logLevel:\n      process.env.NODE_ENV === 'production' ? 'error' : ('log' as LogLevel),\n    logger: {\n      error: (message, type, details) =>\n        console.error(`${type ? `[${type}] ` : ''}${message}`, details),\n      info: (message, type, details) =>\n        console.info(`${type ? `[${type}] ` : ''}${message}`, details),\n      log: (message, type, details) =>\n        console.log(`${type ? `[${type}] ` : ''}${message}`, details),\n      warn: (message, type, details) =>\n        console.warn(`${type ? `[${type}] ` : ''}${message}`, details),\n    },\n    throwErrors: true,\n  },\n}).extendEditorApi<DebugConfig['api']>(({ getOptions }) => {\n  const logLevels: LogLevel[] = ['error', 'warn', 'info', 'log'];\n\n  const log = (\n    level: LogLevel,\n    message: any,\n    type?: DebugErrorType,\n    details?: any\n  ) => {\n    const options = getOptions();\n\n    if (options.isProduction && level === 'log') return;\n    if (logLevels.indexOf(level) <= logLevels.indexOf(options.logLevel!)) {\n      if (level === 'error' && options.throwErrors) {\n        const error =\n          message instanceof Error ? message : new PlateError(message, type);\n\n        throw error;\n      } else {\n        options.logger[level]?.(message, type, details);\n      }\n    }\n  };\n\n  return {\n    debug: {\n      error: (message, type, details) => log('error', message, type, details),\n      info: (message, type, details) => log('info', message, type, details),\n      log: (message, type, details) => log('log', message, type, details),\n      warn: (message, type, details) => log('warn', message, type, details),\n    },\n  };\n});\n","import type { TDescendant, TElement, TRange, Value } from '@udecode/slate';\nimport type { Path } from 'slate';\n\nimport {\n  isSelectionAtBlockStart,\n  removeSelectionMark,\n  replaceNodeChildren,\n  toggleMark,\n} from '@udecode/slate-utils';\nimport { type OmitFirst, bindFirst } from '@udecode/utils';\n\nimport {\n  type ExtendEditor,\n  type PluginConfig,\n  createTSlatePlugin,\n} from '../../plugin';\nimport { resetEditor, toggleBlock } from '../../transforms';\nimport { BaseParagraphPlugin } from '../paragraph';\n\nexport type SlateNextConfig = PluginConfig<\n  'slateNext',\n  {},\n  {\n    create: {\n      block: (node?: Partial<TElement>, path?: Path) => TElement;\n      value: () => Value;\n    };\n    reset: () => void;\n  },\n  {\n    toggle: {\n      block: OmitFirst<typeof toggleBlock>;\n      mark: OmitFirst<typeof toggleMark>;\n    };\n  }\n>;\n\nexport const withSlateNext: ExtendEditor<SlateNextConfig> = ({ editor }) => {\n  const { apply, deleteBackward, deleteForward, deleteFragment } = editor;\n\n  editor.prevSelection = null;\n  editor.currentKeyboardEvent = null;\n\n  const resetMarks = () => {\n    if (isSelectionAtBlockStart(editor)) {\n      removeSelectionMark(editor);\n    }\n  };\n\n  editor.deleteBackward = (unit) => {\n    deleteBackward(unit);\n\n    resetMarks();\n  };\n\n  editor.deleteForward = (unit) => {\n    deleteForward(unit);\n\n    resetMarks();\n  };\n\n  editor.deleteFragment = (direction) => {\n    deleteFragment(direction);\n\n    resetMarks();\n  };\n\n  editor.apply = (operation) => {\n    if (operation.type === 'set_selection') {\n      const { properties } = operation;\n\n      editor.prevSelection = properties as TRange | null;\n\n      apply(operation);\n\n      editor.currentKeyboardEvent = null;\n\n      return;\n    }\n\n    apply(operation);\n  };\n\n  return editor;\n};\n\n/** Opinionated extension of slate default behavior. */\nexport const SlateNextPlugin = createTSlatePlugin<SlateNextConfig>({\n  key: 'slateNext',\n  extendEditor: withSlateNext,\n})\n  .extendEditorApi(({ editor }) => ({\n    create: {\n      /** Default block factory. */\n      block: (node?: Partial<TElement>, _path?: Path): TElement => ({\n        children: [{ text: '' }],\n        type: editor.getType(BaseParagraphPlugin),\n        ...node,\n      }),\n    },\n  }))\n  .extendEditorApi(({ api }) => ({\n    create: {\n      /** Editor children factory. */\n      value: (): Value => [api.create.block()],\n    },\n  }))\n  .extendEditorTransforms(({ editor }) => ({\n    reset: () => {\n      resetEditor(editor);\n    },\n    setValue: <V extends Value>(value?: V | string) => {\n      let children: TDescendant[] = value as any;\n\n      if (typeof value === 'string') {\n        children = editor.api.html.deserialize({\n          element: value,\n        });\n      } else if (!value || value.length === 0) {\n        children = editor.api.create.value();\n      }\n\n      replaceNodeChildren(editor, {\n        at: [],\n        nodes: children,\n      });\n    },\n    toggle: {\n      block: bindFirst(toggleBlock, editor),\n      mark: bindFirst(toggleMark, editor),\n    },\n  }));\n","import type { ElementOf } from '@udecode/slate';\n\nimport {\n  type ReplaceNodeChildrenOptions,\n  replaceNodeChildren,\n} from '@udecode/slate-utils';\n\nimport type { SlateEditor } from '../editor';\n\n/** Replace editor children by default block. */\nexport const resetEditorChildren = <E extends SlateEditor = SlateEditor>(\n  editor: E,\n  options?: Omit<ReplaceNodeChildrenOptions<ElementOf<E>, E>, 'at' | 'nodes'>\n) => {\n  replaceNodeChildren<ElementOf<E>>(editor, {\n    at: [],\n    nodes: editor.api.create.value(),\n    ...options,\n  } as any);\n};\n","import type { SlateEditor } from '../editor';\n\nimport { resetEditorChildren } from './resetEditorChildren';\n\nexport const resetEditor = (editor: SlateEditor) => {\n  resetEditorChildren(editor);\n\n  editor.history.undos = [];\n  editor.history.redos = [];\n  editor.operations = [];\n};\n","import {\n  type GetNodeEntriesOptions,\n  type TElement,\n  someNode,\n} from '@udecode/slate';\n\nimport type { SlateEditor } from '../editor';\n\nimport { type ToggleBlockOptions, BaseParagraphPlugin } from '../plugins';\n\n/**\n * Toggle the type of the selected block. If the block is not of the specified\n * type, it will be changed to that type. Otherwise, it will be changed to the\n * default type.\n */\nexport const toggleBlock = <E extends SlateEditor = SlateEditor>(\n  editor: E,\n  options: ToggleBlockOptions,\n  editorNodesOptions?: Omit<GetNodeEntriesOptions<E>, 'match'>\n) => {\n  const { defaultType = editor.getType(BaseParagraphPlugin), type } = options;\n\n  const at = editorNodesOptions?.at ?? editor.selection;\n\n  if (!type || !at) return;\n\n  const isActive = someNode(editor, {\n    ...editorNodesOptions,\n    match: {\n      type: type,\n    },\n  });\n\n  if (isActive && type === defaultType) return;\n\n  editor.setNodes<TElement>(\n    {\n      type: isActive ? defaultType : type,\n    },\n    { at: at as any }\n  );\n};\n","import { type PluginConfig, createSlatePlugin } from '../../plugin';\n\nexport type ParagraphConfig = PluginConfig<'p'>;\n\nexport const BaseParagraphPlugin = createSlatePlugin({\n  key: 'p',\n  node: { isElement: true },\n  parsers: {\n    html: {\n      deserializer: {\n        query: ({ element }) => element.style.fontFamily !== 'Consolas',\n        rules: [\n          {\n            validNodeName: 'P',\n          },\n        ],\n      },\n    },\n  },\n});\n","import { bindFirst } from '@udecode/utils';\n\nimport { createSlatePlugin } from '../../plugin';\nimport { deserializeHtml, parseHtmlDocument } from './utils';\n\n/**\n * Enables support for deserializing inserted content from HTML format to Slate\n * format.\n */\nexport const HtmlPlugin = createSlatePlugin({\n  key: 'html',\n})\n  .extendApi(({ editor }) => ({\n    deserialize: bindFirst(deserializeHtml, editor),\n  }))\n  .extend({\n    parser: {\n      deserialize: ({ api, data }) => {\n        const document = parseHtmlDocument(data);\n\n        return api.html.deserialize({\n          element: document.body,\n        });\n      },\n      format: 'text/html',\n    },\n  });\n","export const isHtmlElement = (node: Node): node is Element =>\n  node.nodeType === Node.ELEMENT_NODE;\n","export const isHtmlText = (node: Node): node is Text =>\n  node.nodeType === Node.TEXT_NODE;\n","/**\n * # Methodology\n *\n * ## Step 1. Get the list of all standard tag names\n *\n * Go to https://developer.mozilla.org/en-US/docs/Web/HTML/Element and run the\n * following in the console to generate a JSON array of tag names:\n *\n * ```js\n * JSON.stringify(\n *   Array.from(document.querySelectorAll('article table td:first-child'))\n *     .map((td) => {\n *       const body = document.createElement('body');\n *       body.innerHTML = td.textContent;\n *       return body.firstChild?.tagName;\n *     })\n *     .filter((tagName) => tagName)\n * );\n * ```\n *\n * Output (as of 2023-11-06):\n *\n * ```json\n * '[\"BASE\",\"LINK\",\"META\",\"STYLE\",\"TITLE\",\"ADDRESS\",\"ARTICLE\",\"ASIDE\",\"FOOTER\",\"HEADER\",\"H1\",\"HGROUP\",\"MAIN\",\"NAV\",\"SECTION\",\"SEARCH\",\"BLOCKQUOTE\",\"DD\",\"DIV\",\"DL\",\"DT\",\"FIGCAPTION\",\"FIGURE\",\"HR\",\"LI\",\"MENU\",\"OL\",\"P\",\"PRE\",\"UL\",\"A\",\"ABBR\",\"B\",\"BDI\",\"BDO\",\"BR\",\"CITE\",\"CODE\",\"DATA\",\"DFN\",\"EM\",\"I\",\"KBD\",\"MARK\",\"Q\",\"RP\",\"RT\",\"RUBY\",\"S\",\"SAMP\",\"SMALL\",\"SPAN\",\"STRONG\",\"SUB\",\"SUP\",\"TIME\",\"U\",\"VAR\",\"WBR\",\"AREA\",\"AUDIO\",\"IMG\",\"MAP\",\"TRACK\",\"VIDEO\",\"EMBED\",\"IFRAME\",\"OBJECT\",\"PICTURE\",\"PORTAL\",\"SOURCE\",\"svg\",\"math\",\"CANVAS\",\"NOSCRIPT\",\"SCRIPT\",\"DEL\",\"INS\",\"TABLE\",\"BUTTON\",\"DATALIST\",\"FIELDSET\",\"FORM\",\"INPUT\",\"LABEL\",\"LEGEND\",\"METER\",\"OPTGROUP\",\"OPTION\",\"OUTPUT\",\"PROGRESS\",\"SELECT\",\"TEXTAREA\",\"DETAILS\",\"DIALOG\",\"SUMMARY\",\"SLOT\",\"TEMPLATE\",\"ACRONYM\",\"BIG\",\"CENTER\",\"CONTENT\",\"DIR\",\"FONT\",\"IMG\",\"MARQUEE\",\"MENUITEM\",\"NOBR\",\"NOEMBED\",\"NOFRAMES\",\"PARAM\",\"PLAINTEXT\",\"RB\",\"RTC\",\"SHADOW\",\"STRIKE\",\"TT\",\"XMP\"]'\n * ```\n *\n * ## Step 2. For each tag name, determine the default browser style\n *\n * Open an empty HTML file in the browser and run the following in the console:\n *\n * ```js\n * const tagNames = JSON.parse(<JSON string from step 1>);\n *\n * JSON.stringify(\n *   tagNames.filter((tagName) => {\n *     const element = document.createElement(tagName);\n *     document.body.appendChild(element);\n *     const display = window.getComputedStyle(element).display;\n *     element.remove();\n *     return display.startsWith('inline');\n *   })\n * );\n * ```\n *\n * Place the result in the array below (accurate as of 2023-11-06).\n */\n\nexport const inlineTagNames = new Set([\n  'A',\n  'ABBR',\n  'ACRONYM',\n  'B',\n  'BDI',\n  'BDO',\n  'BIG',\n  'BR',\n  'BUTTON',\n  'CANVAS',\n  'CITE',\n  'CODE',\n  'CONTENT',\n  'DATA',\n  'DEL',\n  'DFN',\n  'EM',\n  'EMBED',\n  'FONT',\n  'I',\n  'IFRAME',\n  'IMG',\n  'IMG',\n  'INPUT',\n  'INS',\n  'KBD',\n  'LABEL',\n  'MAP',\n  'MARK',\n  'MARQUEE',\n  'MENUITEM',\n  'METER',\n  'NOBR',\n  'OBJECT',\n  'OUTPUT',\n  'PICTURE',\n  'PORTAL',\n  'PROGRESS',\n  'Q',\n  'S',\n  'SAMP',\n  'SELECT',\n  'SHADOW',\n  'SMALL',\n  'SOURCE',\n  'SPAN',\n  'STRIKE',\n  'STRONG',\n  'SUB',\n  'SUP',\n  'TEXTAREA',\n  'TIME',\n  'TRACK',\n  'TT',\n  'U',\n  'VAR',\n  'VIDEO',\n  'WBR',\n  'math',\n  'svg',\n]);\n","import { inlineTagNames } from './inlineTagNames';\nimport { isHtmlElement } from './isHtmlElement';\n\nexport const isHtmlInlineElement = (node: Node): boolean => {\n  if (!isHtmlElement(node)) return false;\n\n  const element = node as HTMLElement;\n\n  const tagNameIsInline = inlineTagNames.has(element.tagName);\n\n  /**\n   * Valid display values include 'inline flow'. We only care about the first\n   * part.\n   */\n  const displayProperty = element.style.display.split(' ')[0];\n\n  if (displayProperty === '') {\n    return tagNameIsInline;\n  }\n  if (displayProperty.startsWith('inline')) {\n    return true;\n  }\n  if (displayProperty === 'inherit' && element.parentElement) {\n    return isHtmlInlineElement(element.parentElement);\n  }\n  /**\n   * Handle all special values manually, so that any unhandled values can be\n   * assumed to be block.\n   *\n   * Note: Ideally, content inside `display: none` elements should not be\n   * parsed. However, if such elements are parsed, it's best for their inline or\n   * block status to be left unchanged.\n   */\n  if (\n    ['contents', 'initial', 'none', 'revert', 'revert-layer', 'unset'].includes(\n      displayProperty\n    )\n  ) {\n    return tagNameIsInline;\n  }\n\n  return false;\n};\n","import { isHtmlElement } from './isHtmlElement';\nimport { isHtmlInlineElement } from './isHtmlInlineElement';\n\nexport const isHtmlBlockElement = (node: Node): boolean => {\n  if (!isHtmlElement(node)) return false;\n\n  const element = node as HTMLElement;\n\n  return !isHtmlInlineElement(element);\n};\n","import type { TrimEndRule, TrimStartRule } from './types';\n\nexport const collapseString = (\n  text: string,\n  {\n    shouldCollapseWhiteSpace = true,\n    trimEnd = 'collapse',\n    trimStart = 'collapse',\n    whiteSpaceIncludesNewlines = true,\n  }: {\n    shouldCollapseWhiteSpace?: boolean;\n    trimEnd?: TrimEndRule;\n    trimStart?: TrimStartRule;\n    whiteSpaceIncludesNewlines?: boolean;\n  } = {}\n) => {\n  if (trimStart === 'all') {\n    text = text.replace(/^\\s+/, '');\n  }\n  if (trimEnd === 'single-newline') {\n    // Strip at most one newline from the end\n    text = text.replace(/\\n$/, '');\n  }\n  if (shouldCollapseWhiteSpace) {\n    if (whiteSpaceIncludesNewlines) {\n      text = text.replaceAll(/\\s+/g, ' ');\n    } else {\n      // Collapse horizontal whitespace\n      text = text.replaceAll(/[^\\S\\n\\r]+/g, ' ');\n\n      /**\n       * Trim horizontal whitespace from the start and end of lines (behavior of\n       * pre-line).\n       */\n      text = text.replaceAll(/^[^\\S\\n\\r]+/gm, '');\n      text = text.replaceAll(/[^\\S\\n\\r]+$/gm, '');\n    }\n  }\n\n  return text;\n};\n","import { isHtmlBlockElement } from '../isHtmlBlockElement';\n\nexport const isLastNonEmptyTextOfInlineFormattingContext = (\n  initialText: Text\n): boolean => {\n  let currentNode: Node | null = initialText;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (currentNode.nextSibling) {\n      currentNode = currentNode.nextSibling;\n    } else {\n      // If there is no next sibling, ascend to the parent node\n      currentNode = currentNode.parentElement;\n\n      // If the parent node is a block, we've reached the end\n      if (currentNode && isHtmlBlockElement(currentNode)) {\n        return true;\n      }\n\n      // Otherwise, continue to the next sibling of the parent node\n      currentNode = currentNode?.nextSibling || null;\n    }\n    // If there's no next node, we've reached the end\n    if (!currentNode) {\n      return true;\n    }\n    // If the next node is a block, we've reached the end\n    if (isHtmlBlockElement(currentNode)) {\n      return true;\n    }\n    // If the next node is a non-empty text node, we're not at the end\n    if ((currentNode.textContent || '').length > 0) {\n      return false;\n    }\n\n    // Otherwise, continue to the next node\n  }\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nexport const upsertInlineFormattingContext = (\n  state: CollapseWhiteSpaceState\n) => {\n  if (state.inlineFormattingContext) {\n    state.inlineFormattingContext.atStart = false;\n  } else {\n    state.inlineFormattingContext = {\n      atStart: true,\n      lastHasTrailingWhiteSpace: false,\n    };\n  }\n};\n\nexport const endInlineFormattingContext = (state: CollapseWhiteSpaceState) => {\n  state.inlineFormattingContext = null;\n};\n","import type {\n  CollapseWhiteSpaceState,\n  TrimEndRule,\n  TrimStartRule,\n} from './types';\n\nimport { collapseString } from './collapseString';\nimport { isLastNonEmptyTextOfInlineFormattingContext } from './isLastNonEmptyTextOfInlineFormattingContext';\nimport { upsertInlineFormattingContext } from './stateTransforms';\n\nexport const collapseWhiteSpaceText = (\n  text: Text,\n  state: CollapseWhiteSpaceState\n) => {\n  const textContent = text.textContent || '';\n  const isWhiteSpaceOnly = textContent.trim() === '';\n\n  /**\n   * Do not start an inline formatting context with a text node containing only\n   * white space.\n   */\n  if (state.inlineFormattingContext || !isWhiteSpaceOnly) {\n    upsertInlineFormattingContext(state);\n  }\n\n  const { whiteSpaceRule } = state;\n\n  /**\n   * Note: Due to the way HTML strings are parsed in htmlStringToDOMNode, up to\n   * one newline is already trimmed from the start of text nodes inside <pre>\n   * elements. If we do so again here, we may remove too many newlines. This\n   * only applies to actual <pre> elements, not elements with the white-space\n   * CSS property.\n   */\n  const trimStart: TrimStartRule = (() => {\n    if (whiteSpaceRule !== 'normal') return 'collapse';\n    if (\n      !state.inlineFormattingContext ||\n      state.inlineFormattingContext.atStart ||\n      state.inlineFormattingContext.lastHasTrailingWhiteSpace\n    )\n      return 'all';\n\n    return 'collapse';\n  })();\n\n  const trimEnd: TrimEndRule = (() => {\n    if (whiteSpaceRule === 'normal') return 'collapse';\n    if (isLastNonEmptyTextOfInlineFormattingContext(text))\n      return 'single-newline';\n\n    return 'collapse';\n  })();\n\n  const shouldCollapseWhiteSpace: boolean = {\n    normal: true,\n    pre: false,\n    'pre-line': true,\n  }[whiteSpaceRule];\n\n  const whiteSpaceIncludesNewlines = whiteSpaceRule !== 'pre-line';\n\n  const collapsedTextContent = collapseString(textContent || '', {\n    shouldCollapseWhiteSpace,\n    trimEnd,\n    trimStart,\n    whiteSpaceIncludesNewlines,\n  });\n\n  if (state.inlineFormattingContext && shouldCollapseWhiteSpace) {\n    state.inlineFormattingContext.lastHasTrailingWhiteSpace =\n      collapsedTextContent.endsWith(' ');\n  }\n\n  text.textContent = collapsedTextContent;\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nimport { isHtmlElement } from '../isHtmlElement';\nimport { isHtmlText } from '../isHtmlText';\nimport { collapseWhiteSpaceChildren } from './collapseWhiteSpaceChildren';\nimport { collapseWhiteSpaceElement } from './collapseWhiteSpaceElement';\nimport { collapseWhiteSpaceText } from './collapseWhiteSpaceText';\n\nexport const collapseWhiteSpaceNode = (\n  node: Node,\n  state: CollapseWhiteSpaceState\n) => {\n  if (isHtmlElement(node)) {\n    collapseWhiteSpaceElement(node as HTMLElement, state);\n\n    return;\n  }\n  if (isHtmlText(node)) {\n    collapseWhiteSpaceText(node as Text, state);\n\n    return;\n  }\n\n  collapseWhiteSpaceChildren(node, state);\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nimport { collapseWhiteSpaceNode } from './collapseWhiteSpaceNode';\n\nexport const collapseWhiteSpaceChildren = (\n  node: Node,\n  state: CollapseWhiteSpaceState\n) => {\n  const childNodes = Array.from(node.childNodes);\n\n  for (const childNode of childNodes) {\n    collapseWhiteSpaceNode(childNode, state);\n  }\n};\n","import type { WhiteSpaceRule } from './types';\n\nexport const inferWhiteSpaceRule = (\n  element: HTMLElement\n): WhiteSpaceRule | null => {\n  const whiteSpaceProperty = element.style.whiteSpace;\n\n  switch (whiteSpaceProperty) {\n    case 'normal':\n    case 'nowrap': {\n      return 'normal';\n    }\n    case 'pre':\n    case 'pre-wrap':\n    case 'break-spaces': {\n      return 'pre';\n    }\n    case 'pre-line': {\n      return 'pre-line';\n    }\n  }\n\n  if (element.tagName === 'PRE') {\n    return 'pre';\n  }\n  if (whiteSpaceProperty === 'initial') {\n    return 'normal';\n  }\n\n  return null;\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nimport { isHtmlInlineElement } from '../isHtmlInlineElement';\nimport { collapseWhiteSpaceChildren } from './collapseWhiteSpaceChildren';\nimport { inferWhiteSpaceRule } from './inferWhiteSpaceRule';\nimport { endInlineFormattingContext } from './stateTransforms';\n\n/**\n * Note: We do not want to start an inline formatting context until we encounter\n * a text node.\n */\nexport const collapseWhiteSpaceElement = (\n  element: HTMLElement,\n  state: CollapseWhiteSpaceState\n) => {\n  const isInlineElement = isHtmlInlineElement(element);\n  const previousWhiteSpaceRule = state.whiteSpaceRule;\n  const inferredWhiteSpaceRule = inferWhiteSpaceRule(element);\n\n  if (inferredWhiteSpaceRule) {\n    state.whiteSpaceRule = inferredWhiteSpaceRule;\n  }\n  // End any existing inline formatting context\n  if (!isInlineElement) {\n    endInlineFormattingContext(state);\n  }\n\n  collapseWhiteSpaceChildren(element, state);\n\n  // Do not let inline formatting context break out of block elements\n  if (!isInlineElement) {\n    endInlineFormattingContext(state);\n  }\n\n  // Restore previous whiteSpaceRule\n  state.whiteSpaceRule = previousWhiteSpaceRule;\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nimport { collapseWhiteSpaceElement } from './collapseWhiteSpaceElement';\n\n// Entrypoint\nexport const collapseWhiteSpace = (element: HTMLElement) => {\n  const clonedElement = element.cloneNode(true) as HTMLElement;\n\n  // Mutable state object\n  const state: CollapseWhiteSpaceState = {\n    inlineFormattingContext: null,\n    whiteSpaceRule: 'normal',\n  };\n\n  collapseWhiteSpaceElement(clonedElement, state);\n\n  return clonedElement;\n};\n","import type { TDescendant } from '@udecode/slate';\n\nimport { jsx } from 'slate-hyperscript';\n\nimport type { SlateEditor } from '../../../editor';\n\nimport { deserializeHtmlNodeChildren } from './deserializeHtmlNodeChildren';\n\njsx;\n\n/** Deserialize HTML body element to Fragment. */\nexport const htmlBodyToFragment = (\n  editor: SlateEditor,\n  element: HTMLElement\n): TDescendant[] | undefined => {\n  if (element.nodeName === 'BODY') {\n    return jsx(\n      'fragment',\n      {},\n      deserializeHtmlNodeChildren(editor, element)\n    ) as TDescendant[];\n  }\n};\n","import type { SlateEditor } from '../../../editor';\nimport type { DeserializeHtmlChildren } from '../types';\n\nimport { deserializeHtmlNode } from './deserializeHtmlNode';\n\nexport const deserializeHtmlNodeChildren = (\n  editor: SlateEditor,\n  node: ChildNode | HTMLElement\n) =>\n  Array.from(node.childNodes).flatMap(\n    deserializeHtmlNode(editor)\n  ) as DeserializeHtmlChildren[];\n","/** Deserialize HTML to break line. */\nexport const htmlBrToNewLine = (node: ChildNode | HTMLElement) => {\n  if (node.nodeName === 'BR') {\n    return '\\n';\n  }\n};\n","import type { TDescendant } from '@udecode/slate';\n\nimport { jsx } from 'slate-hyperscript';\n\nimport type { SlateEditor } from '../../../editor';\n\nimport { deserializeHtmlNodeChildren } from './deserializeHtmlNodeChildren';\nimport { pipeDeserializeHtmlElement } from './pipeDeserializeHtmlElement';\n\n/** Deserialize HTML to Element. */\nexport const htmlElementToElement = (\n  editor: SlateEditor,\n  element: HTMLElement\n) => {\n  const deserialized = pipeDeserializeHtmlElement(editor, element);\n\n  if (deserialized) {\n    const { node, withoutChildren } = deserialized;\n\n    let descendants =\n      node.children ??\n      (deserializeHtmlNodeChildren(editor, element) as TDescendant[]);\n\n    if (descendants.length === 0 || withoutChildren) {\n      descendants = [{ text: '' }];\n    }\n\n    return jsx('element', node, descendants) as TDescendant;\n  }\n};\n","import { type AnyObject, isDefined } from '@udecode/utils';\nimport castArray from 'lodash/castArray.js';\n\nimport type { SlateEditor } from '../../../editor';\nimport type {\n  AnyEditorPlugin,\n  HtmlDeserializer,\n} from '../../../plugin/SlatePlugin';\nimport type { Nullable } from '../../../types';\n\nimport { getEditorPlugin } from '../../../plugin';\nimport { getInjectedPlugins } from '../../../utils/getInjectedPlugins';\n\n/** Get a deserializer by type, node names, class names and styles. */\nexport const pluginDeserializeHtml = (\n  editor: SlateEditor,\n  plugin: AnyEditorPlugin,\n  {\n    deserializeLeaf,\n    element: el,\n  }: { element: HTMLElement; deserializeLeaf?: boolean }\n): (Nullable<HtmlDeserializer> & { node: AnyObject }) | undefined => {\n  const {\n    node: { isElement: isElementRoot, isLeaf: isLeafRoot, type },\n    parsers,\n  } = plugin;\n\n  const deserializer = parsers?.html?.deserializer;\n\n  if (!deserializer) return;\n\n  const {\n    attributeNames,\n    isElement: isElementRule,\n    isLeaf: isLeafRule,\n    query,\n    rules,\n  } = deserializer;\n  let { parse } = deserializer;\n\n  const isElement = isElementRule || isElementRoot;\n  const isLeaf = isLeafRule || isLeafRoot;\n\n  if (!deserializeLeaf && !isElement) {\n    return;\n  }\n  if (deserializeLeaf && !isLeaf) {\n    return;\n  }\n  if (rules) {\n    const isValid = rules.some(\n      ({ validAttribute, validClassName, validNodeName = '*', validStyle }) => {\n        if (validNodeName) {\n          const validNodeNames = castArray<string>(validNodeName);\n\n          // Ignore if el nodeName is not included in rule validNodeNames (except *).\n          if (\n            validNodeNames.length > 0 &&\n            !validNodeNames.includes(el.nodeName) &&\n            validNodeName !== '*'\n          )\n            return false;\n        }\n        // Ignore if the rule className is not in el class list.\n        if (validClassName && !el.classList.contains(validClassName))\n          return false;\n        if (validStyle) {\n          for (const [key, value] of Object.entries(validStyle)) {\n            const values = castArray<string>(value);\n\n            // Ignore if el style value is not included in rule style values (except *)\n            if (!values.includes((el.style as any)[key]) && value !== '*')\n              return;\n            // Ignore if el style value is falsy (for value *)\n            if (value === '*' && !(el.style as any)[key]) return;\n\n            const defaultNodeValue = plugin.inject.nodeProps?.defaultNodeValue;\n\n            // Ignore if the style value = plugin.inject.nodeProps.defaultNodeValue\n            if (\n              defaultNodeValue &&\n              defaultNodeValue === (el.style as any)[key]\n            ) {\n              return false;\n            }\n          }\n        }\n        if (validAttribute) {\n          if (typeof validAttribute === 'string') {\n            if (!el.getAttributeNames().includes(validAttribute)) return false;\n          } else {\n            for (const [attributeName, attributeValue] of Object.entries(\n              validAttribute\n            )) {\n              const attributeValues = castArray<string>(attributeValue);\n              const elAttribute = el.getAttribute(attributeName);\n\n              if (\n                !isDefined(elAttribute) ||\n                !attributeValues.includes(elAttribute)\n              )\n                return false;\n            }\n          }\n        }\n\n        return true;\n      }\n    );\n\n    if (!isValid) return;\n  }\n  if (\n    query &&\n    !query({ ...(getEditorPlugin(editor, plugin) as any), element: el })\n  ) {\n    return;\n  }\n  if (!parse) {\n    if (isElement) {\n      parse = () => ({ type: type });\n    } else if (isLeaf) {\n      parse = () => ({ [type!]: true });\n    } else {\n      return;\n    }\n  }\n\n  let node =\n    parse({\n      ...(getEditorPlugin(editor, plugin) as any),\n      element: el,\n      node: {},\n    }) ?? {};\n\n  if (Object.keys(node).length === 0) return;\n\n  const injectedPlugins = getInjectedPlugins(editor, plugin);\n\n  injectedPlugins.forEach((injectedPlugin) => {\n    const res = injectedPlugin.parsers?.html?.deserializer?.parse?.({\n      ...(getEditorPlugin(editor, plugin) as any),\n      element: el,\n      node,\n    });\n\n    if (res) {\n      node = {\n        ...node,\n        ...res,\n      };\n    }\n  });\n\n  if (attributeNames) {\n    const elementAttributes = {};\n\n    const elementAttributeNames = el.getAttributeNames();\n\n    for (const elementAttributeName of elementAttributeNames) {\n      if (attributeNames.includes(elementAttributeName)) {\n        (elementAttributes as any)[elementAttributeName] =\n          el.getAttribute(elementAttributeName);\n      }\n    }\n\n    if (Object.keys(elementAttributes).length > 0) {\n      node.attributes = elementAttributes;\n    }\n  }\n\n  return { ...deserializer, node };\n};\n","import type { AnyObject } from '@udecode/utils';\n\nimport type { SlateEditor } from '../../../editor';\nimport type { HtmlDeserializer } from '../../../plugin/SlatePlugin';\nimport type { Nullable } from '../../../types/misc/Nullable';\n\nimport { pluginDeserializeHtml } from './pluginDeserializeHtml';\n\nexport const pipeDeserializeHtmlElement = (\n  editor: SlateEditor,\n  element: HTMLElement\n) => {\n  let result: (Nullable<HtmlDeserializer> & { node: AnyObject }) | undefined;\n\n  [...editor.pluginList].reverse().some((plugin) => {\n    result = pluginDeserializeHtml(editor, plugin, { element });\n\n    return !!result;\n  });\n\n  return result;\n};\n","import { type TDescendant, isElement, isText } from '@udecode/slate';\nimport { jsx } from 'slate-hyperscript';\n\nimport type { SlateEditor } from '../../../editor';\n\nimport { mergeDeepToNodes } from '../../../utils';\nimport { deserializeHtmlNodeChildren } from './deserializeHtmlNodeChildren';\nimport { pipeDeserializeHtmlLeaf } from './pipeDeserializeHtmlLeaf';\n\n/**\n * Deserialize HTML to TDescendant[] with marks on Text. Build the leaf from the\n * leaf deserializers of each plugin.\n */\nexport const htmlElementToLeaf = (\n  editor: SlateEditor,\n  element: HTMLElement\n) => {\n  const node = pipeDeserializeHtmlLeaf(editor, element);\n\n  return deserializeHtmlNodeChildren(editor, element).reduce(\n    (arr: TDescendant[], child) => {\n      if (!child) return arr;\n      if (isElement(child)) {\n        if (Object.keys(node).length > 0) {\n          mergeDeepToNodes({\n            node: child,\n            query: {\n              filter: ([n]) => isText(n),\n            },\n            source: node,\n          });\n        }\n\n        arr.push(child);\n      } else {\n        const attributes = { ...node };\n\n        // attributes should not override child attributes\n        if (isText(child) && child.text) {\n          Object.keys(attributes).forEach((key) => {\n            if (attributes[key] && child[key]) {\n              attributes[key] = child[key];\n            }\n          });\n        }\n\n        arr.push(jsx('text', attributes, child) as any);\n      }\n\n      return arr;\n    },\n    []\n  ) as TDescendant[];\n};\n","import type { AnyObject } from '@udecode/utils';\n\nimport type { SlateEditor } from '../../../editor';\n\nimport { pluginDeserializeHtml } from './pluginDeserializeHtml';\n\nexport const pipeDeserializeHtmlLeaf = (\n  editor: SlateEditor,\n  element: HTMLElement\n) => {\n  let node: AnyObject = {};\n\n  [...editor.pluginList].reverse().forEach((plugin) => {\n    const deserialized = pluginDeserializeHtml(editor, plugin, {\n      deserializeLeaf: true,\n      element,\n    });\n\n    if (!deserialized) return;\n\n    node = { ...node, ...deserialized.node };\n  });\n\n  return node;\n};\n","/** Deserialize HTML text node to text. */\nimport { isHtmlText } from './isHtmlText';\n\nexport const htmlTextNodeToString = (node: ChildNode | HTMLElement) => {\n  if (isHtmlText(node)) {\n    return node.textContent || '';\n  }\n};\n","import type { SlateEditor } from '../../../editor';\nimport type { DeserializeHtmlNodeReturnType } from '../types';\n\nimport { htmlBodyToFragment } from './htmlBodyToFragment';\nimport { htmlBrToNewLine } from './htmlBrToNewLine';\nimport { htmlElementToElement } from './htmlElementToElement';\nimport { htmlElementToLeaf } from './htmlElementToLeaf';\nimport { htmlTextNodeToString } from './htmlTextNodeToString';\nimport { isHtmlElement } from './isHtmlElement';\n\n/** Deserialize HTML element or child node. */\nexport const deserializeHtmlNode =\n  (editor: SlateEditor) =>\n  (node: ChildNode | HTMLElement): DeserializeHtmlNodeReturnType => {\n    const textNode = htmlTextNodeToString(node);\n\n    if (textNode) return textNode;\n    if (!isHtmlElement(node)) return null;\n\n    // break line\n    const breakLine = htmlBrToNewLine(node);\n\n    if (breakLine) return breakLine;\n\n    // body\n    const fragment = htmlBodyToFragment(editor, node as HTMLElement);\n\n    if (fragment) return fragment;\n\n    // element\n    const element = htmlElementToElement(editor, node as HTMLElement);\n\n    if (element) return element;\n\n    // leaf\n    return htmlElementToLeaf(editor, node as HTMLElement);\n  };\n","import type { SlateEditor } from '../../../editor';\nimport type { DeserializeHtmlNodeReturnType } from '../types';\n\nimport { deserializeHtmlNode } from './deserializeHtmlNode';\n\n/** Deserialize HTML element to fragment. */\nexport const deserializeHtmlElement = (\n  editor: SlateEditor,\n  element: HTMLElement\n): DeserializeHtmlNodeReturnType => {\n  return deserializeHtmlNode(editor)(element);\n};\n","/** Convert HTML string into HTML element. */\nexport const htmlStringToDOMNode = (rawHtml: string) => {\n  const node = document.createElement('body');\n  node.innerHTML = rawHtml;\n\n  return node;\n};\n","import type { TDescendant } from '@udecode/slate';\n\nimport type { SlateEditor } from '../../../editor';\n\nimport { normalizeDescendantsToDocumentFragment } from '../../../utils/normalizeDescendantsToDocumentFragment';\nimport { collapseWhiteSpace } from './collapse-white-space';\nimport { deserializeHtmlElement } from './deserializeHtmlElement';\nimport { htmlStringToDOMNode } from './htmlStringToDOMNode';\n\n/** Deserialize HTML element to a valid document fragment. */\nexport const deserializeHtml = (\n  editor: SlateEditor,\n  {\n    collapseWhiteSpace: shouldCollapseWhiteSpace = true,\n    element,\n  }: {\n    element: HTMLElement | string;\n    collapseWhiteSpace?: boolean;\n  }\n): TDescendant[] => {\n  // for serializer\n  if (typeof element === 'string') {\n    element = htmlStringToDOMNode(element);\n  }\n  if (shouldCollapseWhiteSpace) {\n    element = collapseWhiteSpace(element);\n  }\n\n  const fragment = deserializeHtmlElement(editor, element) as TDescendant[];\n\n  return normalizeDescendantsToDocumentFragment(editor, {\n    descendants: fragment,\n  });\n};\n","export const parseHtmlDocument = (html: string) => {\n  return new DOMParser().parseFromString(html, 'text/html');\n};\n","import { getEditorString, withoutNormalizing } from '@udecode/slate';\n\nimport type { LengthConfig } from '../getCorePlugins';\n\nimport { type ExtendEditor, createTSlatePlugin } from '../../plugin';\n\nexport const withLength: ExtendEditor<LengthConfig> = ({\n  editor,\n  getOptions,\n}) => {\n  const { apply } = editor;\n\n  editor.apply = (operation) => {\n    withoutNormalizing(editor, () => {\n      apply(operation);\n\n      const options = getOptions();\n\n      if (options.maxLength) {\n        const length = getEditorString(editor, []).length;\n\n        // Make sure to remove overflow of text beyond character limit\n        if (length > options.maxLength) {\n          const overflowLength = length - options.maxLength;\n\n          editor.delete({\n            distance: overflowLength,\n            reverse: true,\n            unit: 'character',\n          });\n        }\n      }\n    });\n  };\n\n  return editor;\n};\n\nexport const LengthPlugin = createTSlatePlugin<LengthConfig>({\n  key: 'length',\n  extendEditor: withLength,\n});\n","import type { AnyPluginConfig, PluginConfig } from '../plugin/BasePlugin';\nimport type { SlatePlugin } from '../plugin/SlatePlugin';\n\nimport {\n  createSlatePlugin,\n  createTSlatePlugin,\n} from '../plugin/createSlatePlugin';\nimport { AstPlugin } from './AstPlugin';\nimport { DOMPlugin } from './DOMPlugin';\nimport { HistoryPlugin } from './HistoryPlugin';\nimport { InlineVoidPlugin } from './InlineVoidPlugin';\nimport { ParserPlugin } from './ParserPlugin';\nimport { type DebugErrorType, type LogLevel, DebugPlugin } from './debug';\nimport { SlateNextPlugin } from './editor-protocol';\nimport { HtmlPlugin } from './html';\nimport { LengthPlugin } from './length';\nimport { BaseParagraphPlugin } from './paragraph';\n\n// Somehow needed to avoid cyclic dependency\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst _ = () => {\n  createSlatePlugin();\n  createTSlatePlugin();\n};\n\nexport type CorePlugin = ReturnType<typeof getCorePlugins>[number];\n\nexport type GetCorePluginsOptions = {\n  /** Specifies the maximum number of characters allowed in the editor. */\n  maxLength?: number;\n\n  /** Override the core plugins using the same key. */\n  plugins?: AnyPluginConfig[];\n};\n\nexport const getCorePlugins = ({\n  maxLength,\n  plugins = [],\n}: GetCorePluginsOptions) => {\n  let corePlugins = [\n    DebugPlugin as SlatePlugin<DebugConfig>,\n    SlateNextPlugin,\n    DOMPlugin,\n    HistoryPlugin,\n    InlineVoidPlugin,\n    ParserPlugin,\n    maxLength\n      ? LengthPlugin.configure({\n          options: { maxLength },\n        })\n      : LengthPlugin,\n    HtmlPlugin,\n    AstPlugin,\n    BaseParagraphPlugin,\n  ];\n\n  // Create a map for quick lookup of custom plugins\n  const customPluginsMap = new Map(\n    plugins.map((plugin) => [plugin.key, plugin])\n  );\n\n  // Replace core plugins with custom plugins if they exist and remove them from plugins\n  corePlugins = corePlugins.map((corePlugin) => {\n    const customPlugin = customPluginsMap.get(corePlugin.key);\n\n    if (customPlugin) {\n      // Remove the custom plugin from the plugins array\n      const index = plugins.findIndex((p) => p.key === corePlugin.key);\n\n      if (index !== -1) {\n        plugins.splice(index, 1);\n      }\n\n      return customPlugin;\n    }\n\n    return corePlugin as any;\n  });\n\n  return corePlugins;\n};\n\ntype LogFunction = (\n  message: string,\n  type?: DebugErrorType,\n  details?: any\n) => void;\n\nexport type DebugConfig = PluginConfig<\n  'debug',\n  {\n    isProduction: boolean;\n    logLevel: LogLevel;\n    logger: Partial<Record<LogLevel, LogFunction>>;\n    throwErrors: boolean;\n  },\n  {\n    debug: {\n      error: (\n        message: string | unknown,\n        type?: DebugErrorType,\n        details?: any\n      ) => void;\n      info: (message: string, type?: DebugErrorType, details?: any) => void;\n      log: (message: string, type?: DebugErrorType, details?: any) => void;\n      warn: (message: string, type?: DebugErrorType, details?: any) => void;\n    };\n  }\n>;\n\nexport type LengthConfig = PluginConfig<\n  'length',\n  {\n    maxLength: number;\n  }\n>;\n\nexport interface ToggleBlockOptions {\n  /** The default block type to revert to when untoggling. Defaults to paragraph. */\n  defaultType?: string;\n\n  /** The block type to apply or toggle. */\n  type?: string;\n}\n","import { type TElement, type TText, isElement } from '@udecode/slate';\nimport { type AnyObject, isDefined } from '@udecode/utils';\nimport { clsx } from 'clsx';\n\nimport type { SlateEditor } from '../editor';\nimport type { EditorPlugin, TransformOptions } from '../plugin/SlatePlugin';\n\nimport { getEditorPlugin } from '../plugin';\nimport { getKeyByType } from './getKeysByTypes';\n\nexport interface GetInjectNodePropsOptions {\n  /** Existing className. */\n  className?: string;\n\n  /** Style value or className key. */\n  element?: TElement;\n\n  /** Existing style. */\n  style?: CSSStyleDeclaration;\n\n  /** Style value or className key. */\n  text?: TText;\n}\n\nexport interface GetInjectNodePropsReturnType extends AnyObject {\n  className?: string;\n  style?: CSSStyleDeclaration;\n}\n\n/**\n * Return if `element`, `text`, `nodeKey` is defined. Return if `node.type` is\n * not in `targetPlugins` (if defined). Return if `value = node[nodeKey]` is not\n * in `validNodeValues` (if defined). If `classNames[value]` is defined,\n * override `className` with it. If `styleKey` is defined, override `style` with\n * `[styleKey]: value`.\n */\nexport const pluginInjectNodeProps = (\n  editor: SlateEditor,\n  plugin: EditorPlugin,\n  nodeProps: GetInjectNodePropsOptions\n): GetInjectNodePropsReturnType | undefined => {\n  const {\n    key,\n    inject: { nodeProps: injectNodeProps, targetPlugins },\n  } = plugin;\n\n  const { className, element, style, text } = nodeProps;\n\n  const node = element ?? text;\n\n  if (!node) return;\n  if (!injectNodeProps) return;\n\n  const {\n    classNames,\n    defaultNodeValue,\n    nodeKey = key,\n    query,\n    styleKey = nodeKey as any,\n    transformClassName,\n    transformNodeValue,\n    transformProps,\n    transformStyle,\n    validNodeValues,\n  } = injectNodeProps;\n\n  const queryResult = query?.({\n    ...injectNodeProps,\n    ...(getEditorPlugin(editor, plugin) as any),\n    nodeProps,\n  });\n\n  if (\n    !queryResult &&\n    targetPlugins &&\n    isElement(node) &&\n    node.type &&\n    !targetPlugins.includes(getKeyByType(editor, node.type))\n  ) {\n    return;\n  }\n\n  const nodeValue = node[nodeKey!] as any;\n\n  // early return if there is no reason to inject props\n  if (\n    !queryResult &&\n    (!isDefined(nodeValue) ||\n      (validNodeValues && !validNodeValues.includes(nodeValue)) ||\n      nodeValue === defaultNodeValue)\n  ) {\n    return;\n  }\n\n  const transformOptions: TransformOptions = {\n    ...nodeProps,\n    ...(getEditorPlugin(editor, plugin) as any),\n    nodeValue,\n  };\n  const value = transformNodeValue?.(transformOptions) ?? nodeValue;\n  transformOptions.value = value;\n\n  let res: GetInjectNodePropsReturnType = {};\n\n  if (element) {\n    res.className = clsx(className, `slate-${nodeKey}-${nodeValue}`);\n  }\n  if (classNames?.[nodeValue] || transformClassName) {\n    res.className =\n      transformClassName?.(transformOptions) ??\n      clsx(className, classNames?.[value]);\n  }\n  if (styleKey) {\n    res.style =\n      transformStyle?.(transformOptions) ??\n      ({\n        ...style,\n        [styleKey as string]: value,\n      } as any);\n  }\n  if (transformProps) {\n    res = transformProps({ ...transformOptions, props: res }) ?? res;\n  }\n\n  return res;\n};\n","import type { SlateEditor } from '../editor';\n\nimport { pluginInjectNodeProps } from './pluginInjectNodeProps';\n\n/** Inject plugin props, editor. */\nexport const pipeInjectNodeProps = (editor: SlateEditor, nodeProps: any) => {\n  editor.pluginList.forEach((plugin) => {\n    if (plugin.inject.nodeProps) {\n      const props = pluginInjectNodeProps(editor, plugin, nodeProps);\n\n      if (props) {\n        nodeProps = {\n          ...nodeProps,\n          ...props,\n        };\n      }\n    }\n  });\n\n  return { ...nodeProps, editor };\n};\n","import type { SlateEditor } from '../editor';\nimport type { ParserOptions } from '../plugin/BasePlugin';\nimport type { AnyEditorPlugin } from '../plugin/SlatePlugin';\n\nimport { getEditorPlugin } from '../plugin';\n\n/** Is the plugin disabled by another plugin. */\nexport const pipeInsertDataQuery = (\n  editor: SlateEditor,\n  plugins: Partial<AnyEditorPlugin>[],\n  { data, dataTransfer }: ParserOptions\n) =>\n  plugins.every((p) => {\n    const query = p.parser?.query;\n\n    return (\n      !query ||\n      query({\n        ...getEditorPlugin(editor, p as any),\n        data,\n        dataTransfer,\n      })\n    );\n  });\n","import { type TDescendant, withoutNormalizing } from '@udecode/slate';\n\nimport type { SlateEditor } from '../editor';\nimport type { ParserOptions } from '../plugin/BasePlugin';\nimport type { AnyEditorPlugin } from '../plugin/SlatePlugin';\n\nimport { getEditorPlugin } from '../plugin';\n\n/** Pipe preInsert then insertFragment. */\nexport const pipeInsertFragment = (\n  editor: SlateEditor,\n  injectedPlugins: Partial<AnyEditorPlugin>[],\n  { fragment, ...options }: ParserOptions & { fragment: TDescendant[] }\n) => {\n  withoutNormalizing(editor, () => {\n    injectedPlugins.some((p) => {\n      return (\n        p.parser?.preInsert?.({\n          ...getEditorPlugin(editor, p as any),\n          fragment,\n          ...options,\n        }) === true\n      );\n    });\n\n    editor.insertFragment(fragment);\n  });\n};\n","import cloneDeep from 'lodash/cloneDeep.js';\nimport isEqual from 'lodash/isEqual.js';\n\nimport type { SlateEditor } from '../editor';\n\nimport { getEditorPlugin } from '../plugin';\n\n/** Normalize initial value from editor plugins. Set into plate store if diff. */\nexport const pipeNormalizeInitialValue = (editor: SlateEditor) => {\n  const value = editor.children;\n  let normalizedValue = cloneDeep(value);\n\n  editor.pluginList.forEach((p) => {\n    const _normalizedValue = p.normalizeInitialValue?.({\n      ...getEditorPlugin(editor, p),\n      value: normalizedValue,\n    } as any);\n\n    if (_normalizedValue) {\n      normalizedValue = _normalizedValue;\n    }\n  });\n\n  if (!isEqual(value, normalizedValue) && normalizedValue) {\n    editor.children = normalizedValue;\n  }\n};\n","import type { SlateEditor } from '../editor';\nimport type { ParserOptions } from '../plugin/BasePlugin';\nimport type { AnyEditorPlugin } from '../plugin/SlatePlugin';\n\nimport { getEditorPlugin } from '../plugin';\n\n/** Pipe editor.insertData.transformData */\nexport const pipeTransformData = (\n  editor: SlateEditor,\n  plugins: Partial<AnyEditorPlugin>[],\n  { data, dataTransfer }: ParserOptions\n) => {\n  plugins.forEach((p) => {\n    const transformData = p.parser?.transformData;\n\n    if (!transformData) return;\n\n    data = transformData({\n      ...getEditorPlugin(editor, p as any),\n      data,\n      dataTransfer,\n    });\n  });\n\n  return data;\n};\n","import type { TDescendant } from '@udecode/slate';\n\nimport type { SlateEditor } from '../editor';\nimport type { ParserOptions } from '../plugin/BasePlugin';\nimport type { AnyEditorPlugin } from '../plugin/SlatePlugin';\n\nimport { getEditorPlugin } from '../plugin';\n\n/** Pipe editor.insertData.transformFragment */\nexport const pipeTransformFragment = (\n  editor: SlateEditor,\n  plugins: Partial<AnyEditorPlugin>[],\n  { fragment, ...options }: ParserOptions & { fragment: TDescendant[] }\n) => {\n  plugins.forEach((p) => {\n    const transformFragment = p.parser?.transformFragment;\n\n    if (!transformFragment) return;\n\n    fragment = transformFragment({\n      fragment,\n      ...options,\n      ...getEditorPlugin(editor, p as any),\n    });\n  });\n\n  return fragment;\n};\n","import merge from 'lodash/merge.js';\n\nimport type { SlateEditor } from '../editor';\nimport type { PluginConfig } from '../plugin/BasePlugin';\nimport type { AnySlatePlugin, SlatePlugin } from '../plugin/SlatePlugin';\n\nimport { mergePlugins } from '../../internal/mergePlugins';\nimport { getEditorPlugin } from '../plugin';\n\n/**\n * Resolves and finalizes a plugin configuration for use in a Plate editor.\n *\n * This function processes a given plugin configuration, applying any extensions\n * and resolving nested plugins. It prepares the plugin for integration into the\n * Plate editor system by:\n *\n * 1. Cloning the plugin to avoid mutating the original\n * 2. Applying all stored extensions to the plugin\n * 3. Clearing the extensions array after application\n *\n * @example\n *   const plugin = createSlatePlugin({ key: 'myPlugin', ...otherOptions }).extend(...);\n *   const resolvedPlugin = resolvePlugin(editor, plugin);\n */\nexport const resolvePlugin = <P extends AnySlatePlugin>(\n  editor: SlateEditor,\n  _plugin: P\n): P => {\n  // Create a deep clone of the plugin\n  let plugin = mergePlugins({}, _plugin) as P;\n\n  plugin.__resolved = true;\n\n  // Apply the stored configuration first\n  if (plugin.__configuration) {\n    const configResult = plugin.__configuration(\n      getEditorPlugin(editor, plugin as any)\n    );\n\n    plugin = mergePlugins(plugin, configResult);\n\n    delete (plugin as any).__configuration;\n  }\n  // Apply all stored extensions\n  if (plugin.__extensions && plugin.__extensions.length > 0) {\n    plugin.__extensions.forEach((extension) => {\n      plugin = mergePlugins(\n        plugin,\n        extension(getEditorPlugin(editor, plugin as any))\n      );\n    });\n    plugin.__extensions = [];\n  }\n\n  const targetPluginToInject = plugin.inject?.targetPluginToInject;\n  const targetPlugins = plugin.inject?.targetPlugins;\n\n  if (targetPluginToInject && targetPlugins && targetPlugins.length > 0) {\n    plugin.inject = plugin.inject || {};\n    plugin.inject.plugins = merge(\n      {},\n      plugin.inject.plugins,\n      Object.fromEntries(\n        targetPlugins.map((targetPlugin) => {\n          const injectedPlugin = targetPluginToInject({\n            ...getEditorPlugin(editor, plugin as any),\n            targetPlugin,\n          });\n\n          return [targetPlugin, injectedPlugin];\n        })\n      )\n    );\n  }\n  // TODO React\n  if ((plugin as any).node?.component) {\n    (plugin as any).render.node = (plugin as any).node.component;\n  }\n  if ((plugin as any).render?.node) {\n    (plugin as any).node.component = (plugin as any).render.node;\n  }\n\n  validatePlugin(editor, plugin);\n\n  return plugin;\n};\n\nexport const validatePlugin = <K extends string = any, O = {}, A = {}, T = {}>(\n  editor: SlateEditor,\n  plugin: SlatePlugin<PluginConfig<K, O, A, T>>\n) => {\n  if (!plugin.__extensions) {\n    editor.api.debug.error(\n      `Invalid plugin '${plugin.key}', you should use createSlatePlugin.`,\n      'USE_CREATE_PLUGIN'\n    );\n  }\n  if (plugin.node.isElement && plugin.node.isLeaf) {\n    editor.api.debug.error(\n      `Plugin ${plugin.key} cannot be both an element and a leaf.`,\n      'PLUGIN_NODE_TYPE'\n    );\n  }\n};\n","import { isDefined } from '@udecode/utils';\nimport merge from 'lodash/merge.js';\nimport { createZustandStore } from 'zustand-x';\n\nimport type { SlateEditor } from '../editor';\n\nimport { mergePlugins } from '../../internal/mergePlugins';\nimport {\n  type SlatePlugin,\n  type SlatePlugins,\n  getEditorPlugin,\n} from '../plugin';\nimport { resolvePlugin } from './resolvePlugin';\n\n/**\n * Initialize and configure the editor's plugin system. This function sets up\n * the editor's plugins, resolving core and custom plugins, and applying any\n * overrides specified in the plugins.\n */\nexport const resolvePlugins = (\n  editor: SlateEditor,\n  plugins: SlatePlugins = []\n) => {\n  editor.pluginList = [];\n  editor.plugins = {};\n  editor.api = {} as any;\n  editor.transforms = {} as any;\n  editor.tf = editor.transforms;\n  editor.shortcuts = {} as any;\n\n  const resolvedPlugins = resolveAndSortPlugins(editor, plugins);\n\n  applyPluginsToEditor(editor, resolvedPlugins);\n\n  resolvePluginOverrides(editor);\n\n  resolvePluginStores(editor);\n\n  resolvePluginApis(editor);\n\n  // extendEditor\n  editor.pluginList.forEach((plugin) => {\n    if (plugin.extendEditor) {\n      editor = plugin.extendEditor(getEditorPlugin(editor, plugin) as any);\n    }\n  });\n\n  return editor;\n};\n\nconst resolvePluginStores = (editor: SlateEditor) => {\n  // Create zustand stores for each plugin\n  editor.pluginList.forEach((plugin) => {\n    let store = createZustandStore(plugin.key)(plugin.options, {\n      immer: {\n        enableMapSet: true,\n      },\n    });\n\n    // Apply option extensions\n    if (\n      (plugin as any).__optionExtensions &&\n      (plugin as any).__optionExtensions.length > 0\n    ) {\n      (plugin as any).__optionExtensions.forEach((extension: any) => {\n        const extendedOptions = extension(getEditorPlugin(editor, plugin));\n\n        store = store.extendSelectors(() => extendedOptions);\n      });\n    }\n\n    plugin.optionsStore = store;\n  });\n};\n\nconst resolvePluginApis = (editor: SlateEditor) => {\n  const shortcutsByPriority: any[] = [];\n\n  editor.pluginList.forEach((plugin: any) => {\n    // Merge APIs\n    Object.entries(plugin.api).forEach(([apiKey, apiFunction]) => {\n      (editor.api as any)[apiKey] = apiFunction;\n    });\n\n    // Apply API and transform extensions\n    if (plugin.__apiExtensions && plugin.__apiExtensions.length > 0) {\n      plugin.__apiExtensions.forEach(\n        ({ extension, isPluginSpecific, isTransform }: any) => {\n          const newExtensions = extension(\n            getEditorPlugin(editor, plugin) as any\n          );\n\n          if (isTransform) {\n            // Handle transforms\n            if (isPluginSpecific) {\n              // Plugin-specific transform\n              if (!(editor.transforms as any)[plugin.key]) {\n                (editor.transforms as any)[plugin.key] = {};\n              }\n              if (!(plugin.transforms as any)[plugin.key]) {\n                (plugin.transforms as any)[plugin.key] = {};\n              }\n\n              merge((editor.transforms as any)[plugin.key], newExtensions);\n              merge((plugin.transforms as any)[plugin.key], newExtensions);\n            } else {\n              // Editor-wide transform\n              merge(editor.transforms, newExtensions);\n              merge(plugin.transforms, newExtensions);\n            }\n          } else {\n            // Handle APIs\n            if (isPluginSpecific) {\n              // Plugin-specific API\n              if (!(editor.api as any)[plugin.key]) {\n                (editor.api as any)[plugin.key] = {};\n              }\n              if (!(plugin.api as any)[plugin.key]) {\n                (plugin.api as any)[plugin.key] = {};\n              }\n\n              merge((editor.api as any)[plugin.key], newExtensions);\n              merge((plugin.api as any)[plugin.key], newExtensions);\n            } else {\n              // Editor-wide API\n              merge(editor.api, newExtensions);\n              merge(plugin.api, newExtensions);\n            }\n          }\n        }\n      );\n      delete plugin.__apiExtensions;\n    }\n\n    // Merge shortcuts\n    Object.entries(plugin.shortcuts).forEach(([key, hotkey]) => {\n      if (hotkey === null) {\n        // Remove any existing hotkey with this key\n        const index = shortcutsByPriority.findIndex((item) => item.key === key);\n\n        if (index !== -1) {\n          shortcutsByPriority.splice(index, 1);\n        }\n      } else {\n        const priority = (hotkey as any).priority ?? plugin.priority;\n        const existingIndex = shortcutsByPriority.findIndex(\n          (item) => item.key === key\n        );\n\n        if (\n          existingIndex === -1 ||\n          priority >= shortcutsByPriority[existingIndex].priority\n        ) {\n          if (existingIndex !== -1) {\n            shortcutsByPriority.splice(existingIndex, 1);\n          }\n\n          shortcutsByPriority.push({ key, hotkey, priority });\n        }\n      }\n    });\n  });\n\n  // Sort shortcuts by priority (descending)\n  shortcutsByPriority.sort((a, b) => b.hotkey.priority - a.hotkey.priority);\n\n  // After processing all plugins, set the final shortcuts on the editor\n  editor.shortcuts = Object.fromEntries(\n    shortcutsByPriority.map(({ key, hotkey }) => {\n      const { priority, ...hotkeyWithoutPriority } = hotkey;\n\n      return [key, hotkeyWithoutPriority];\n    })\n  );\n};\n\nconst flattenAndResolvePlugins = (\n  editor: SlateEditor,\n  plugins: SlatePlugins\n): Map<string, SlatePlugin> => {\n  const pluginMap = new Map<string, SlatePlugin>();\n\n  const processPlugin = (plugin: SlatePlugin) => {\n    const resolvedPlugin = resolvePlugin(editor, plugin);\n    const existingPlugin = pluginMap.get(resolvedPlugin.key);\n\n    if (existingPlugin) {\n      pluginMap.set(\n        resolvedPlugin.key,\n        mergePlugins(existingPlugin, resolvedPlugin)\n      );\n    } else {\n      pluginMap.set(resolvedPlugin.key, resolvedPlugin);\n    }\n    if (resolvedPlugin.plugins && resolvedPlugin.plugins.length > 0) {\n      resolvedPlugin.plugins.forEach(processPlugin);\n    }\n  };\n\n  plugins.forEach(processPlugin);\n\n  return pluginMap;\n};\n\nexport const resolveAndSortPlugins = (\n  editor: SlateEditor,\n  plugins: SlatePlugins\n): SlatePlugins => {\n  // Step 1: Resolve, flatten, and merge all plugins\n  const pluginMap = flattenAndResolvePlugins(editor, plugins);\n\n  // Step 2: Filter out disabled plugins\n  const enabledPlugins = Array.from(pluginMap.values()).filter(\n    (plugin) => plugin.enabled !== false\n  );\n\n  // Step 3: Sort plugins by priority\n  enabledPlugins.sort((a, b) => b.priority - a.priority);\n\n  // Step 4: Reorder based on dependencies\n  const orderedPlugins: SlatePlugins = [];\n  const visited = new Set<string>();\n\n  const visit = (plugin: SlatePlugin) => {\n    if (visited.has(plugin.key)) return;\n\n    visited.add(plugin.key);\n\n    plugin.dependencies?.forEach((depKey) => {\n      const depPlugin = pluginMap.get(depKey);\n\n      if (depPlugin) {\n        visit(depPlugin);\n      } else {\n        editor.api.debug.warn(\n          `Plugin \"${plugin.key}\" depends on missing plugin \"${depKey}\"`,\n          'PLUGIN_DEPENDENCY_MISSING'\n        );\n      }\n    });\n\n    orderedPlugins.push(plugin);\n  };\n\n  enabledPlugins.forEach(visit);\n\n  return orderedPlugins;\n};\n\nexport const applyPluginsToEditor = (\n  editor: SlateEditor,\n  plugins: SlatePlugins\n) => {\n  editor.pluginList = plugins;\n  editor.plugins = Object.fromEntries(\n    plugins.map((plugin) => [plugin.key, plugin])\n  );\n};\n\nexport const resolvePluginOverrides = (editor: SlateEditor) => {\n  const applyOverrides = (plugins: SlatePlugin[]): SlatePlugin[] => {\n    let overriddenPlugins = [...plugins];\n\n    const enabledOverrides: Record<string, boolean> = {};\n    const componentOverrides: Record<\n      string,\n      { component: any; priority: number }\n    > = {};\n    const pluginOverrides: Record<string, Partial<SlatePlugin>> = {};\n\n    // Collect all overrides\n    for (const plugin of plugins) {\n      if (plugin.override.enabled) {\n        Object.assign(enabledOverrides, plugin.override.enabled);\n      }\n      // TODO react\n      if ((plugin.override as any).components) {\n        Object.entries((plugin.override as any).components).forEach(\n          ([key, component]) => {\n            if (\n              !componentOverrides[key] ||\n              plugin.priority > componentOverrides[key].priority\n            ) {\n              componentOverrides[key] = {\n                component,\n                priority: plugin.priority,\n              };\n            }\n          }\n        );\n      }\n      if (plugin.override.plugins) {\n        Object.entries(plugin.override.plugins).forEach(([key, value]) => {\n          pluginOverrides[key] = mergePlugins(pluginOverrides[key], value);\n\n          if (value.enabled !== undefined) {\n            enabledOverrides[key] = value.enabled;\n          }\n        });\n      }\n    }\n\n    // Apply overrides\n    overriddenPlugins = overriddenPlugins.map((p) => {\n      let updatedPlugin = { ...p };\n\n      // Apply plugin overrides\n      if (pluginOverrides[p.key]) {\n        updatedPlugin = mergePlugins(updatedPlugin, pluginOverrides[p.key]);\n      }\n      // Apply component overrides\n      // TODO react\n      if (\n        componentOverrides[p.key] &&\n        ((!(p as any).render.node && !(p as any).node.component) ||\n          componentOverrides[p.key].priority > p.priority)\n      ) {\n        (updatedPlugin as any).render.node =\n          componentOverrides[p.key].component;\n        (updatedPlugin as any).node.component =\n          componentOverrides[p.key].component;\n      }\n\n      // Apply enabled overrides\n      const enabled = enabledOverrides[p.key] ?? updatedPlugin.enabled;\n\n      if (isDefined(enabled)) {\n        updatedPlugin.enabled = enabled;\n      }\n\n      return updatedPlugin;\n    });\n\n    return overriddenPlugins\n      .filter((p) => p.enabled !== false)\n      .map((plugin) => ({\n        ...plugin,\n        plugins: applyOverrides(plugin.plugins || []),\n      }));\n  };\n\n  editor.pluginList = applyOverrides(editor.pluginList as any);\n  editor.plugins = Object.fromEntries(\n    editor.pluginList.map((plugin) => [plugin.key, plugin])\n  );\n};\n","/** Get slate class name: slate-<type> */\nexport const getSlateClass = (type: string) => `slate-${type}`;\n","import type { SlateEditor } from '../editor';\nimport type {\n  AnyPluginConfig,\n  PluginConfig,\n  WithRequiredKey,\n} from './BasePlugin';\nimport type { AnySlatePlugin, SlatePlugin } from './SlatePlugin';\n\nimport { resolvePlugin } from '../utils';\nimport { createSlatePlugin } from './createSlatePlugin';\n\n/** Get editor plugin by key or plugin object. */\nexport function getSlatePlugin<C extends AnyPluginConfig = PluginConfig>(\n  editor: SlateEditor,\n  p: WithRequiredKey<C>\n): C extends { node: any } ? C : SlatePlugin<C> {\n  let plugin = p as any;\n\n  const editorPlugin = editor.plugins[p.key] as any;\n\n  if (!editorPlugin) {\n    // When passing only { key }\n    if (!plugin.node) {\n      plugin = createSlatePlugin(plugin);\n    }\n\n    // Resolve is need when passing an external plugin with extensions (e.g. in withLink)\n    return plugin.__resolved ? plugin : resolvePlugin(editor, plugin);\n  }\n\n  return editorPlugin;\n}\n\n/** Get editor plugin type by key or plugin object. */\nexport function getPluginType(\n  editor: SlateEditor,\n  plugin: WithRequiredKey\n): string {\n  const p = editor.getPlugin<AnySlatePlugin>(plugin);\n\n  return p.node.type ?? p.key ?? '';\n}\n\n/** Get editor plugin types by key. */\nexport const getPluginTypes = (\n  editor: SlateEditor,\n  plugins: WithRequiredKey[]\n) => plugins.map((plugin) => editor.getType(plugin));\n","export type {\n  StateActions as ZustandStateActions,\n  StoreApi as ZustandStoreApi,\n} from 'zustand-x';\n\nexport { createZustandStore } from 'zustand-x';\n","import type {\n  AnyPluginConfig,\n  InferApi,\n  InferOptions,\n  InferTransforms,\n  PluginConfig,\n  SlatePlugin,\n} from '../../lib';\nimport type {\n  PlatePlugin,\n  PlatePluginContext,\n  PlatePluginMethods,\n} from './PlatePlugin';\n\ntype PlatePluginConfig<\n  C extends AnyPluginConfig,\n  EO = {},\n  EA = {},\n  ET = {},\n> = Omit<\n  Partial<\n    PlatePlugin<\n      PluginConfig<\n        C['key'],\n        EO & InferOptions<C>,\n        EA & InferApi<C>,\n        ET & InferTransforms<C>\n      >\n    >\n  >,\n  keyof PlatePluginMethods | 'api' | 'node' | 'options' | 'transforms'\n> & {\n  api?: EA & Partial<InferApi<C>>;\n  node?: Partial<PlatePlugin<C>['node']>;\n  options?: EO & Partial<InferOptions<C>>;\n  transforms?: ET & Partial<InferTransforms<C>>;\n};\n\nconst methodsToWrap: (keyof SlatePlugin)[] = [\n  'configure',\n  'configurePlugin',\n  'extendEditorApi',\n  'extendApi',\n  'extendEditorTransforms',\n  'extend',\n  'extendPlugin',\n];\n\n/**\n * Extends a SlatePlugin to create a React PlatePlugin.\n *\n * @remarks\n *   This function transforms a SlatePlugin into a React PlatePlugin, allowing for\n *   React-specific functionality to be added.\n * @param basePlugin - The base SlatePlugin to be extended.\n * @param extendConfig - A function or object that provides the extension\n *   configuration. If a function, it receives the plugin context and should\n *   return a partial PlatePlugin. If an object, it should be a partial\n *   PlatePlugin configuration.\n * @returns A new PlatePlugin that combines the base SlatePlugin functionality\n *   with React-specific features defined in the extension configuration.\n */\nexport function toPlatePlugin<\n  C extends AnyPluginConfig,\n  EO = {},\n  EA = {},\n  ET = {},\n>(\n  basePlugin: SlatePlugin<C>,\n  extendConfig?:\n    | ((ctx: PlatePluginContext<C>) => PlatePluginConfig<C, EO, EA, ET>)\n    | PlatePluginConfig<C, EO, EA, ET>\n): PlatePlugin<\n  PluginConfig<\n    C['key'],\n    EO & InferOptions<C>,\n    EA & InferApi<C>,\n    ET & InferTransforms<C>\n  >\n> {\n  const plugin = { ...basePlugin } as unknown as PlatePlugin;\n\n  methodsToWrap.forEach((method) => {\n    const originalMethod = plugin[method];\n\n    (plugin as any)[method] = (...args: any[]) => {\n      const slatePlugin = originalMethod(...args);\n\n      return toPlatePlugin(slatePlugin);\n    };\n  });\n\n  plugin.withComponent = (component) => {\n    return plugin.extend({\n      node: { component },\n      render: { node: component },\n    }) as any;\n  };\n\n  if (!extendConfig) return plugin as any;\n\n  const extendedPlugin = plugin.extend(extendConfig as any);\n\n  return extendedPlugin as any;\n}\n\ntype ExtendPluginConfig<C extends AnyPluginConfig = PluginConfig> = Omit<\n  Partial<\n    PlatePlugin<\n      PluginConfig<\n        C['key'],\n        Partial<InferOptions<C>>,\n        Partial<InferApi<C>>,\n        Partial<InferTransforms<C>>\n      >\n    >\n  >,\n  keyof PlatePluginMethods\n>;\n\n/**\n * Explicitly typed version of {@link toPlatePlugin}.\n *\n * @remarks\n *   This function requires explicit type parameters for both the base plugin\n *   configuration and the extension configuration. Use this when you need\n *   precise control over the plugin's type structure or when type inference\n *   doesn't provide the desired result.\n * @typeParam C - The type of the extension configuration for the PlatePlugin\n *   (required).\n * @typeParam TContext - The type of the base SlatePlugin configuration\n *   (optional).\n */\nexport function toTPlatePlugin<\n  C extends AnyPluginConfig = PluginConfig,\n  TContext extends AnyPluginConfig = AnyPluginConfig,\n>(\n  basePlugin: SlatePlugin<TContext>,\n  extendConfig?:\n    | ((ctx: PlatePluginContext<TContext>) => ExtendPluginConfig<C>)\n    | ExtendPluginConfig<C>\n): PlatePlugin<\n  PluginConfig<C['key'], InferOptions<C>, InferApi<C>, InferTransforms<C>>\n> {\n  return toPlatePlugin(basePlugin as any, extendConfig as any);\n}\n","import type { Modify } from '@udecode/utils';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { PlatePlugin, PlatePluginMethods } from './PlatePlugin';\n\nimport {\n  type AnyPluginConfig,\n  type PluginConfig,\n  createSlatePlugin,\n} from '../../lib';\nimport { toPlatePlugin } from './toPlatePlugin';\n\ntype PlatePluginConfig<K extends string = any, O = {}, A = {}, T = {}> = Omit<\n  Partial<\n    Modify<\n      PlatePlugin<PluginConfig<K, O, A, T>>,\n      {\n        node: Partial<PlatePlugin<PluginConfig<K, O, A, T>>['node']>;\n      }\n    >\n  >,\n  keyof PlatePluginMethods | 'optionsStore' | 'useOptionsStore'\n>;\n\ntype TPlatePluginConfig<C extends AnyPluginConfig = PluginConfig> = Omit<\n  Partial<\n    Modify<\n      PlatePlugin<C>,\n      {\n        node: Partial<PlatePlugin<C>['node']>;\n      }\n    >\n  >,\n  keyof PlatePluginMethods | 'optionsStore' | 'useOptionsStore'\n>;\n\nexport const createPlatePlugin = <\n  K extends string = any,\n  O = {},\n  A = {},\n  T = {},\n>(\n  config:\n    | ((editor: PlateEditor) => PlatePluginConfig<K, O, A, T>)\n    | PlatePluginConfig<K, O, A, T> = {}\n): PlatePlugin<PluginConfig<K, O, A, T>> => {\n  const plugin = createSlatePlugin(config as any);\n\n  return toPlatePlugin(plugin as any) as any;\n};\n\n/**\n * Explicitly typed version of `createPlatePlugin`.\n *\n * @remarks\n *   While `createPlatePlugin` uses type inference, this function requires an\n *   explicit type parameter. Use this when you need precise control over the\n *   plugin's type structure or when type inference doesn't provide the desired\n *   result.\n */\nexport function createTPlatePlugin<C extends AnyPluginConfig = PluginConfig>(\n  config:\n    | ((editor: PlateEditor) => TPlatePluginConfig<C>)\n    | TPlatePluginConfig<C> = {}\n): PlatePlugin<C> {\n  return createPlatePlugin(config as any) as any;\n}\n","import type { PlateEditor } from '../editor';\nimport type {\n  InferConfig,\n  PlatePlugin,\n  PlatePluginContext,\n} from './PlatePlugin';\n\nimport {\n  type AnyPluginConfig,\n  type WithRequiredKey,\n  getEditorPlugin as getBaseEditorPlugin,\n} from '../../lib';\n\nexport function getEditorPlugin<\n  P extends AnyPluginConfig | PlatePlugin<AnyPluginConfig>,\n>(\n  editor: PlateEditor,\n  plugin: WithRequiredKey<P>\n): PlatePluginContext<InferConfig<P> extends never ? P : InferConfig<P>> {\n  return {\n    ...(getBaseEditorPlugin(editor, plugin) as any),\n    useOption: (key: any, ...args: any) =>\n      editor.useOption(plugin, key, ...args),\n  };\n}\n","import type { AnyPluginConfig, PluginConfig, WithRequiredKey } from '../../lib';\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { PlatePlugin } from './PlatePlugin';\n\nimport { createPlatePlugin } from './createPlatePlugin';\n\n/** Get editor plugin by key or plugin object. */\nexport function getPlugin<C extends AnyPluginConfig = PluginConfig>(\n  editor: PlateEditor,\n  plugin: WithRequiredKey<C>\n): C extends { node: any } ? C : PlatePlugin<C> {\n  return (\n    (editor.plugins[plugin.key] as any) ??\n    createPlatePlugin({ key: plugin.key })\n  );\n}\n","import type { AnyPlatePlugin, PlatePluginContext } from './PlatePlugin';\n\nexport const omitPluginContext = <T extends PlatePluginContext<AnyPlatePlugin>>(\n  ctx: T\n) => {\n  const {\n    api,\n    editor,\n    getOption,\n    getOptions,\n    plugin,\n    setOption,\n    setOptions,\n    tf,\n    type,\n    useOption,\n    ...rest\n  } = ctx;\n\n  return rest;\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { type TEditor, type Value, createTEditor } from '@udecode/slate';\n\nimport type { AnyPlatePlugin } from '../plugin';\nimport type { PlateApiPlugin } from '../plugins';\nimport type { TPlateEditor } from './PlateEditor';\n\nimport {\n  type AnyPluginConfig,\n  type BaseWithSlateOptions,\n  type CorePlugin,\n  type InferPlugins,\n  withSlate,\n} from '../../lib';\nimport { getPlateCorePlugins } from './getPlateCorePlugins';\n\nexport type PlateCorePlugin = CorePlugin | typeof PlateApiPlugin;\n\nexport type WithPlateOptions<\n  V extends Value = Value,\n  P extends AnyPluginConfig = PlateCorePlugin,\n> = BaseWithSlateOptions<V, P> &\n  Pick<\n    Partial<AnyPlatePlugin>,\n    | 'api'\n    | 'decorate'\n    | 'extendEditor'\n    | 'handlers'\n    | 'inject'\n    | 'normalizeInitialValue'\n    | 'options'\n    | 'override'\n    | 'priority'\n    | 'render'\n    | 'shortcuts'\n    | 'transforms'\n    | 'useHooks'\n  > & {\n    rootPlugin?: (plugin: AnyPlatePlugin) => AnyPlatePlugin;\n  };\n\n/**\n * Applies Plate-specific enhancements to an editor instance with ReactPlugin.\n *\n * @see {@link createPlateEditor} for a higher-level React editor creation function.\n * @see {@link usePlateEditor} for a memoized version in React components.\n * @see {@link withSlate} for the non-React version of editor enhancement\n */\nexport const withPlate = <\n  V extends Value = Value,\n  P extends AnyPluginConfig = PlateCorePlugin,\n>(\n  e: TEditor,\n  { plugins = [], ...options }: WithPlateOptions<V, P> = {}\n): TPlateEditor<V, InferPlugins<P[]>> => {\n  const editor = withSlate<V, P>(e, {\n    ...options,\n    plugins: [...getPlateCorePlugins(), ...plugins],\n  } as any) as unknown as TPlateEditor<V, InferPlugins<P[]>>;\n\n  editor.useOptions = ((plugin: any, selector: any, equalityFn: any) => {\n    const store = editor.getOptionsStore(plugin);\n\n    if (!store) {\n      editor.api.debug.error(\n        `editor.useOptions: ${plugin.key} plugin is missing`,\n        'PLUGIN_MISSING'\n      );\n    }\n\n    return store.useStore(selector, equalityFn);\n  }) as any;\n\n  editor.useOption = (plugin: any, key: any, ...args: any) => {\n    const store = editor.getOptionsStore(plugin);\n\n    if (!store) {\n      editor.api.debug.error(\n        `editor.useOption: ${plugin.key} plugin is missing`,\n        'PLUGIN_MISSING'\n      );\n    }\n\n    const useState = (store as any)?.use[key];\n\n    if (useState) {\n      return useState(...args);\n    }\n\n    editor.api.debug.error(\n      `editor.useOption: ${key} option is not defined in plugin ${plugin.key}`,\n      'OPTION_UNDEFINED'\n    );\n  };\n\n  return editor;\n};\n\nexport type CreatePlateEditorOptions<\n  V extends Value = Value,\n  P extends AnyPluginConfig = PlateCorePlugin,\n> = WithPlateOptions<V, P> & {\n  /**\n   * Initial editor to be extended with `withPlate`.\n   *\n   * @default createEditor()\n   */\n  editor?: TEditor;\n};\n\n/**\n * Creates a fully configured Plate editor with optional customizations.\n *\n * @remarks\n *   This function creates a Plate editor with the following enhancements and\n *   configurations:\n *\n *   1. Editor Initialization:\n *\n *   - Assigns a unique ID to the editor if not already present.\n *   - Extend editor state properties.\n *\n *   2. Plugin System:\n *\n *   - Integrates core plugins and user-provided plugins.\n *   - Creates a root plugin that encapsulates all other plugins.\n *   - Resolves plugins into editor.plugins, editor.pluginList.\n *\n *   3. Content Initialization:\n *\n *   - Sets initial editor content if provided.\n *   - Ensures the editor always has content by using a default factory if empty.\n *\n *   4. Selection Handling:\n *\n *   - Applies initial selection if provided.\n *   - Supports auto-selection at start or end of the document.\n *\n *   5. Normalization:\n *\n *   - Performs initial value normalization.\n *   - Optionally applies full editor normalization.\n *\n *   6. Extensibility:\n *\n *   - Allows for deep customization through plugins and overrides.\n *   - Supports custom editor types and configurations.\n *\n *   The resulting editor is a fully-initialized Plate instance, ready for use\n *   with Plate components and APIs, with all core functionalities and custom\n *   plugins applied.\n * @example\n *   const editor = createPlateEditor({\n *     plugins: [ParagraphPlugin, BoldPlugin],\n *     override: {\n *       components: {\n *         [ParagraphPlugin.key]: CustomParagraphComponent,\n *       },\n *     },\n *   });\n *\n * @template V - The value type.\n * @template P - The plugins type.\n * @see {@link createSlateEditor} for a non-React version of editor creation.\n *  * @see {@link usePlateEditor} for a memoized version, suitable for use in React components.\n *  * @see {@link withPlate} for the underlying function that applies Plate enhancements to an editor.\n *  * @see {@link withSlate} for a non-React version of editor enhancement.\n */\nexport const createPlateEditor = <\n  V extends Value = Value,\n  P extends AnyPluginConfig = PlateCorePlugin,\n>({\n  editor = createTEditor(),\n  ...options\n}: CreatePlateEditorOptions<V, P> = {}): TPlateEditor<V, InferPlugins<P[]>> => {\n  return withPlate<V, P>(editor, options);\n};\n","import { createTPlatePlugin } from '../plugin';\n\nexport const PlateApiPlugin = createTPlatePlugin({\n  key: 'plateApi',\n  dependencies: ['debug'],\n}).extendEditorApi(({ editor }) => ({\n  redecorate: () => {\n    editor.api.debug.warn(\n      `The method editor.api.redecorate() has not been overridden. ` +\n        `This may cause unexpected behavior. Please ensure that all required editor methods are properly defined.`,\n      'OVERRIDE_MISSING'\n    );\n  },\n}));\n","import { SlateNextPlugin } from '../../lib';\nimport { toPlatePlugin } from '../plugin';\n\nexport const SlateReactNextPlugin = toPlatePlugin(SlateNextPlugin, {\n  handlers: {\n    onKeyDown: ({ editor, event }: any) => {\n      // React 16.x needs this event to be persistented due to it's event pooling implementation.\n      // https://reactjs.org/docs/legacy-event-pooling.html\n      event.persist();\n      editor.currentKeyboardEvent = event;\n    },\n  },\n});\n","import { createZustandStore } from '../../../lib';\n\nexport type EventEditorState = {\n  /** Last editor id that has been blurred. */\n  blur: string | null;\n  /** Editor id that is currently being focused. */\n  focus: string | null;\n  /** Last editor id. */\n  last: string | null;\n};\n\n/** Store where the keys are event names and the values are editor ids. */\nexport const EventEditorStore = createZustandStore('event-editor')({\n  blur: null,\n  focus: null,\n  last: null,\n} as EventEditorState);\n\nexport const eventEditorActions = EventEditorStore.set;\n\nexport const eventEditorSelectors = EventEditorStore.get;\n\nexport const useEventEditorSelectors = EventEditorStore.use;\n","import { useEffect } from 'react';\n\nimport type { PlateEditor } from '../../editor/PlateEditor';\n\nexport const FOCUS_EDITOR_EVENT = 'focus-editor-event';\n\nexport const BLUR_EDITOR_EVENT = 'blur-editor-event';\n\nexport const useFocusEditorEvents = ({\n  editorRef,\n  onEditorBlur,\n  onEditorFocus,\n}: {\n  editorRef: PlateEditor | null;\n  onEditorBlur?: () => void;\n  onEditorFocus?: () => void;\n}) => {\n  useEffect(() => {\n    const onFocusEditor = (event: Event) => {\n      const id = (event as any).detail.id;\n\n      if (!!onEditorFocus && editorRef && editorRef.id === id) {\n        onEditorFocus();\n      }\n    };\n    const onBlurEditor = (event: Event) => {\n      const id = (event as any).detail.id;\n\n      if (!!onEditorBlur && editorRef && editorRef.id === id) {\n        onEditorBlur();\n      }\n    };\n\n    document.addEventListener(FOCUS_EDITOR_EVENT, onFocusEditor);\n    document.addEventListener(BLUR_EDITOR_EVENT, onBlurEditor);\n\n    return () => {\n      document.removeEventListener(FOCUS_EDITOR_EVENT, onFocusEditor);\n      document.removeEventListener(BLUR_EDITOR_EVENT, onBlurEditor);\n    };\n  }, [editorRef, onEditorBlur, onEditorFocus]);\n};\n","import { createPlatePlugin } from '../../plugin';\nimport { eventEditorActions, eventEditorSelectors } from './EventEditorStore';\nimport { BLUR_EDITOR_EVENT, FOCUS_EDITOR_EVENT } from './useFocusEditorEvents';\n\nexport const EventEditorPlugin = createPlatePlugin({\n  key: 'eventEditor',\n  handlers: {\n    onBlur: ({ editor }) => {\n      const focus = eventEditorSelectors.focus();\n\n      if (focus === editor.id) {\n        eventEditorActions.focus(null);\n      }\n\n      eventEditorActions.blur(editor.id);\n\n      document.dispatchEvent(\n        new CustomEvent(BLUR_EDITOR_EVENT, {\n          detail: { id: editor.id },\n        })\n      );\n    },\n    onFocus: ({ editor }) => {\n      eventEditorActions.focus(editor.id);\n\n      document.dispatchEvent(\n        new CustomEvent(FOCUS_EDITOR_EVENT, {\n          detail: { id: editor.id },\n        })\n      );\n    },\n  },\n});\n","import { eventEditorSelectors } from './EventEditorStore';\n\nexport const getEventPlateId = (id?: string) => {\n  if (id) return id;\n\n  const focus = eventEditorSelectors.focus();\n\n  if (focus) return focus;\n\n  const blur = eventEditorSelectors.blur();\n\n  if (blur) return blur;\n\n  return eventEditorSelectors.last() ?? 'plate';\n};\n","import { Key } from '@udecode/react-hotkeys';\n\nimport { BaseParagraphPlugin } from '../../../lib';\nimport { toPlatePlugin } from '../../plugin/toPlatePlugin';\n\nexport const ParagraphPlugin = toPlatePlugin(\n  BaseParagraphPlugin,\n  ({ editor, type }) => ({\n    shortcuts: {\n      toggleParagraph: {\n        keys: [\n          [Key.Mod, Key.Alt, '0'],\n          [Key.Mod, Key.Shift, '0'],\n        ],\n        preventDefault: true,\n        handler: () => {\n          editor.tf.toggle.block({ type });\n        },\n      },\n    },\n  })\n);\n","import { focusEditorEdge, isEditorFocused } from '@udecode/slate-react';\n\nimport { createSlatePlugin } from '../../../lib';\nimport { withPlateReact } from './withPlateReact';\n\n/** @see {@link withReact} */\nexport const ReactPlugin = createSlatePlugin({\n  key: 'dom',\n  extendEditor: withPlateReact,\n}).extendEditorTransforms(({ editor }) => {\n  const { reset } = editor.tf;\n\n  return {\n    reset: () => {\n      const isFocused = isEditorFocused(editor);\n\n      reset();\n\n      if (isFocused) {\n        focusEditorEdge(editor, { edge: 'start' });\n      }\n    },\n  };\n});\n","import { withReact } from 'slate-react';\n\nimport type { ExtendEditor } from '../../../lib';\n\nexport const withPlateReact: ExtendEditor = ({ editor }) => {\n  return withReact(editor as any);\n};\n","import { ParagraphPlugin, ReactPlugin } from '../plugins';\nimport { PlateApiPlugin } from '../plugins/PlateApiPlugin';\nimport { SlateReactNextPlugin } from '../plugins/SlateReactNextPlugin';\nimport { EventEditorPlugin } from '../plugins/event-editor/EventEditorPlugin';\n\nexport const getPlateCorePlugins = () => [\n  SlateReactNextPlugin,\n  ReactPlugin,\n  EventEditorPlugin,\n  PlateApiPlugin,\n  ParagraphPlugin,\n];\n","import {\n  type CreatePlateEditorOptions,\n  createPlateEditor,\n} from '../editor/withPlate';\n\nexport const createPlateFallbackEditor = (\n  options: CreatePlateEditorOptions = {}\n) => {\n  const editor = createPlateEditor(options);\n\n  editor.isFallback = true;\n\n  editor.apply = () => {\n    throw new Error(\n      'Cannot apply operations on the fallback editor. The fallback editor is used when a hook that depends on the Plate store was unable to locate a valid store. If you are using PlateController, use `useEditorMounted(id?: string)` or `!editor.isFallback` to ensure that a valid Plate store is available before attempting to call operations on the editor.'\n    );\n  };\n\n  return editor;\n};\n","import type { DOMHandlers } from '../plugin/DOMHandlers';\n\nexport const DOM_HANDLERS: (keyof DOMHandlers)[] = [\n  // Clipboard Events\n  'onCopy',\n  'onCopyCapture',\n  'onCut',\n  'onCutCapture',\n  'onPaste',\n  'onPasteCapture',\n\n  // Composition Events\n  'onCompositionEnd',\n  'onCompositionEndCapture',\n  'onCompositionStart',\n  'onCompositionStartCapture',\n  'onCompositionUpdate',\n  'onCompositionUpdateCapture',\n\n  // Focus Events\n  'onFocus',\n  'onFocusCapture',\n  'onBlur',\n  'onBlurCapture',\n\n  // Form Events\n  'onDOMBeforeInput',\n  'onBeforeInput',\n  'onBeforeInputCapture',\n  'onInput',\n  'onInputCapture',\n  'onReset',\n  'onResetCapture',\n  'onSubmit',\n  'onSubmitCapture',\n  'onInvalid',\n  'onInvalidCapture',\n\n  // Image Events\n  'onLoad',\n  'onLoadCapture',\n\n  // Keyboard Events\n  'onKeyDown',\n  'onKeyDownCapture',\n  'onKeyPress',\n  'onKeyPressCapture',\n  'onKeyUp',\n  'onKeyUpCapture',\n\n  // Media Events\n  'onAbort',\n  'onAbortCapture',\n  'onCanPlay',\n  'onCanPlayCapture',\n  'onCanPlayThrough',\n  'onCanPlayThroughCapture',\n  'onDurationChange',\n  'onDurationChangeCapture',\n  'onEmptied',\n  'onEmptiedCapture',\n  'onEncrypted',\n  'onEncryptedCapture',\n  'onEnded',\n  'onEndedCapture',\n  'onLoadedData',\n  'onLoadedDataCapture',\n  'onLoadedMetadata',\n  'onLoadedMetadataCapture',\n  'onLoadStart',\n  'onLoadStartCapture',\n  'onPause',\n  'onPauseCapture',\n  'onPlay',\n  'onPlayCapture',\n  'onPlaying',\n  'onPlayingCapture',\n  'onProgress',\n  'onProgressCapture',\n  'onRateChange',\n  'onRateChangeCapture',\n  'onSeeked',\n  'onSeekedCapture',\n  'onSeeking',\n  'onSeekingCapture',\n  'onStalled',\n  'onStalledCapture',\n  'onSuspend',\n  'onSuspendCapture',\n  'onTimeUpdate',\n  'onTimeUpdateCapture',\n  'onVolumeChange',\n  'onVolumeChangeCapture',\n  'onWaiting',\n  'onWaitingCapture',\n\n  // MouseEvents\n  'onAuxClick',\n  'onAuxClickCapture',\n  'onClick',\n  'onClickCapture',\n  'onContextMenu',\n  'onContextMenuCapture',\n  'onDoubleClick',\n  'onDoubleClickCapture',\n  'onDrag',\n  'onDragCapture',\n  'onDragEnd',\n  'onDragEndCapture',\n  'onDragEnter',\n  'onDragEnterCapture',\n  'onDragExit',\n  'onDragExitCapture',\n  'onDragLeave',\n  'onDragLeaveCapture',\n  'onDragOver',\n  'onDragOverCapture',\n  'onDragStart',\n  'onDragStartCapture',\n  'onDrop',\n  'onDropCapture',\n  'onMouseDown',\n  'onMouseDownCapture',\n  'onMouseEnter',\n  'onMouseLeave',\n  'onMouseMove',\n  'onMouseMoveCapture',\n  'onMouseOut',\n  'onMouseOutCapture',\n  'onMouseOver',\n  'onMouseOverCapture',\n  'onMouseUp',\n  'onMouseUpCapture',\n\n  // Selection Events\n  'onSelect',\n  'onSelectCapture',\n\n  // Touch Events\n  'onTouchCancel',\n  'onTouchCancelCapture',\n  'onTouchEnd',\n  'onTouchEndCapture',\n  'onTouchMove',\n  'onTouchMoveCapture',\n  'onTouchStart',\n  'onTouchStartCapture',\n\n  // Pointer Events\n  'onPointerDown',\n  'onPointerDownCapture',\n  'onPointerMove',\n  'onPointerUp',\n  'onPointerUpCapture',\n  'onPointerCancel',\n  'onPointerCancelCapture',\n  'onPointerEnter',\n  'onPointerLeave',\n  'onPointerOver',\n  'onPointerOverCapture',\n  'onPointerOut',\n  'onPointerOutCapture',\n  'onGotPointerCapture',\n  'onGotPointerCaptureCapture',\n  'onLostPointerCapture',\n  'onLostPointerCaptureCapture',\n\n  // UI Events\n  'onScroll',\n  'onScrollCapture',\n\n  // Wheel Events\n  'onWheel',\n  'onWheelCapture',\n\n  // Animation Events\n  'onAnimationStart',\n  'onAnimationStartCapture',\n  'onAnimationEnd',\n  'onAnimationEndCapture',\n  'onAnimationIteration',\n  'onAnimationIterationCapture',\n\n  // Transition Events\n  'onTransitionEnd',\n  'onTransitionEndCapture',\n];\n","import type { AnyObject } from '@udecode/utils';\n\nimport { clsx } from 'clsx';\nimport pick from 'lodash/pick.js';\n\nimport type { PlateEditor } from '../editor';\nimport type { AnyEditorPlatePlugin } from '../plugin/PlatePlugin';\nimport type { PlateRenderNodeProps } from '../plugin/PlateRenderNodeProps';\n\nimport { getSlateClass } from '../../lib';\nimport { getEditorPlugin } from '../plugin';\n\n/**\n * Override node props with plugin props. Allowed properties in\n * `props.element.attributes` are passed as `nodeProps`. Extend the class name\n * with the node type.\n */\nexport const getRenderNodeProps = ({\n  attributes,\n  editor,\n  plugin,\n  props,\n}: {\n  editor: PlateEditor;\n  plugin: AnyEditorPlatePlugin;\n  props: PlateRenderNodeProps;\n  attributes?: AnyObject;\n}): PlateRenderNodeProps => {\n  let newProps: AnyObject = {};\n\n  if (plugin.node.props) {\n    newProps =\n      (typeof plugin.node.props === 'function'\n        ? plugin.node.props(props as any)\n        : plugin.node.props) ?? {};\n  }\n  if (!newProps.nodeProps && attributes) {\n    /**\n     * WARNING: Improper use of `dangerouslyAllowAttributes` WILL make your\n     * application vulnerable to cross-site scripting (XSS) or information\n     * exposure attacks.\n     *\n     * @see {@link BasePluginNode.dangerouslyAllowAttributes}\n     */\n    newProps.nodeProps = pick(\n      attributes,\n      plugin.node.dangerouslyAllowAttributes ?? []\n    );\n  }\n\n  props = { ...props, ...newProps };\n\n  if (props.nodeProps) {\n    // remove attributes values that are undefined\n    Object.keys(props.nodeProps).forEach((key) => {\n      if (props.nodeProps?.[key] === undefined) {\n        delete props.nodeProps?.[key];\n      }\n    });\n  }\n\n  const { className } = props;\n\n  return {\n    ...props,\n    className: clsx(getSlateClass(plugin.node.type), className),\n    ...(getEditorPlugin(editor, plugin) as any),\n  };\n};\n","import type React from 'react';\n\nimport type { TEditor } from '@udecode/slate';\n\nimport { isComposing } from '@udecode/slate-react';\n\nimport { Hotkeys as VanillaHotkeys, createHotkey } from '../../lib';\n\nconst createComposing =\n  (key: string) =>\n  (\n    editor: TEditor,\n    event: React.KeyboardEvent,\n    {\n      composing,\n    }: {\n      /** Ignore the event if composing. */\n      composing?: boolean;\n    } = {}\n  ) => {\n    if (!createHotkey(key)(event)) return false;\n    if (!!composing !== isComposing(editor)) return false;\n\n    return true;\n  };\n\nexport const Hotkeys = {\n  ...VanillaHotkeys,\n  isTab: createComposing('tab'),\n  isUntab: createComposing('untab'),\n};\n","import type { TNodeEntry } from '@udecode/slate';\nimport type { TEditableProps } from '@udecode/slate-react';\nimport type { Range } from 'slate';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\n\nimport { getEditorPlugin } from '../plugin';\n\n/**\n * @see {@link Decorate} .\n * Optimization: return undefined if empty list so Editable uses a memo.\n */\nexport const pipeDecorate = (\n  editor: PlateEditor,\n  decorateProp?:\n    | ((ctx: { editor: PlateEditor; entry: TNodeEntry }) => Range[] | undefined)\n    | null\n): TEditableProps['decorate'] => {\n  const relevantPlugins = editor.pluginList.filter((plugin) => plugin.decorate);\n\n  if (relevantPlugins.length === 0 && !decorateProp) return;\n\n  return (entry: TNodeEntry) => {\n    let ranges: Range[] = [];\n\n    const addRanges = (newRanges?: Range[]) => {\n      if (newRanges?.length) ranges = [...ranges, ...newRanges];\n    };\n\n    relevantPlugins.forEach((plugin) => {\n      addRanges(\n        plugin.decorate!({\n          ...(getEditorPlugin(editor, plugin) as any),\n          entry,\n        })\n      );\n    });\n\n    if (decorateProp) {\n      addRanges(\n        decorateProp({\n          editor,\n          entry,\n        })\n      );\n    }\n\n    return ranges;\n  };\n};\n","import type React from 'react';\n\nimport type { TEditableProps } from '@udecode/slate-react';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { DOMHandlers } from '../plugin/DOMHandlers';\n\nimport { getEditorPlugin } from '../plugin/getEditorPlugin';\n\nexport const convertDomEventToSyntheticEvent = (\n  domEvent: Event\n): React.SyntheticEvent<unknown, unknown> => {\n  let propagationStopped = false;\n\n  return {\n    ...domEvent,\n    bubbles: domEvent.bubbles,\n    cancelable: domEvent.cancelable,\n    currentTarget: domEvent.currentTarget!,\n    defaultPrevented: domEvent.defaultPrevented,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented: () => domEvent.defaultPrevented,\n    isPropagationStopped: () => propagationStopped,\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: domEvent,\n    persist: () => {\n      throw new Error(\n        'persist is not implemented for synthetic events created using convertDomEventToSyntheticEvent'\n      );\n    },\n    preventDefault: () => domEvent.preventDefault(),\n    stopPropagation: () => {\n      propagationStopped = true;\n      domEvent.stopPropagation();\n    },\n    target: domEvent.target!,\n    timeStamp: domEvent.timeStamp,\n    type: domEvent.type,\n  };\n};\n\n/** Check if an event is overrided by a handler. */\nexport const isEventHandled = <\n  EventType extends React.SyntheticEvent<unknown, unknown>,\n>(\n  event: EventType,\n  handler?: (event: EventType) => boolean | void\n) => {\n  if (!handler) {\n    return false;\n  }\n\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event);\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n\n  return event.isPropagationStopped();\n};\n\n/**\n * Generic pipe for handlers.\n *\n * - Get all the plugins handlers by `handlerKey`.\n * - If there is no plugin handler or editable prop handler for this key, return\n *   `undefined`.\n * - Return a handler calling all the plugins handlers then the prop handler.\n * - Any handler returning true will stop the next handlers to be called,\n *   including slate internal handler.\n */\nexport const pipeHandler = <K extends keyof DOMHandlers>(\n  editor: PlateEditor,\n  {\n    editableProps,\n    handlerKey,\n  }: { handlerKey: K; editableProps?: Omit<TEditableProps, 'decorate'> | null }\n): ((event: any) => void) | undefined => {\n  const propsHandler = editableProps?.[handlerKey] as (\n    event: any\n  ) => boolean | void;\n\n  const relevantPlugins = editor.pluginList.filter(\n    (plugin) => plugin.handlers?.[handlerKey]\n  );\n\n  if (relevantPlugins.length === 0 && !propsHandler) return;\n\n  return (event: any) => {\n    const isDomEvent = event instanceof Event;\n    const handledEvent = isDomEvent\n      ? convertDomEventToSyntheticEvent(event)\n      : event;\n\n    const eventIsHandled = relevantPlugins.some((plugin) => {\n      const pluginHandler = plugin.handlers[handlerKey]!;\n\n      const shouldTreatEventAsHandled = pluginHandler({\n        ...(getEditorPlugin(editor, plugin) as any),\n        event: handledEvent,\n      });\n\n      if (shouldTreatEventAsHandled != null) {\n        return shouldTreatEventAsHandled;\n      }\n\n      return false;\n    });\n\n    if (eventIsHandled) return true;\n\n    return isEventHandled(handledEvent, propsHandler);\n  };\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\n\nimport { getEditorPlugin } from '../plugin/getEditorPlugin';\n\nexport const pipeOnChange = (editor: PlateEditor, value: Value) => {\n  return editor.pluginList.some((plugin) => {\n    const handler = plugin.handlers.onChange;\n\n    if (!handler) {\n      return false;\n    }\n\n    // The custom event handler may return a boolean to specify whether the event\n    // shall be treated as being handled or not.\n    const shouldTreatEventAsHandled = handler({\n      ...(getEditorPlugin(editor, plugin) as any),\n      value,\n    });\n\n    if (shouldTreatEventAsHandled != null) {\n      return shouldTreatEventAsHandled;\n    }\n\n    return false;\n  });\n};\n","import React from 'react';\n\nimport type { TEditableProps } from '@udecode/slate-react';\n\nimport { DefaultElement } from 'slate-react';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\n\nimport { pipeInjectNodeProps } from '../../lib';\nimport { type RenderElement, pluginRenderElement } from './pluginRenderElement';\n\n/** @see {@link RenderElement} */\nexport const pipeRenderElement = (\n  editor: PlateEditor,\n  renderElementProp?: TEditableProps['renderElement']\n): TEditableProps['renderElement'] => {\n  const renderElements: RenderElement[] = [];\n\n  editor.pluginList.forEach((plugin) => {\n    if (plugin.node.isElement) {\n      renderElements.push(pluginRenderElement(editor, plugin));\n    }\n  });\n\n  return function render(nodeProps) {\n    const props = pipeInjectNodeProps(editor, nodeProps);\n\n    let element;\n\n    renderElements.some((renderElement) => {\n      element = renderElement(props as any);\n\n      return !!element;\n    });\n\n    if (element) return element;\n    if (renderElementProp) {\n      return renderElementProp(props);\n    }\n\n    return <DefaultElement {...props} />;\n  };\n};\n","import React from 'react';\n\nimport { DefaultElement } from 'slate-react';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { AnyEditorPlatePlugin } from '../plugin/PlatePlugin';\nimport type { PlateRenderElementProps } from '../plugin/PlateRenderElementProps';\n\nimport { ElementProvider } from '../stores/element/useElementStore';\nimport { getRenderNodeProps } from './getRenderNodeProps';\n\n/**\n * Function used to render an element. If the function returns undefined then\n * the next RenderElement function is called. If the function renders a JSX\n * element then that JSX element is rendered.\n */\nexport type RenderElement = (\n  props: PlateRenderElementProps\n) => React.ReactElement | undefined;\n\n/**\n * Get a `Editable.renderElement` handler for `plugin.node.type`. If the type is\n * equals to the slate element type, render `plugin.render.node`. Else, return\n * `undefined` so the pipeline can check the next plugin.\n */\nexport const pluginRenderElement = (\n  editor: PlateEditor,\n  plugin: AnyEditorPlatePlugin\n): RenderElement =>\n  function render(nodeProps) {\n    const {\n      key,\n      render: { node },\n    } = plugin;\n    const { children: _children, element } = nodeProps;\n\n    if (element.type === plugin.node.type) {\n      const Element = node ?? DefaultElement;\n\n      const aboveNodes = editor.pluginList.flatMap(\n        (o) => o.render?.aboveNodes ?? []\n      );\n      const belowNodes = editor.pluginList.flatMap(\n        (o) => o.render?.belowNodes ?? []\n      );\n\n      nodeProps = getRenderNodeProps({\n        attributes: element.attributes as any,\n        editor,\n        plugin,\n        props: nodeProps as any,\n      }) as any;\n\n      let children = _children;\n\n      belowNodes.forEach((withHOC) => {\n        const hoc = withHOC({ ...nodeProps, key } as any);\n\n        if (hoc) {\n          children = hoc({ ...nodeProps, children } as any);\n        }\n      });\n\n      let component: React.ReactNode = (\n        <Element {...nodeProps}>{children}</Element>\n      );\n\n      aboveNodes.forEach((withHOC) => {\n        const hoc = withHOC({ ...nodeProps, key } as any);\n\n        if (hoc) {\n          component = hoc({ ...nodeProps, children: component } as any);\n        }\n      });\n\n      return (\n        <ElementProvider element={element} scope={key}>\n          {component}\n        </ElementProvider>\n      );\n    }\n  };\n","import type { TElement } from '@udecode/slate';\n\nimport type { Nullable } from '../../../lib';\n\nimport { createAtomStore } from '../../libs/jotai';\n\nexport const SCOPE_ELEMENT = 'element';\n\nexport type ElementStoreState = { element: TElement };\n\nconst initialState: Nullable<ElementStoreState> = {\n  element: null,\n};\n\nexport const { ElementProvider, useElementStore } = createAtomStore(\n  initialState as ElementStoreState,\n  { name: 'element' } as const\n);\n","import React from 'react';\n\nimport type { TEditableProps } from '@udecode/slate-react';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { PlateRenderLeafProps } from '../plugin/PlateRenderLeafProps';\n\nimport { pipeInjectNodeProps } from '../../lib';\nimport { DefaultLeaf } from '../components';\nimport { type RenderLeaf, pluginRenderLeaf } from './pluginRenderLeaf';\n\n/** @see {@link RenderLeaf} */\nexport const pipeRenderLeaf = (\n  editor: PlateEditor,\n  renderLeafProp?: TEditableProps['renderLeaf']\n): TEditableProps['renderLeaf'] => {\n  const renderLeafs: RenderLeaf[] = [];\n\n  editor.pluginList.forEach((plugin) => {\n    if (plugin.node.isLeaf && plugin.key) {\n      renderLeafs.push(pluginRenderLeaf(editor, plugin));\n    }\n  });\n\n  return function render(nodeProps) {\n    const props = pipeInjectNodeProps(\n      editor,\n      nodeProps\n    ) as PlateRenderLeafProps;\n\n    renderLeafs.forEach((renderLeaf) => {\n      const newChildren = renderLeaf(props as any);\n\n      if (newChildren !== undefined) {\n        props.children = newChildren;\n      }\n    });\n\n    if (renderLeafProp) {\n      return renderLeafProp(props);\n    }\n\n    return <DefaultLeaf {...props} />;\n  };\n};\n","import React from 'react';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\nimport type { AnyEditorPlatePlugin } from '../plugin/PlatePlugin';\nimport type { PlateRenderLeafProps } from '../plugin/PlateRenderLeafProps';\n\nimport { DefaultLeaf } from '../components/DefaultLeaf';\nimport { getRenderNodeProps } from './getRenderNodeProps';\n\nexport type RenderLeaf = (props: PlateRenderLeafProps) => React.ReactElement;\n\n/**\n * Get a `Editable.renderLeaf` handler for `plugin.node.type`. If the type is\n * equals to the slate leaf type, render `plugin.render.node`. Else, return\n * `children`.\n */\nexport const pluginRenderLeaf = (\n  editor: PlateEditor,\n  plugin: AnyEditorPlatePlugin\n): RenderLeaf =>\n  function render(nodeProps) {\n    const {\n      render: { node },\n    } = plugin;\n    const { children, leaf } = nodeProps;\n\n    if (leaf[plugin.node.type ?? plugin.key]) {\n      const Leaf = node ?? DefaultLeaf;\n\n      const ctxProps = getRenderNodeProps({\n        attributes: leaf.attributes as any,\n        editor,\n        plugin,\n        props: nodeProps as any,\n      }) as any;\n\n      return <Leaf {...ctxProps}>{children}</Leaf>;\n    }\n\n    return children;\n  };\n","import type { PlateEditor } from '../../../editor/PlateEditor';\n\nimport { createPlateFallbackEditor } from '../../../utils';\nimport {\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/** Get editor ref which is never updated. */\nexport const useEditorRef = <E extends PlateEditor = PlateEditor>(\n  id?: string,\n  options: UsePlateEditorStoreOptions = {}\n): E => {\n  return (\n    (usePlateSelectors(id, {\n      debugHookName: 'useEditorRef',\n      ...options,\n    }).editor() as E) ?? createPlateFallbackEditor()\n  );\n};\n","import type {\n  AnyPluginConfig,\n  InferConfig,\n  WithRequiredKey,\n} from '../../../../lib';\nimport type { PlateEditor } from '../../../editor';\n\nimport {\n  type PlatePlugin,\n  type PlatePluginContext,\n  getEditorPlugin,\n} from '../../../plugin';\nimport { useEditorRef } from './useEditorRef';\n\n/** Get editor and plugin context. */\nexport function useEditorPlugin<\n  P extends AnyPluginConfig | PlatePlugin<AnyPluginConfig>,\n  E extends PlateEditor = PlateEditor,\n>(\n  p: WithRequiredKey<P>,\n  id?: string\n): PlatePluginContext<InferConfig<P> extends never ? P : InferConfig<P>, E> {\n  const editor = useEditorRef(id);\n\n  return getEditorPlugin(editor, p) as any;\n}\n","import {\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/**\n * Whether the editor is read-only. You can also use `useReadOnly` from\n * `slate-react` in node components.\n */\nexport const useEditorReadOnly = (\n  id?: string,\n  options: UsePlateEditorStoreOptions = {}\n): boolean => {\n  return !!usePlateSelectors(id, {\n    debugHookName: 'useEditorReadOnly',\n    ...options,\n  }).readOnly();\n};\n","import {\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/** Get the editor selection (deeply memoized). */\nexport const useEditorSelection = (\n  id?: string,\n  options: UsePlateEditorStoreOptions = {}\n) =>\n  usePlateSelectors(id, {\n    debugHookName: 'useEditorSelection',\n    ...options,\n  }).trackedSelection().selection;\n","import React from 'react';\n\nimport { selectAtom } from 'jotai/utils';\n\nimport type { PlateEditor } from '../../../editor/PlateEditor';\n\nimport {\n  type UsePlateEditorStoreOptions,\n  plateStore,\n  usePlateSelectors,\n} from '../createPlateStore';\n\nexport interface UseEditorSelectorOptions<T>\n  extends UsePlateEditorStoreOptions {\n  id?: string;\n  equalityFn?: (a: T, b: T) => boolean;\n}\n\nexport const useEditorSelector = <T, E extends PlateEditor = PlateEditor>(\n  selector: (editor: E, prev?: T) => T,\n  deps: React.DependencyList,\n  {\n    id,\n    equalityFn = (a: T, b: T) => a === b,\n    ...storeOptions\n  }: UseEditorSelectorOptions<T> = {}\n): T => {\n  const selectorAtom = React.useMemo(\n    () =>\n      selectAtom<{ editor: E }, T>(\n        plateStore.atom.trackedEditor,\n        ({ editor }, prev) => selector(editor, prev),\n        equalityFn\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps\n  );\n\n  return usePlateSelectors(id, {\n    debugHookName: 'useEditorSelector',\n    ...storeOptions,\n  }).atom(selectorAtom);\n};\n","import type { PlateEditor } from '../../../editor/PlateEditor';\n\nimport {\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/** Get editor state which is updated on editor change. */\nexport const useEditorState = <E extends PlateEditor = PlateEditor>(\n  id?: string,\n  options: UsePlateEditorStoreOptions = {}\n): E => {\n  return usePlateSelectors(id, {\n    debugHookName: 'useEditorState',\n    ...options,\n  }).trackedEditor().editor;\n};\n","import {\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/** Get the editor value (deeply memoized). */\nexport const useEditorValue = (\n  id?: string,\n  options: UsePlateEditorStoreOptions = {}\n) =>\n  usePlateSelectors(id, {\n    debugHookName: 'useEditorValue',\n    ...options,\n  }).trackedValue().value;\n","import {\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/** Version incremented on each editor change. */\nexport const useEditorVersion = (\n  id?: string,\n  options: UsePlateEditorStoreOptions = {}\n) => {\n  return usePlateSelectors(id, {\n    debugHookName: 'useEditorVersion',\n    ...options,\n  }).versionEditor();\n};\n","import {\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/** Version incremented on selection change. */\nexport const useSelectionVersion = (\n  id?: string,\n  options: UsePlateEditorStoreOptions = {}\n) => {\n  return usePlateSelectors(id, {\n    debugHookName: 'useSelectionVersion',\n    ...options,\n  }).versionSelection();\n};\n","import {\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/** Version incremented on value change. */\nexport const useValueVersion = (\n  id?: string,\n  options: UsePlateEditorStoreOptions = {}\n) => {\n  return usePlateSelectors(id, {\n    debugHookName: 'useValueVersion',\n    ...options,\n  }).versionValue();\n};\n","import type { TElement } from '@udecode/slate';\n\nimport { useEditorRef } from '../plate';\nimport { SCOPE_ELEMENT, useElementStore } from './useElementStore';\n\n/**\n * Get the element by plugin key. If no element is found in the context, it will\n * return an empty object.\n */\nexport const useElement = <T extends TElement = TElement>(\n  pluginKey = SCOPE_ELEMENT\n): T => {\n  const editor = useEditorRef();\n  const value = useElementStore(pluginKey).get.element();\n\n  if (!value) {\n    editor.api.debug.warn(\n      `useElement(${pluginKey}) hook must be used inside the node component's context`,\n      'USE_ELEMENT_CONTEXT'\n    );\n\n    return {} as T;\n  }\n\n  return value as T;\n};\n","import { useEventEditorSelectors } from '../../plugins/event-editor/EventEditorStore';\nimport { PLATE_SCOPE, usePlateSelectors } from '../plate';\n\n/** Get last event editor id: focus, blur or last. */\nexport const useEventPlateId = (id?: string) => {\n  const focus = useEventEditorSelectors.focus();\n  const blur = useEventEditorSelectors.blur();\n  const last = useEventEditorSelectors.last();\n  const providerId = usePlateSelectors().editor().id;\n\n  if (id) return id;\n  if (focus) return focus;\n  if (blur) return blur;\n\n  return last ?? providerId ?? PLATE_SCOPE;\n};\n","import React from 'react';\n\nimport {\n  EXPOSED_STORE_KEYS,\n  useEditorRef,\n  usePlateStore,\n  useRedecorate,\n} from '../stores';\n\nexport const EditorMethodsEffect = ({ id }: { id?: string }) => {\n  const editor = useEditorRef(id);\n  const redecorate = useRedecorate(id);\n\n  const plateStore = usePlateStore(id);\n\n  // Must be in a scope where hooks can be called.\n  const storeSetters = Object.fromEntries(\n    EXPOSED_STORE_KEYS.map((key) => [key, plateStore.set[key]()])\n  ) as any;\n\n  const memorizedStoreSetters = React.useMemo(\n    () => storeSetters,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  React.useEffect(() => {\n    editor.api.redecorate = redecorate;\n\n    editor.setPlateState = (optionKey, value) => {\n      const setter = memorizedStoreSetters;\n\n      setter[optionKey]?.(value);\n    };\n  }, [editor, redecorate, memorizedStoreSetters]);\n\n  return null;\n};\n","import React from 'react';\n\nimport type { AnyEditorPlatePlugin } from '../plugin/PlatePlugin';\n\nimport { getEditorPlugin } from '../plugin';\nimport { useEditorRef, usePlateActions, usePlateSelectors } from '../stores';\n\nexport function EditorRefPluginEffect({\n  id,\n  plugin,\n}: {\n  plugin: AnyEditorPlatePlugin;\n  id?: string;\n}) {\n  const editor = useEditorRef(id);\n\n  plugin.useHooks?.(getEditorPlugin(editor, plugin) as any);\n\n  return null;\n}\n\nexport function EditorRefEffect({ id }: { id?: string }) {\n  const editor = usePlateSelectors(id).editor();\n  const setIsMounted = usePlateActions(id).isMounted();\n\n  React.useEffect(() => {\n    setIsMounted(true);\n\n    return () => {\n      setIsMounted(false);\n    };\n  }, [setIsMounted]);\n\n  return (\n    <>\n      {editor.pluginList.map((plugin) => (\n        <EditorRefPluginEffect id={id} key={plugin.key} plugin={plugin} />\n      ))}\n    </>\n  );\n}\n","/* eslint-disable react/display-name */\nimport React from 'react';\n\nimport { type Selection, Range } from 'slate';\nimport { useSlate } from 'slate-react';\n\nimport { useIncrementVersion } from '../stores';\n\nexport const EditorStateEffect = React.memo(({ id }: { id?: string }) => {\n  const editorState = useSlate();\n  const updateVersionEditor = useIncrementVersion('versionEditor', id);\n\n  React.useEffect(() => {\n    updateVersionEditor();\n  });\n\n  const updateVersionSelection = useIncrementVersion('versionSelection', id);\n  const prevSelectionRef = React.useRef(editorState.selection);\n\n  const sameSelection = isSelectionEqual(\n    prevSelectionRef.current,\n    editorState.selection\n  );\n\n  React.useEffect(() => {\n    if (!sameSelection) {\n      updateVersionSelection();\n    }\n\n    prevSelectionRef.current = editorState.selection;\n  }, [editorState.selection, sameSelection, updateVersionSelection]);\n\n  return null;\n});\n\nconst isSelectionEqual = (a: Selection, b: Selection) => {\n  if (!a && !b) return true;\n  if (!a || !b) return false;\n\n  return Range.equals(a, b);\n};\n","import React from 'react';\n\nimport type { TEditableProps } from '@udecode/slate-react';\n\nimport type { PlateEditor } from '../editor/PlateEditor';\n\nimport { type PlateStoreState, PlateStoreProvider } from '../stores';\n\nexport interface PlateProps<E extends PlateEditor = PlateEditor>\n  extends Partial<\n    Pick<\n      PlateStoreState<E>,\n      | 'decorate'\n      | 'onChange'\n      | 'onSelectionChange'\n      | 'onValueChange'\n      | 'primary'\n      | 'readOnly'\n    >\n  > {\n  children: React.ReactNode;\n\n  editor: E | null;\n\n  renderElement?: TEditableProps['renderElement'];\n\n  renderLeaf?: TEditableProps['renderLeaf'];\n}\n\nfunction PlateInner({\n  children,\n  decorate,\n  editor,\n  primary,\n  readOnly,\n  renderElement,\n  renderLeaf,\n  onChange,\n  onSelectionChange,\n  onValueChange,\n}: PlateProps) {\n  return (\n    <PlateStoreProvider\n      readOnly={readOnly}\n      onChange={onChange}\n      onSelectionChange={onSelectionChange}\n      onValueChange={onValueChange}\n      decorate={decorate}\n      editor={editor!}\n      primary={primary}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scope={editor!.id}\n    >\n      {children}\n    </PlateStoreProvider>\n  );\n}\n\nexport function Plate<E extends PlateEditor = PlateEditor>(\n  props: PlateProps<E>\n) {\n  if (!props.editor) return null;\n\n  return <PlateInner key={props.editor.key} {...(props as any)} />;\n}\n","import React, { useRef } from 'react';\n\nimport type { TEditableProps } from '@udecode/slate-react';\n\nimport { useComposedRef } from '@udecode/react-utils';\nimport { Editable } from 'slate-react';\n\nimport { useEditableProps } from '../hooks';\nimport { type PlateStoreState, useEditorRef } from '../stores';\nimport { EditorHotkeysEffect } from './EditorHotkeysEffect';\nimport { EditorMethodsEffect } from './EditorMethodsEffect';\nimport { EditorRefEffect } from './EditorRefEffect';\nimport { EditorStateEffect } from './EditorStateEffect';\nimport { PlateControllerEffect } from './PlateControllerEffect';\nimport { PlateSlate } from './PlateSlate';\n\nexport type PlateContentProps = Omit<TEditableProps, 'decorate'> & {\n  decorate?: PlateStoreState['decorate'];\n  /** R enders the editable content. */\n  renderEditable?: (editable: React.ReactElement) => React.ReactNode;\n};\n\n/**\n * Editable with plugins.\n *\n * - Decorate prop\n * - DOM handler props\n * - ReadOnly prop\n * - Render.afterEditable\n * - Render.beforeEditable\n * - RenderElement prop\n * - RenderLeaf prop\n * - UseHooks\n */\nconst PlateContent = React.forwardRef(\n  ({ renderEditable, ...props }: PlateContentProps, ref) => {\n    const { id } = props;\n\n    const editor = useEditorRef(id);\n\n    if (!editor) {\n      throw new Error(\n        'Editor not found. Please ensure that PlateContent is rendered below Plate.'\n      );\n    }\n\n    const editableProps = useEditableProps(props);\n\n    const editableRef = useRef<HTMLDivElement | null>(null);\n    const combinedRef = useComposedRef(ref, editableRef);\n\n    const editable = <Editable ref={combinedRef} {...(editableProps as any)} />;\n\n    let afterEditable: React.ReactNode = null;\n    let beforeEditable: React.ReactNode = null;\n\n    editor.pluginList.forEach((plugin) => {\n      const {\n        render: {\n          afterEditable: AfterEditable,\n          beforeEditable: BeforeEditable,\n        },\n      } = plugin;\n\n      if (AfterEditable) {\n        afterEditable = (\n          <>\n            {afterEditable}\n            <AfterEditable {...editableProps} />\n          </>\n        );\n      }\n      if (BeforeEditable) {\n        beforeEditable = (\n          <>\n            {beforeEditable}\n            <BeforeEditable {...editableProps} />\n          </>\n        );\n      }\n    });\n\n    let aboveEditable: React.ReactNode = (\n      <>\n        {beforeEditable}\n\n        {renderEditable ? renderEditable(editable) : editable}\n\n        <EditorMethodsEffect id={id} />\n        <EditorHotkeysEffect id={id} editableRef={editableRef} />\n        <EditorStateEffect id={id} />\n        <EditorRefEffect id={id} />\n        <PlateControllerEffect id={id} />\n\n        {afterEditable}\n      </>\n    );\n\n    editor.pluginList.forEach((plugin) => {\n      const {\n        render: { aboveEditable: AboveEditable },\n      } = plugin;\n\n      if (AboveEditable)\n        aboveEditable = <AboveEditable>{aboveEditable}</AboveEditable>;\n    });\n\n    return <PlateSlate id={id}>{aboveEditable}</PlateSlate>;\n  }\n);\nPlateContent.displayName = 'PlateContent';\n\nexport { PlateContent };\n","import React from 'react';\n\nimport type { TEditableProps } from '@udecode/slate-react';\n\nimport { isDefined } from '@udecode/utils';\nimport omit from 'lodash/omit.js';\nimport { useDeepCompareMemo } from 'use-deep-compare';\n\nimport type { PlateProps } from '../components';\n\nimport { useEditorRef, usePlateSelectors } from '../stores';\nimport { DOM_HANDLERS } from '../utils/dom-attributes';\nimport { pipeDecorate } from '../utils/pipeDecorate';\nimport { pipeHandler } from '../utils/pipeHandler';\nimport { pipeRenderElement } from '../utils/pipeRenderElement';\nimport { pipeRenderLeaf } from '../utils/pipeRenderLeaf';\n\nexport const useEditableProps = (\n  editableProps: Omit<TEditableProps, 'decorate'> &\n    Pick<PlateProps, 'decorate'> = {}\n): TEditableProps => {\n  const { id } = editableProps;\n\n  const editor = useEditorRef(id);\n  const selectors = usePlateSelectors(id);\n  const versionDecorate = selectors.versionDecorate();\n  const readOnly = selectors.readOnly();\n  const storeDecorate = selectors.decorate();\n  const storeRenderLeaf = selectors.renderLeaf();\n  const storeRenderElement = selectors.renderElement();\n\n  const decorateMemo = React.useMemo(() => {\n    return pipeDecorate(editor, storeDecorate ?? editableProps?.decorate);\n  }, [editableProps?.decorate, editor, storeDecorate]);\n\n  const decorate: typeof decorateMemo = React.useMemo(() => {\n    if (!versionDecorate || !decorateMemo) return;\n\n    return (entry) => decorateMemo(entry);\n  }, [decorateMemo, versionDecorate]);\n\n  const renderElement = React.useMemo(() => {\n    return pipeRenderElement(\n      editor,\n      storeRenderElement ?? editableProps?.renderElement\n    );\n  }, [editableProps?.renderElement, editor, storeRenderElement]);\n\n  const renderLeaf = React.useMemo(() => {\n    return pipeRenderLeaf(editor, storeRenderLeaf ?? editableProps?.renderLeaf);\n  }, [editableProps?.renderLeaf, editor, storeRenderLeaf]);\n\n  const props: TEditableProps = useDeepCompareMemo(() => {\n    const _props: TEditableProps = {\n      decorate,\n      renderElement,\n      renderLeaf,\n    };\n\n    if (isDefined(readOnly)) {\n      _props.readOnly = readOnly!;\n    }\n\n    DOM_HANDLERS.forEach((handlerKey) => {\n      const handler = pipeHandler(editor, {\n        editableProps,\n        handlerKey,\n      }) as any;\n\n      if (handler) {\n        _props[handlerKey] = handler;\n      }\n    });\n\n    return _props;\n  }, [decorate, editableProps, renderElement, renderLeaf, readOnly]);\n\n  return useDeepCompareMemo(\n    () => ({\n      ...omit(editableProps, [\n        ...DOM_HANDLERS,\n        'renderElement',\n        'renderLeaf',\n        'decorate',\n      ]),\n      ...props,\n    }),\n    [editableProps, props]\n  );\n};\n","import React from 'react';\n\nimport type { TSelection, Value } from '@udecode/slate';\nimport type { SlateProps } from '@udecode/slate-react';\n\nimport { useEditorRef, usePlateSelectors } from '../stores';\nimport { pipeOnChange } from '../utils/pipeOnChange';\n\n/** Get Slate props stored in a global store. */\nexport const useSlateProps = ({\n  id,\n}: {\n  id?: string;\n}): Omit<SlateProps, 'children'> => {\n  const editor = useEditorRef(id);\n  const onChangeProp = usePlateSelectors(id).onChange();\n  const onValueChangeProp = usePlateSelectors(id).onValueChange();\n  const onSelectionChangeProp = usePlateSelectors(id).onSelectionChange();\n\n  const onChange = React.useCallback(\n    (newValue: Value) => {\n      const eventIsHandled = pipeOnChange(editor, newValue);\n\n      if (!eventIsHandled) {\n        onChangeProp?.({ editor, value: newValue });\n      }\n    },\n    [editor, onChangeProp]\n  );\n\n  const onValueChange: SlateProps['onValueChange'] = React.useMemo(\n    () => (value) => {\n      onValueChangeProp?.({ editor, value });\n    },\n    [editor, onValueChangeProp]\n  );\n\n  const onSelectionChange: SlateProps['onSelectionChange'] = React.useMemo(\n    () => (selection: TSelection) => {\n      onSelectionChangeProp?.({ editor, selection });\n    },\n    [editor, onSelectionChangeProp]\n  );\n\n  return React.useMemo(() => {\n    return {\n      key: editor.key,\n      editor,\n      initialValue: editor.children,\n      value: editor.children,\n      onChange,\n      onSelectionChange,\n      onValueChange,\n    };\n  }, [editor, onChange, onSelectionChange, onValueChange]);\n};\n","import React from 'react';\n\nimport { focusAtom } from 'jotai-optics';\nimport { useFocused } from 'slate-react';\n\nimport {\n  plateControllerStore,\n  useEditorId,\n  usePlateControllerActions,\n  usePlateSelectors,\n  usePlateStore,\n} from '../stores';\n\nexport interface PlateControllerEffectProps {\n  id?: string;\n}\n\nexport const PlateControllerEffect = ({\n  id: idProp,\n}: PlateControllerEffectProps) => {\n  const idFromStore = useEditorId();\n  const id = idProp ?? idFromStore;\n\n  const currentStoreAtom = React.useMemo(\n    () =>\n      focusAtom(plateControllerStore.atom.editorStores, (optic) =>\n        optic.prop(id)\n      ),\n    [id]\n  );\n  const setCurrentStore = usePlateControllerActions().atom(currentStoreAtom, {\n    warnIfNoStore: false,\n  });\n  const store = usePlateStore(id).store();\n\n  const primary = usePlateSelectors(id).primary();\n  const setPrimaryEditorIds = usePlateControllerActions().primaryEditorIds({\n    warnIfNoStore: false,\n  });\n\n  const focused = useFocused();\n  const setActiveId = usePlateControllerActions().activeId({\n    warnIfNoStore: false,\n  });\n\n  React.useEffect(() => {\n    setCurrentStore(store ?? null);\n\n    return () => {\n      setCurrentStore(null);\n      setActiveId((activeId) => (activeId === id ? null : activeId));\n    };\n  }, [store, setCurrentStore, setActiveId, id]);\n\n  React.useEffect(() => {\n    if (primary) {\n      setPrimaryEditorIds((ids) => [...ids, id]);\n\n      return () => {\n        setPrimaryEditorIds((ids) => ids.filter((i) => i !== id));\n      };\n    }\n  }, [id, primary, setPrimaryEditorIds]);\n\n  React.useEffect(() => {\n    if (id && focused) {\n      setActiveId(id);\n    }\n  }, [id, focused, setActiveId]);\n\n  return null;\n};\n","import React from 'react';\n\nimport { Slate } from 'slate-react';\n\nimport { useSlateProps } from '../hooks';\nimport { useEditorRef } from '../stores/plate';\n\n/**\n * Slate with plugins.\n *\n * - OnChange prop\n * - RenderAboveSlate\n */\nexport function PlateSlate({\n  id,\n  children,\n}: {\n  children: React.ReactNode;\n  id?: string;\n}) {\n  const slateProps = useSlateProps({ id });\n\n  const editor = useEditorRef(id);\n\n  let aboveSlate: React.ReactElement | null = (\n    <Slate {...(slateProps as any)}>{children}</Slate>\n  );\n\n  editor.pluginList?.forEach((plugin) => {\n    const {\n      render: { aboveSlate: AboveSlate },\n    } = plugin;\n\n    if (AboveSlate) aboveSlate = <AboveSlate>{aboveSlate}</AboveSlate>;\n  });\n\n  return aboveSlate;\n}\n","import React from 'react';\n\nimport { type CreatePlateEditorOptions, createPlateEditor } from '../editor';\nimport { type PlateProps, Plate } from './Plate';\nimport { type PlateContentProps, PlateContent } from './PlateContent';\n\nexport function PlateTest({\n  editableProps,\n  shouldNormalizeEditor,\n  variant = 'wordProcessor',\n  ...props\n}: CreatePlateEditorOptions &\n  PlateProps & {\n    editableProps?: PlateContentProps;\n    variant?: 'comment' | 'wordProcessor';\n  }) {\n  const { id, editor: _editor, plugins } = props;\n\n  let editor = _editor;\n\n  if (editor && !editor.pluginList) {\n    editor = createPlateEditor({\n      id,\n      editor,\n      plugins,\n      shouldNormalizeEditor,\n    });\n  }\n\n  return (\n    <Plate {...props} editor={editor}>\n      <PlateContent\n        data-testid=\"slate-content-editable\"\n        data-variant={variant}\n        autoFocus\n        {...editableProps}\n      />\n    </Plate>\n  );\n}\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport type { AnyPluginConfig } from '../../lib';\n\nimport {\n  type CreatePlateEditorOptions,\n  type PlateCorePlugin,\n  type TPlateEditor,\n  createPlateEditor,\n} from '../editor';\n\n/**\n * A memoized version of createPlateEditor for use in React components.\n *\n * @param {CreatePlateEditorOptions} options - Configuration options for\n *   creating the Plate editor.\n * @param {React.DependencyList} [deps=[]] - Additional dependencies for the\n *   useMemo hook, in addition to `options.id`. Default is `[]`\n * @see {@link createPlateEditor} for detailed information on React editor creation and configuration.\n * @see {@link createSlateEditor} for a non-React version of editor creation.\n * @see {@link withPlate} for the underlying React-specific enhancement function.\n */\nexport function usePlateEditor<\n  V extends Value = Value,\n  P extends AnyPluginConfig = PlateCorePlugin,\n  TEnabled extends boolean | undefined = undefined,\n>(\n  options: CreatePlateEditorOptions<V, P> & { enabled?: TEnabled } = {},\n  deps: React.DependencyList = []\n): TEnabled extends false\n  ? null\n  : TEnabled extends true | undefined\n    ? TPlateEditor<V, P>\n    : TPlateEditor<V, P> | null {\n  return React.useMemo(\n    (): any => {\n      if (options.enabled === false) return null;\n\n      const editor = createPlateEditor(options);\n\n      return editor;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [options.id, options.enabled, ...deps]\n  );\n}\n","import React from 'react';\n\ntype RefComponent<P, R> = React.FC<P> & {\n  ref?: React.Ref<R>;\n};\n\n/* eslint-disable react/display-name */\nexport const withHOC = <ComponentProps, HOCProps, ComponentRef, HOCRef>(\n  HOC: RefComponent<HOCProps, HOCRef>,\n  Component: RefComponent<ComponentProps, ComponentRef>,\n  hocProps?: Omit<HOCProps, 'children'>,\n  hocRef?: React.Ref<HOCRef>\n) =>\n  React.forwardRef<ComponentRef, ComponentProps>((props, componentRef) => (\n    <HOC {...(hocProps as any)} ref={hocRef}>\n      <Component {...(props as any)} ref={componentRef} />\n    </HOC>\n  ));\n"],"mappings":"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","names":["React","useEffect","isDefined","React","atom","React","atom","atom","React","atom","React","React","React","React","React","config","result","plugin","isElement","isText","replaceNodeChildren","replaceNodeChildren","bindFirst","jsx","isElement","_a","_b","jsx","jsx","jsx","bindFirst","document","isText","isElement","isElement","isDefined","isElement","isDefined","withoutNormalizing","withoutNormalizing","_a","_b","_a","merge","merge","isDefined","merge","merge","isDefined","_a","_b","value","createZustandStore","getEditorPlugin","createTEditor","createZustandStore","createTEditor","clsx","_a","_b","clsx","getEditorPlugin","Hotkeys","getEditorPlugin","getEditorPlugin","getEditorPlugin","React","DefaultElement","React","withHOC","React","React","DefaultElement","React","React","React","React","getEditorPlugin","React","React","React","isDefined","useEffect","React","plateStore","React","React","getEditorPlugin","React","React","React","React","React","React","React","isDefined","React","isDefined","React","React","React","React","React","React","React","React","React","React","React","React","React"]}
{"version":3,"sources":["../src/lib/BaseAudioPlugin.ts","../src/lib/BaseFilePlugin.ts","../src/lib/BaseVideoPlugin.ts","../src/lib/image/BaseImagePlugin.ts","../src/lib/image/transforms/insertImage.ts","../src/lib/image/utils/isImageUrl.ts","../src/lib/image/withImageEmbed.ts","../src/lib/image/withImageUpload.ts","../src/lib/image/withImage.ts","../src/lib/media/insertMedia.ts","../src/lib/media/parseMediaUrl.ts","../src/lib/media-embed/BaseMediaEmbedPlugin.ts","../src/lib/media-embed/parseIframeUrl.ts","../src/lib/media-embed/parseTwitterUrl.ts","../src/lib/media-embed/parseVideoUrl.ts","../src/lib/media-embed/transforms/insertMediaEmbed.ts","../src/lib/placeholder/BasePlaceholderPlugin.ts","../src/lib/placeholder/transforms/insertPlaceholder.ts","../src/lib/placeholder/transforms/setMediaNode.ts"],"sourcesContent":["import { createSlatePlugin } from '@udecode/plate-common';\n\nimport type { TMediaElement } from './media';\n\nexport interface TAudioElement extends TMediaElement {}\n\nexport const BaseAudioPlugin = createSlatePlugin({\n  key: 'audio',\n  node: { isElement: true, isVoid: true },\n});\n","import { createSlatePlugin } from '@udecode/plate-common';\n\nimport type { TMediaElement } from './media';\n\nexport interface TFileElement extends TMediaElement {}\n\nexport const BaseFilePlugin = createSlatePlugin({\n  key: 'file',\n  node: { isElement: true, isVoid: true },\n});\n","import { createSlatePlugin } from '@udecode/plate-common';\n\nimport type { TMediaElement } from '..';\n\nexport interface TVideoElement extends TMediaElement {}\n\nexport const BaseVideoPlugin = createSlatePlugin({\n  key: 'video',\n  node: {\n    dangerouslyAllowAttributes: ['width', 'height'],\n    isElement: true,\n    isVoid: true,\n  },\n});\n","import { type PluginConfig, createTSlatePlugin } from '@udecode/plate-common';\n\nimport type { MediaPluginOptions, TMediaElement } from '../media';\n\nimport { withImage } from './withImage';\n\nexport interface TImageElement extends TMediaElement {}\n\nexport type ImageConfig = PluginConfig<\n  'img',\n  {\n    /**\n     * An optional method that will upload the image to a server. The method\n     * receives the base64 dataUrl of the uploaded image, and should return the\n     * URL of the uploaded image.\n     */\n    uploadImage?: (\n      dataUrl: ArrayBuffer | string\n    ) => ArrayBuffer | Promise<ArrayBuffer | string> | string;\n\n    /** Disable url embed on insert data. */\n    disableEmbedInsert?: boolean;\n\n    /** Disable file upload on insert data. */\n    disableUploadInsert?: boolean;\n  } & MediaPluginOptions\n>;\n\n/** Enables support for images. */\nexport const BaseImagePlugin = createTSlatePlugin<ImageConfig>({\n  key: 'img',\n  extendEditor: withImage,\n  node: {\n    dangerouslyAllowAttributes: ['alt', 'width', 'height'],\n    isElement: true,\n    isVoid: true,\n  },\n}).extend(({ plugin }) => ({\n  parsers: {\n    html: {\n      deserializer: {\n        parse: ({ element }) => ({\n          type: plugin.node.type,\n          url: element.getAttribute('src'),\n        }),\n        rules: [\n          {\n            validNodeName: 'IMG',\n          },\n        ],\n      },\n    },\n  },\n}));\n","import {\n  type InsertNodesOptions,\n  type SlateEditor,\n  insertNodes,\n} from '@udecode/plate-common';\n\nimport { type TImageElement, BaseImagePlugin } from '../BaseImagePlugin';\n\nexport const insertImage = <E extends SlateEditor>(\n  editor: E,\n  url: ArrayBuffer | string,\n  options: InsertNodesOptions<E> = {}\n) => {\n  const text = { text: '' };\n  const image: TImageElement = {\n    children: [text],\n    type: editor.getType(BaseImagePlugin),\n    url: url as any,\n  };\n  insertNodes<TImageElement>(editor, image, {\n    nextBlock: true,\n    ...(options as any),\n  });\n};\n","import { isUrl } from '@udecode/plate-common';\n\nconst imageExtensions = new Set([\n  '3dv',\n  'PI1',\n  'PI2',\n  'PI3',\n  'ai',\n  'amf',\n  'art',\n  'art',\n  'ase',\n  'awg',\n  'blp',\n  'bmp',\n  'bw',\n  'bw',\n  'cd5',\n  'cdr',\n  'cgm',\n  'cit',\n  'cmx',\n  'cpt',\n  'cr2',\n  'cur',\n  'cut',\n  'dds',\n  'dib',\n  'djvu',\n  'dxf',\n  'e2d',\n  'ecw',\n  'egt',\n  'egt',\n  'emf',\n  'eps',\n  'exif',\n  'fs',\n  'gbr',\n  'gif',\n  'gpl',\n  'grf',\n  'hdp',\n  'icns',\n  'ico',\n  'iff',\n  'iff',\n  'int',\n  'int',\n  'inta',\n  'jfif',\n  'jng',\n  'jp2',\n  'jpeg',\n  'jpg',\n  'jps',\n  'jxr',\n  'lbm',\n  'lbm',\n  'liff',\n  'max',\n  'miff',\n  'mng',\n  'msp',\n  'nitf',\n  'nrrd',\n  'odg',\n  'ota',\n  'pam',\n  'pbm',\n  'pc1',\n  'pc2',\n  'pc3',\n  'pcf',\n  'pct',\n  'pcx',\n  'pcx',\n  'pdd',\n  'pdn',\n  'pgf',\n  'pgm',\n  'pict',\n  'png',\n  'pnm',\n  'pns',\n  'ppm',\n  'psb',\n  'psd',\n  'psp',\n  'px',\n  'pxm',\n  'pxr',\n  'qfx',\n  'ras',\n  'raw',\n  'rgb',\n  'rgb',\n  'rgba',\n  'rle',\n  'sct',\n  'sgi',\n  'sgi',\n  'sid',\n  'stl',\n  'sun',\n  'svg',\n  'sxd',\n  'tga',\n  'tga',\n  'tif',\n  'tiff',\n  'v2d',\n  'vnd',\n  'vrml',\n  'vtf',\n  'wdp',\n  'webp',\n  'wmf',\n  'x3d',\n  'xar',\n  'xbm',\n  'xcf',\n  'xpm',\n]);\n\nexport const isImageUrl = (url: string) => {\n  if (!isUrl(url)) return false;\n\n  const ext = new URL(url).pathname.split('.').pop() as string;\n\n  return imageExtensions.has(ext);\n};\n","import type { ExtendEditor } from '@udecode/plate-common';\n\nimport type { ImageConfig } from './BaseImagePlugin';\n\nimport { insertImage } from './transforms/insertImage';\nimport { isImageUrl } from './utils/isImageUrl';\n\n/** If inserted text is image url, insert image instead. */\nexport const withImageEmbed: ExtendEditor<ImageConfig> = ({\n  editor,\n  getOptions,\n}) => {\n  const { insertData } = editor;\n\n  editor.insertData = (dataTransfer: DataTransfer) => {\n    if (getOptions().disableEmbedInsert) {\n      return insertData(dataTransfer);\n    }\n\n    const text = dataTransfer.getData('text/plain');\n\n    if (isImageUrl(text)) {\n      insertImage(editor, text);\n\n      return;\n    }\n\n    insertData(dataTransfer);\n  };\n\n  return editor;\n};\n","import {\n  type ExtendEditor,\n  getInjectedPlugins,\n  pipeInsertDataQuery,\n} from '@udecode/plate-common';\n\nimport type { ImageConfig } from './BaseImagePlugin';\n\nimport { insertImage } from './transforms/insertImage';\n\n/**\n * Allows for pasting images from clipboard. Not yet: dragging and dropping\n * images, selecting them through a file system dialog.\n */\nexport const withImageUpload: ExtendEditor<ImageConfig> = ({\n  editor,\n  getOptions,\n  plugin,\n}) => {\n  const { insertData } = editor;\n\n  editor.insertData = (dataTransfer: DataTransfer) => {\n    if (getOptions().disableUploadInsert) {\n      return insertData(dataTransfer);\n    }\n\n    const text = dataTransfer.getData('text/plain');\n    const { files } = dataTransfer;\n\n    if (!text && files && files.length > 0) {\n      const injectedPlugins = getInjectedPlugins(editor, plugin);\n\n      if (\n        !pipeInsertDataQuery(editor, injectedPlugins, {\n          data: text,\n          dataTransfer,\n        })\n      ) {\n        return insertData(dataTransfer);\n      }\n\n      for (const file of files) {\n        const reader = new FileReader();\n        const [mime] = file.type.split('/');\n\n        if (mime === 'image') {\n          reader.addEventListener('load', async () => {\n            if (!reader.result) {\n              return;\n            }\n\n            const uploadImage = getOptions().uploadImage;\n\n            const uploadedUrl = uploadImage\n              ? await uploadImage(reader.result)\n              : reader.result;\n\n            insertImage(editor, uploadedUrl);\n          });\n\n          reader.readAsDataURL(file);\n        }\n      }\n    } else {\n      insertData(dataTransfer);\n    }\n  };\n\n  return editor;\n};\n","import type { ExtendEditor } from '@udecode/plate-common';\n\nimport type { ImageConfig } from './BaseImagePlugin';\n\nimport { withImageEmbed } from './withImageEmbed';\nimport { withImageUpload } from './withImageUpload';\n\n/**\n * @see withImageUpload\n * @see withImageEmbed\n */\nexport const withImage: ExtendEditor<ImageConfig> = ({ editor, ...ctx }) => {\n  editor = withImageUpload({ editor, ...ctx });\n  editor = withImageEmbed({ editor, ...ctx });\n\n  return editor;\n};\n","import type {\n  InsertNodesOptions,\n  SlateEditor,\n  TEditor,\n} from '@udecode/plate-common';\n\nimport {\n  BaseImagePlugin,\n  BaseMediaEmbedPlugin,\n  insertImage,\n  insertMediaEmbed,\n} from '../..';\n\nexport interface InsertMediaOptions<E extends TEditor = TEditor>\n  extends InsertNodesOptions<E> {\n  /**\n   * Default onClick is getting the image url by calling this promise before\n   * inserting the image.\n   */\n  getUrl?: () => Promise<string>;\n\n  type?: string;\n}\n\nexport const insertMedia = async <E extends SlateEditor>(\n  editor: E,\n  {\n    getUrl,\n    type = editor.getType(BaseImagePlugin),\n    ...options\n  }: InsertMediaOptions<E> = {}\n) => {\n  const url = getUrl\n    ? await getUrl()\n    : window.prompt(\n        `Enter the URL of the ${\n          type === BaseImagePlugin.key\n            ? BaseImagePlugin.key\n            : BaseMediaEmbedPlugin.key\n        }`\n      );\n\n  if (!url) return;\n  if (type === editor.getType(BaseImagePlugin)) {\n    insertImage(editor, url, options);\n  } else {\n    insertMediaEmbed(editor, { url }, options);\n  }\n};\n","export type EmbedUrlData = {\n  id?: string;\n  provider?: string;\n  url?: string;\n};\n\nexport type EmbedUrlParser = (url: string) => EmbedUrlData | undefined;\n\n// Unlike the link plugin, there's no legitimate reason for non-HTTP source URLs\nconst allowedProtocols = new Set(['http:', 'https:']);\n\nexport const parseMediaUrl = (\n  url: string,\n  {\n    urlParsers,\n  }: {\n    urlParsers: EmbedUrlParser[];\n  }\n): EmbedUrlData | undefined => {\n  const embed = (() => {\n    for (const parser of urlParsers) {\n      const data = parser(url);\n\n      if (data) {\n        return data;\n      }\n    }\n  })();\n\n  // Harden against XSS\n  if (embed?.url) {\n    try {\n      const { protocol } = new URL(embed.url);\n\n      if (!allowedProtocols.has(protocol)) {\n        return undefined;\n      }\n    } catch {\n      // eslint-disable-next-line no-console\n      console.warn('Could not parse URL: ' + embed.url);\n\n      return undefined;\n    }\n  }\n\n  return embed;\n};\n","import { type PluginConfig, createTSlatePlugin } from '@udecode/plate-common';\n\nimport type { MediaPluginOptions, TMediaElement } from '../media/index';\n\nimport { parseIframeUrl } from './parseIframeUrl';\n\nexport interface TMediaEmbedElement extends TMediaElement {}\n\nexport type MediaEmbedConfig = PluginConfig<'media_embed', MediaPluginOptions>;\n\n/**\n * Enables support for embeddable media such as YouTube or Vimeo videos,\n * Instagram posts and tweets or Google Maps.\n */\nexport const BaseMediaEmbedPlugin = createTSlatePlugin<MediaEmbedConfig>({\n  key: 'media_embed',\n  node: { isElement: true, isVoid: true },\n  options: {\n    transformUrl: parseIframeUrl,\n  },\n}).extend(({ type }) => ({\n  parsers: {\n    html: {\n      deserializer: {\n        parse: ({ element }) => {\n          const url = element.getAttribute('src');\n\n          if (url) {\n            return {\n              type,\n              url,\n            };\n          }\n        },\n        rules: [\n          {\n            validNodeName: 'IFRAME',\n          },\n        ],\n      },\n    },\n  },\n}));\n","export const parseIframeUrl = (url: string) => {\n  // if not starting with http, assume pasting of full iframe embed code\n  if (!url.startsWith('http')) {\n    const regexMatchSrc = /src=\".*?\"/;\n    const regexGroupQuotes = /\"([^\"]*)\"/;\n\n    const src = regexMatchSrc.exec(url)?.[0];\n    const returnString = src?.match(regexGroupQuotes)?.[1];\n\n    if (returnString) {\n      url = returnString;\n    }\n  }\n\n  return url;\n};\n","import type { EmbedUrlData } from '../media/parseMediaUrl';\n\nconst twitterRegex =\n  // eslint-disable-next-line regexp/no-unused-capturing-group\n  /^https?:\\/\\/(?:twitter|x)\\.com\\/(?:#!\\/)?(\\w+)\\/status(es)?\\/(\\d+)/;\n\nexport const parseTwitterUrl = (url: string): EmbedUrlData | undefined => {\n  if (twitterRegex.exec(url)) {\n    return {\n      id: twitterRegex.exec(url)?.groups?.id,\n      provider: 'twitter',\n      url,\n    };\n  }\n};\n","import { isUrl } from '@udecode/plate-common';\nimport videoParser from 'js-video-url-parser';\n\nimport type { EmbedUrlData } from '../media';\n\nconst YOUTUBE_PREFIX = 'https://www.youtube.com/embed/';\nconst VIMEO_PREFIX = 'https://player.vimeo.com/video/';\nconst DAILYMOTION_PREFIX = 'https://www.dailymotion.com/embed/video/';\nconst YOUKU_PREFIX = 'https://player.youku.com/embed/';\nconst COUB_PREFIX = 'https://coub.com/embed/';\n\nexport const VIDEO_PROVIDERS = [\n  'youtube',\n  'vimeo',\n  'dailymotion',\n  'youku',\n  'coub',\n];\n\nexport const parseVideoUrl = (url: string): EmbedUrlData | undefined => {\n  if (!isUrl(url)) return;\n\n  const videoData = videoParser.parse(url);\n\n  if (videoData?.provider && videoData.id) {\n    const { id, provider } = videoData;\n\n    const providerUrls: Record<string, string> = {\n      coub: `${COUB_PREFIX}${id}`,\n      dailymotion: `${DAILYMOTION_PREFIX}${id}`,\n      vimeo: `${VIMEO_PREFIX}${id}`,\n      youku: `${YOUKU_PREFIX}${id}`,\n      youtube: `${YOUTUBE_PREFIX}${id}`,\n    };\n\n    return {\n      id,\n      provider,\n      url: providerUrls[provider],\n    };\n  }\n};\n","import {\n  type InsertNodesOptions,\n  type SlateEditor,\n  getParentNode,\n  insertNodes,\n} from '@udecode/plate-common';\n\nimport {\n  type TMediaEmbedElement,\n  BaseMediaEmbedPlugin,\n} from '../BaseMediaEmbedPlugin';\n\nexport const insertMediaEmbed = <E extends SlateEditor>(\n  editor: E,\n  { url = '' }: Partial<TMediaEmbedElement>,\n  options: InsertNodesOptions<E> = {}\n): void => {\n  if (!editor.selection) return;\n\n  const selectionParentEntry = getParentNode(editor, editor.selection);\n\n  if (!selectionParentEntry) return;\n\n  const [, path] = selectionParentEntry;\n  insertNodes<TMediaEmbedElement>(\n    editor,\n    {\n      children: [{ text: '' }],\n      type: editor.getType(BaseMediaEmbedPlugin),\n      url,\n    },\n    {\n      at: path,\n      nextBlock: true,\n      ...(options as any),\n    }\n  );\n};\n","import { type PluginConfig, createTSlatePlugin } from '@udecode/plate-common';\n\nimport type { MediaPlaceholder } from './types';\n\nexport type PlaceholderConfig = PluginConfig<'placeholder', MediaPlaceholder>;\n\nexport const BasePlaceholderPlugin = createTSlatePlugin<PlaceholderConfig>({\n  key: 'placeholder',\n  node: { isElement: true, isVoid: true },\n});\n","import {\n  type InsertNodesOptions,\n  type SlateEditor,\n  insertNodes,\n  withoutNormalizing,\n} from '@udecode/plate-common';\n\nimport type { TPlaceholderElement } from '../types';\n\nimport { BaseAudioPlugin } from '../../BaseAudioPlugin';\nimport { BaseFilePlugin } from '../../BaseFilePlugin';\nimport { BaseVideoPlugin } from '../../BaseVideoPlugin';\nimport { BaseImagePlugin } from '../../image';\nimport { BasePlaceholderPlugin } from '../BasePlaceholderPlugin';\n\nexport const insertPlaceholder = <E extends SlateEditor>(\n  editor: E,\n  mediaType: string,\n  options?: InsertNodesOptions<E>\n) => {\n  withoutNormalizing(editor, () =>\n    insertNodes<TPlaceholderElement>(\n      editor,\n      {\n        children: [{ text: '' }],\n        mediaType,\n        type: editor.getType(BasePlaceholderPlugin),\n      },\n      options as any\n    )\n  );\n};\n\nexport const insertImagePlaceholder = <E extends SlateEditor>(\n  editor: E,\n  options?: InsertNodesOptions<E>\n) => insertPlaceholder(editor, BaseImagePlugin.key, options);\n\nexport const insertVideoPlaceholder = <E extends SlateEditor>(\n  editor: E,\n  options?: InsertNodesOptions<E>\n) => insertPlaceholder(editor, BaseVideoPlugin.key, options);\n\nexport const insertAudioPlaceholder = <E extends SlateEditor>(\n  editor: E,\n  options?: InsertNodesOptions<E>\n) => insertPlaceholder(editor, BaseAudioPlugin.key, options);\n\nexport const insertFilePlaceholder = <E extends SlateEditor>(\n  editor: E,\n  options?: InsertNodesOptions<E>\n) => insertPlaceholder(editor, BaseFilePlugin.key, options);\n","import {\n  type SetNodesOptions,\n  type SlateEditor,\n  setNodes,\n} from '@udecode/plate-common';\n\ntype props = {\n  type: string;\n  url: string;\n  isUpload?: boolean;\n  name?: string;\n  width?: number;\n};\n\nexport const setMediaNode = (\n  editor: SlateEditor,\n  props: props,\n  options?: SetNodesOptions\n) => setNodes(editor, props, options);\n"],"mappings":"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","names":["createSlatePlugin","createSlatePlugin","createTSlatePlugin","createTSlatePlugin","isUrl","insertNodes","insertNodes","createTSlatePlugin","insertNodes","insertNodes"]}
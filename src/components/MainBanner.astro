---
// MainBanner.astro
import profileImage from '../assets/images/joron_profile.jpeg'
const stacks = ['DevOps', 'Cloud Native', 'Kubernetes', 'Python']
---

<section class="main-banner">
  <div class="banner-container">
    <div class="profile-section">
      <div class="profile-image">
        <img src={profileImage.src} alt="조성찬 프로필" />
      </div>
      <div class="profile-text">
        <div class="greeting">안녕하세요!</div>
        <div class="title">
          <strong><span class="rotating-text" data-texts={JSON.stringify(stacks)}></span></strong>엔지니어
          <br />
          <strong class="name">조성찬</strong>입니다.
        </div>
        <div class="description">
          클라우드 네이티브 기술과 DevOps에 열정을 가진 엔지니어입니다.
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .main-banner {
    display: flex;
    flex-direction: column;
    width: 100%;
    margin: 60px 0 130px 0;
    font-family: inherit;
  }

  .banner-container {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 24px;
    min-height: 400px;
  }

  .profile-section {
    display: flex;
    align-items: center;
    gap: 60px;
    /* width: 100%; */
    max-width: 1000px;
  }

  .profile-image {
    flex-shrink: 0;
  }

  .profile-image img {
    width: 280px;
    height: 280px;
    border-radius: 50%;
    object-fit: cover;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .profile-image img:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
  }

  .profile-text {
    flex: 1;
    text-align: left;
  }

  .greeting {
    font-size: 24px;
    color: #666;
    margin-bottom: 10px;
    font-weight: 300;
  }

  .title {
    font-size: 48px;
    line-height: 1.2;
    margin-bottom: 20px;
  }

  .title strong {
    display: inline-block;
    font-weight: 600;
  }

  .name {
    color: #000;
    font-weight: 700;
  }

  .description {
    font-size: 18px;
    color: #666;
    line-height: 1.6;
    margin-top: 15px;
    font-weight: 300;
  }

  .rotating-text {
    position: relative;
    display: inline;
    color: #000;
    font-weight: 700;
  }

  .rotating-text::after {
    content: '|';
    animation: blink 0.8s cubic-bezier(0.68, 0.01, 0.01, 0.99) infinite;
    margin-left: 2px;
    opacity: 1;
  }

  .rotating-text.typing::after {
    animation: none;
    opacity: 1;
  }

  .rotating-text.deleting::after {
    animation: none;
    opacity: 1;
  }

  @keyframes blink {
    0%, 100% { opacity: 0; }
    50% { opacity: 1; }
  }

  @media (max-width: 768px) {
    .main-banner {
      margin: 40px 0 80px 0;
    }

    .banner-container {
      padding: 0 20px;
      min-height: auto;
    }

    .profile-section {
      flex-direction: column;
      gap: 30px;
      text-align: center;
    }

    .profile-image img {
      width: 200px;
      height: 200px;
    }

    .profile-text {
      text-align: center;
    }

    .title {
      font-size: 32px;
    }

    .greeting {
      font-size: 20px;
    }

    .description {
      font-size: 16px;
    }
  }

  @media (max-width: 480px) {
    .banner-container {
      padding: 0 16px;
    }

    .profile-image img {
      width: 160px;
      height: 160px;
    }

    .title {
      font-size: 28px;
    }

    .greeting {
      font-size: 18px;
    }
  }
</style>

<script>
  // Typing effect for rotating text
  const rotatingText = document.querySelector('.rotating-text') as HTMLElement;
  
  if (rotatingText) {
    const texts = JSON.parse(rotatingText.dataset.texts || '[]');
    let currentIndex = 0;
    let currentText = texts[0] || 'AWS';
    let isDeleting = false;
    let charIndex = currentText.length;
    
    // 타이핑 속도 설정
    const typeSpeed = 100; // 타이핑 속도 (ms)
    const deleteSpeed = 50; // 삭제 속도 (ms)
    const pauseTime = 2000; // 완성된 단어 표시 시간 (ms)
    const deletePauseTime = 500; // 삭제 완료 후 대기 시간 (ms)

    function typeEffect() {
      const currentFullText = texts[currentIndex];
      
      if (!isDeleting) {
        // 타이핑 중
        rotatingText.textContent = currentFullText.substring(0, charIndex);
        rotatingText.classList.add('typing');
        rotatingText.classList.remove('deleting');
        charIndex++;
        
        if (charIndex > currentFullText.length) {
          // 타이핑 완료, 잠시 대기 후 삭제 시작
          isDeleting = true;
          rotatingText.classList.remove('typing');
          setTimeout(typeEffect, pauseTime);
          return;
        }
        
        setTimeout(typeEffect, typeSpeed);
      } else {
        // 삭제 중
        rotatingText.textContent = currentFullText.substring(0, charIndex);
        rotatingText.classList.add('deleting');
        rotatingText.classList.remove('typing');
        charIndex--;
        
        if (charIndex < 0) {
          // 삭제 완료, 다음 텍스트로 이동
          isDeleting = false;
          currentIndex = (currentIndex + 1) % texts.length;
          charIndex = 0;
          rotatingText.classList.remove('deleting');
          setTimeout(typeEffect, deletePauseTime);
          return;
        }
        
        setTimeout(typeEffect, deleteSpeed);
      }
    }
    
    // 초기 설정 후 효과 시작
    rotatingText.textContent = currentText;
    
    // 2초 후 타이핑 효과 시작
    setTimeout(() => {
      if (texts.length > 1) {
        isDeleting = true;
        charIndex = currentText.length;
        typeEffect();
      }
    }, 2000);
  }
</script> 